import type { KeyringInstance, KeyringPair } from '@polkadot/keyring/types';
import type { Prefix } from '@polkadot/util-crypto/address/types';
import type { AddressSubject } from './observable/types';
import type { KeyringOptions, KeyringStore } from './types';
export declare class Base {
    #private;
    protected _store: KeyringStore;
    protected _genesisHash?: string;
    constructor();
    get accounts(): AddressSubject;
    get addresses(): AddressSubject;
    get contracts(): AddressSubject;
    get keyring(): KeyringInstance;
    get genesisHash(): string | undefined;
    decodeAddress: (key: string | Uint8Array, ignoreChecksum?: boolean | undefined, ss58Format?: number | undefined) => Uint8Array;
    encodeAddress: (key: string | Uint8Array, ss58Format?: number | undefined) => string;
    getPair(address: string | Uint8Array): KeyringPair;
    getPairs(): KeyringPair[];
    isAvailable(_address: Uint8Array | string): boolean;
    isPassValid(password: string): boolean;
    setSS58Format(ss58Format?: Prefix): void;
    setDevMode(isDevelopment: boolean): void;
    protected initKeyring(options: KeyringOptions): void;
    protected addAccountPairs(): void;
    protected addTimestamp(pair: KeyringPair): void;
}
