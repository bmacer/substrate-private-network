{"version":3,"sources":["../src/listenDevices.js"],"names":["deviceToLog","productId","locationId","deviceAddress","usbDebounce","setUsbDebounce","n","monitoring","monitor","usbDetect","startMonitoring","process","on","stopMonitoring","listenDevices","onAdd","onRemove","unmonitor","addEvent","ledgerUSBVendorId","removeEvent","timeout","add","device","setTimeout","remove","clearTimeout","off"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAYA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,CAAD,KACjB,aAAYF,SAAU,eAAcC,UAAW,kBAAiBC,aAAc,EADjF;;AAGA,IAAIC,WAAW,GAAG,IAAlB;;AAEO,MAAMC,cAAc,GAAIC,CAAD,IAAe;AAC3CF,EAAAA,WAAW,GAAGE,CAAd;AACD,CAFM;;;AAIP,IAAIC,UAAU,GAAG,KAAjB;;AACA,MAAMC,OAAO,GAAG,MAAM;AACpB,MAAI,CAACD,UAAL,EAAiB;AACfA,IAAAA,UAAU,GAAG,IAAb;;AACAE,0BAAUC,eAAV;AACD;;AACD,SAAO,MAAM,CAAE,CAAf;AACD,CAND,C,CAQA;;;AACAC,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmB,MAAM;AACvB,MAAIL,UAAJ,EAAgB;AACd;AACAE,0BAAUI,cAAV;AACD;AACF,CALD;;AAOO,MAAMC,aAAa,GAAG,CAC3BC,KAD2B,EAE3BC,QAF2B,KAGxB;AACH,QAAMC,SAAS,GAAGT,OAAO,EAAzB;AAEA,QAAMU,QAAQ,GAAG,SAASC,0BAA1B;AACA,QAAMC,WAAW,GAAG,YAAYD,0BAAhC;AAEA,MAAIE,OAAJ;;AAEA,QAAMC,GAAG,GAAIC,MAAD,IAAY;AACtB,mBAAI,eAAJ,EAAqB,UAAUvB,WAAW,CAACuB,MAAD,CAA1C;;AACA,QAAI,CAACF,OAAL,EAAc;AACZ;AACA;AACAA,MAAAA,OAAO,GAAGG,UAAU,CAAC,MAAM;AACzBT,QAAAA,KAAK,CAACQ,MAAD,CAAL;AACAF,QAAAA,OAAO,GAAG,IAAV;AACD,OAHmB,EAGjBjB,WAHiB,CAApB;AAID;AACF,GAVD;;AAYA,QAAMqB,MAAM,GAAIF,MAAD,IAAY;AACzB,mBAAI,eAAJ,EAAqB,aAAavB,WAAW,CAACuB,MAAD,CAA7C;;AACA,QAAIF,OAAJ,EAAa;AACXK,MAAAA,YAAY,CAACL,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD,KAHD,MAGO;AACLL,MAAAA,QAAQ,CAACO,MAAD,CAAR;AACD;AACF,GARD;;AAUAd,wBAAUG,EAAV,CAAaM,QAAb,EAAuBI,GAAvB;;AACAb,wBAAUG,EAAV,CAAaQ,WAAb,EAA0BK,MAA1B;;AAEA,SAAO,MAAM;AACX,QAAIJ,OAAJ,EAAaK,YAAY,CAACL,OAAD,CAAZ;;AACbZ,0BAAUkB,GAAV,CAAcT,QAAd,EAAwBI,GAAxB;;AACAb,0BAAUkB,GAAV,CAAcP,WAAd,EAA2BK,MAA3B;;AACAR,IAAAA,SAAS;AACV,GALD;AAMD,CA1CM","sourcesContent":["// @flow\nimport usbDetect from \"usb-detection\";\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nimport { log } from \"@ledgerhq/logs\";\n\nexport type Device = {\n  locationId: number,\n  vendorId: number,\n  productId: number,\n  deviceName: string,\n  manufacturer: string,\n  serialNumber: string,\n  deviceAddress: number,\n};\n\nconst deviceToLog = ({ productId, locationId, deviceAddress }) =>\n  `productId=${productId} locationId=${locationId} deviceAddress=${deviceAddress}`;\n\nlet usbDebounce = 1000;\n\nexport const setUsbDebounce = (n: number) => {\n  usbDebounce = n;\n};\n\nlet monitoring = false;\nconst monitor = () => {\n  if (!monitoring) {\n    monitoring = true;\n    usbDetect.startMonitoring();\n  }\n  return () => {};\n};\n\n// No better way for now. see https://github.com/LedgerHQ/ledgerjs/issues/434\nprocess.on(\"exit\", () => {\n  if (monitoring) {\n    // redeem the monitoring so the process can be terminated.\n    usbDetect.stopMonitoring();\n  }\n});\n\nexport const listenDevices = (\n  onAdd: (Device) => void,\n  onRemove: (Device) => void\n) => {\n  const unmonitor = monitor();\n\n  const addEvent = \"add:\" + ledgerUSBVendorId;\n  const removeEvent = \"remove:\" + ledgerUSBVendorId;\n\n  let timeout;\n\n  const add = (device) => {\n    log(\"usb-detection\", \"add: \" + deviceToLog(device));\n    if (!timeout) {\n      // a time is needed for the device to actually be connectable over HID..\n      // we also take this time to not emit the device yet and potentially cancel it if a remove happens.\n      timeout = setTimeout(() => {\n        onAdd(device);\n        timeout = null;\n      }, usbDebounce);\n    }\n  };\n\n  const remove = (device) => {\n    log(\"usb-detection\", \"remove: \" + deviceToLog(device));\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    } else {\n      onRemove(device);\n    }\n  };\n\n  usbDetect.on(addEvent, add);\n  usbDetect.on(removeEvent, remove);\n\n  return () => {\n    if (timeout) clearTimeout(timeout);\n    usbDetect.off(addEvent, add);\n    usbDetect.off(removeEvent, remove);\n    unmonitor();\n  };\n};\n"],"file":"listenDevices.js"}