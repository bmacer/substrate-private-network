{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\n\nfunction parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {\n  const isIncluded = id => address ? id.toString() === address.toString() : false;\n\n  return {\n    isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(([id]) => id)) || councilMembers || []).some(isIncluded),\n    isSociety: (societyMembers || []).some(isIncluded),\n    isSudo: (sudoKey === null || sudoKey === void 0 ? void 0 : sudoKey.toString()) === (address === null || address === void 0 ? void 0 : address.toString()),\n    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)\n  };\n}\n/**\n * @name info\n * @description Returns account membership flags\n */\n\n\nexport function flags(instanceId, api) {\n  return memo(instanceId, address => {\n    var _api$query$councilSec, _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;\n\n    const councilSection = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';\n    return combineLatest([address && (_api$query$councilSec = api.query[councilSection]) !== null && _api$query$councilSec !== void 0 && _api$query$councilSec.members ? api.query[councilSection].members() : of(undefined), address && (_api$query$council = api.query.council) !== null && _api$query$council !== void 0 && _api$query$council.members ? api.query.council.members() : of([]), address && (_api$query$technicalC = api.query.technicalCommittee) !== null && _api$query$technicalC !== void 0 && _api$query$technicalC.members ? api.query.technicalCommittee.members() : of([]), address && (_api$query$society = api.query.society) !== null && _api$query$society !== void 0 && _api$query$society.members ? api.query.society.members() : of([]), address && (_api$query$sudo = api.query.sudo) !== null && _api$query$sudo !== void 0 && _api$query$sudo.key ? api.query.sudo.key() : of(undefined)]).pipe(map(result => parseFlags(address, result)));\n  });\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/accounts/flags.mjs"],"names":["combineLatest","of","map","memo","parseFlags","address","electionsMembers","councilMembers","technicalCommitteeMembers","societyMembers","sudoKey","isIncluded","id","toString","isCouncil","some","isSociety","isSudo","isTechCommittee","flags","instanceId","api","_api$query$councilSec","_api$query$council","_api$query$technicalC","_api$query$society","_api$query$sudo","councilSection","query","electionsPhragmen","members","undefined","council","technicalCommittee","society","sudo","key","pipe","result"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\n\nfunction parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {\n  const isIncluded = id => address ? id.toString() === address.toString() : false;\n\n  return {\n    isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(([id]) => id)) || councilMembers || []).some(isIncluded),\n    isSociety: (societyMembers || []).some(isIncluded),\n    isSudo: (sudoKey === null || sudoKey === void 0 ? void 0 : sudoKey.toString()) === (address === null || address === void 0 ? void 0 : address.toString()),\n    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)\n  };\n}\n/**\n * @name info\n * @description Returns account membership flags\n */\n\n\nexport function flags(instanceId, api) {\n  return memo(instanceId, address => {\n    var _api$query$councilSec, _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;\n\n    const councilSection = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';\n    return combineLatest([address && (_api$query$councilSec = api.query[councilSection]) !== null && _api$query$councilSec !== void 0 && _api$query$councilSec.members ? api.query[councilSection].members() : of(undefined), address && (_api$query$council = api.query.council) !== null && _api$query$council !== void 0 && _api$query$council.members ? api.query.council.members() : of([]), address && (_api$query$technicalC = api.query.technicalCommittee) !== null && _api$query$technicalC !== void 0 && _api$query$technicalC.members ? api.query.technicalCommittee.members() : of([]), address && (_api$query$society = api.query.society) !== null && _api$query$society !== void 0 && _api$query$society.members ? api.query.society.members() : of([]), address && (_api$query$sudo = api.query.sudo) !== null && _api$query$sudo !== void 0 && _api$query$sudo.key ? api.query.sudo.key() : of(undefined)]).pipe(map(result => parseFlags(address, result)));\n  });\n}"]},"metadata":{},"sourceType":"module"}