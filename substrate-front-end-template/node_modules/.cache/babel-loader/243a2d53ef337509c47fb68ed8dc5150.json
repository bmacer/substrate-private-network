{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isFunction, isString, isU8a } from '@polkadot/util';\nimport { Bytes } from \"./Bytes.mjs\";\nconst HASHER_MAP = {\n  // opaque\n  Blake2_128: [16, false],\n  // eslint-disable-line camelcase\n  Blake2_128Concat: [16, true],\n  // eslint-disable-line camelcase\n  Blake2_256: [32, false],\n  // eslint-disable-line camelcase\n  Identity: [0, true],\n  Twox128: [16, false],\n  Twox256: [32, false],\n  Twox64Concat: [8, true]\n};\n\nfunction getStorageType(type) {\n  if (type.isPlain) {\n    return [false, type.asPlain.toString()];\n  } else if (type.isDoubleMap) {\n    return [false, type.asDoubleMap.value.toString()];\n  }\n\n  return [false, type.asMap.value.toString()];\n} // we unwrap the type here, turning into an output usable for createType\n\n/** @internal */\n\n\nexport function unwrapStorageType(type, isOptional) {\n  const [hasWrapper, outputType] = getStorageType(type);\n  return isOptional && !hasWrapper ? `Option<${outputType}>` : outputType;\n}\n/** @internal */\n\nfunction decodeStorageKey(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof StorageKey) {\n    return {\n      key: value,\n      method: value.method,\n      section: value.section\n    };\n  } else if (!value || isString(value) || isU8a(value)) {\n    // let Bytes handle these inputs\n    return {\n      key: value\n    };\n  } else if (isFunction(value)) {\n    return {\n      key: value(),\n      method: value.method,\n      section: value.section\n    };\n  } else if (Array.isArray(value)) {\n    const [fn, ...arg] = value;\n    assert(isFunction(fn), 'Expected function input for key construction');\n    return {\n      key: fn(...arg),\n      method: fn.method,\n      section: fn.section\n    };\n  }\n\n  throw new Error(`Unable to convert input ${value} to StorageKey`);\n}\n\nfunction decodeHashers(registry, value, hashers) {\n  // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total\n  let offset = 32;\n  return hashers.reduce((result, [hasher, type]) => {\n    const [hashLen, canDecode] = HASHER_MAP[hasher.type];\n    const decoded = canDecode ? registry.createType(type, value.subarray(offset + hashLen)) : registry.createType('Raw', value.subarray(offset, offset + hashLen));\n    offset += hashLen + (canDecode ? decoded.encodedLength : 0);\n    result.push(decoded);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeArgsFromMeta(registry, value, meta) {\n  if (!meta || !(meta.type.isDoubleMap || meta.type.isMap)) {\n    return [];\n  }\n\n  if (meta.type.isMap) {\n    const mapInfo = meta.type.asMap;\n    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key.toString()]]);\n  }\n\n  const mapInfo = meta.type.asDoubleMap;\n  return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key1.toString()], [mapInfo.key2Hasher, mapInfo.key2.toString()]]);\n}\n/**\n * @name StorageKey\n * @description\n * A representation of a storage key (typically hashed) in the system. It can be\n * constructed by passing in a raw key or a StorageEntry with (optional) arguments.\n */\n\n\nexport class StorageKey extends Bytes {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore This is assigned via this.decodeArgsFromMeta()\n  constructor(registry, value, override = {}) {\n    const {\n      key,\n      method,\n      section\n    } = decodeStorageKey(value);\n    super(registry, key);\n    this._args = void 0;\n    this._meta = void 0;\n    this._outputType = void 0;\n    this._method = void 0;\n    this._section = void 0;\n    this._outputType = StorageKey.getType(value); // decode the args (as applicable based on the key and the hashers, after all init)\n\n    this.setMeta(StorageKey.getMeta(value), override.section || section, override.method || method);\n  }\n\n  static getMeta(value) {\n    if (value instanceof StorageKey) {\n      return value.meta;\n    } else if (isFunction(value)) {\n      return value.meta;\n    } else if (Array.isArray(value)) {\n      const [fn] = value;\n      return fn.meta;\n    }\n\n    return undefined;\n  }\n\n  static getType(value) {\n    if (value instanceof StorageKey) {\n      return value.outputType;\n    } else if (isFunction(value)) {\n      return unwrapStorageType(value.meta.type);\n    } else if (Array.isArray(value)) {\n      const [fn] = value;\n\n      if (fn.meta) {\n        return unwrapStorageType(fn.meta.type);\n      }\n    } // If we have no type set, default to Raw\n\n\n    return 'Raw';\n  }\n  /**\n   * @description Return the decoded arguments (applicable to map/doublemap with decodable values)\n   */\n\n\n  get args() {\n    return this._args;\n  }\n  /**\n   * @description The metadata or `undefined` when not available\n   */\n\n\n  get meta() {\n    return this._meta;\n  }\n  /**\n   * @description The key method or `undefined` when not specified\n   */\n\n\n  get method() {\n    return this._method;\n  }\n  /**\n   * @description The output type\n   */\n\n\n  get outputType() {\n    return this._outputType;\n  }\n  /**\n   * @description The key section or `undefined` when not specified\n   */\n\n\n  get section() {\n    return this._section;\n  }\n\n  is(key) {\n    return key.section === this.section && key.method === this.method;\n  }\n  /**\n   * @description Sets the meta for this key\n   */\n\n\n  setMeta(meta, section, method) {\n    this._meta = meta;\n    this._method = method || this._method;\n    this._section = section || this._section;\n\n    if (meta) {\n      this._outputType = unwrapStorageType(meta.type);\n    }\n\n    try {\n      this._args = decodeArgsFromMeta(this.registry, this.toU8a(true), this.meta);\n    } catch (error) {// ignore...\n    }\n\n    return this;\n  }\n  /**\n   * @description Returns the Human representation for this type\n   */\n\n\n  toHuman() {\n    return this._args.length ? this._args.map(arg => arg.toHuman()) : super.toHuman();\n  }\n  /**\n   * @description Returns the raw type for this\n   */\n\n\n  toRawType() {\n    return 'StorageKey';\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/primitive/StorageKey.mjs"],"names":["assert","isFunction","isString","isU8a","Bytes","HASHER_MAP","Blake2_128","Blake2_128Concat","Blake2_256","Identity","Twox128","Twox256","Twox64Concat","getStorageType","type","isPlain","asPlain","toString","isDoubleMap","asDoubleMap","value","asMap","unwrapStorageType","isOptional","hasWrapper","outputType","decodeStorageKey","StorageKey","key","method","section","Array","isArray","fn","arg","Error","decodeHashers","registry","hashers","offset","reduce","result","hasher","hashLen","canDecode","decoded","createType","subarray","encodedLength","push","decodeArgsFromMeta","meta","isMap","mapInfo","key1","key2Hasher","key2","constructor","override","_args","_meta","_outputType","_method","_section","getType","setMeta","getMeta","undefined","args","is","toU8a","error","toHuman","length","map","toRawType"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isFunction, isString, isU8a } from '@polkadot/util';\nimport { Bytes } from \"./Bytes.mjs\";\nconst HASHER_MAP = {\n  // opaque\n  Blake2_128: [16, false],\n  // eslint-disable-line camelcase\n  Blake2_128Concat: [16, true],\n  // eslint-disable-line camelcase\n  Blake2_256: [32, false],\n  // eslint-disable-line camelcase\n  Identity: [0, true],\n  Twox128: [16, false],\n  Twox256: [32, false],\n  Twox64Concat: [8, true]\n};\n\nfunction getStorageType(type) {\n  if (type.isPlain) {\n    return [false, type.asPlain.toString()];\n  } else if (type.isDoubleMap) {\n    return [false, type.asDoubleMap.value.toString()];\n  }\n\n  return [false, type.asMap.value.toString()];\n} // we unwrap the type here, turning into an output usable for createType\n\n/** @internal */\n\n\nexport function unwrapStorageType(type, isOptional) {\n  const [hasWrapper, outputType] = getStorageType(type);\n  return isOptional && !hasWrapper ? `Option<${outputType}>` : outputType;\n}\n/** @internal */\n\nfunction decodeStorageKey(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof StorageKey) {\n    return {\n      key: value,\n      method: value.method,\n      section: value.section\n    };\n  } else if (!value || isString(value) || isU8a(value)) {\n    // let Bytes handle these inputs\n    return {\n      key: value\n    };\n  } else if (isFunction(value)) {\n    return {\n      key: value(),\n      method: value.method,\n      section: value.section\n    };\n  } else if (Array.isArray(value)) {\n    const [fn, ...arg] = value;\n    assert(isFunction(fn), 'Expected function input for key construction');\n    return {\n      key: fn(...arg),\n      method: fn.method,\n      section: fn.section\n    };\n  }\n\n  throw new Error(`Unable to convert input ${value} to StorageKey`);\n}\n\nfunction decodeHashers(registry, value, hashers) {\n  // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total\n  let offset = 32;\n  return hashers.reduce((result, [hasher, type]) => {\n    const [hashLen, canDecode] = HASHER_MAP[hasher.type];\n    const decoded = canDecode ? registry.createType(type, value.subarray(offset + hashLen)) : registry.createType('Raw', value.subarray(offset, offset + hashLen));\n    offset += hashLen + (canDecode ? decoded.encodedLength : 0);\n    result.push(decoded);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeArgsFromMeta(registry, value, meta) {\n  if (!meta || !(meta.type.isDoubleMap || meta.type.isMap)) {\n    return [];\n  }\n\n  if (meta.type.isMap) {\n    const mapInfo = meta.type.asMap;\n    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key.toString()]]);\n  }\n\n  const mapInfo = meta.type.asDoubleMap;\n  return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key1.toString()], [mapInfo.key2Hasher, mapInfo.key2.toString()]]);\n}\n/**\n * @name StorageKey\n * @description\n * A representation of a storage key (typically hashed) in the system. It can be\n * constructed by passing in a raw key or a StorageEntry with (optional) arguments.\n */\n\n\nexport class StorageKey extends Bytes {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore This is assigned via this.decodeArgsFromMeta()\n  constructor(registry, value, override = {}) {\n    const {\n      key,\n      method,\n      section\n    } = decodeStorageKey(value);\n    super(registry, key);\n    this._args = void 0;\n    this._meta = void 0;\n    this._outputType = void 0;\n    this._method = void 0;\n    this._section = void 0;\n    this._outputType = StorageKey.getType(value); // decode the args (as applicable based on the key and the hashers, after all init)\n\n    this.setMeta(StorageKey.getMeta(value), override.section || section, override.method || method);\n  }\n\n  static getMeta(value) {\n    if (value instanceof StorageKey) {\n      return value.meta;\n    } else if (isFunction(value)) {\n      return value.meta;\n    } else if (Array.isArray(value)) {\n      const [fn] = value;\n      return fn.meta;\n    }\n\n    return undefined;\n  }\n\n  static getType(value) {\n    if (value instanceof StorageKey) {\n      return value.outputType;\n    } else if (isFunction(value)) {\n      return unwrapStorageType(value.meta.type);\n    } else if (Array.isArray(value)) {\n      const [fn] = value;\n\n      if (fn.meta) {\n        return unwrapStorageType(fn.meta.type);\n      }\n    } // If we have no type set, default to Raw\n\n\n    return 'Raw';\n  }\n  /**\n   * @description Return the decoded arguments (applicable to map/doublemap with decodable values)\n   */\n\n\n  get args() {\n    return this._args;\n  }\n  /**\n   * @description The metadata or `undefined` when not available\n   */\n\n\n  get meta() {\n    return this._meta;\n  }\n  /**\n   * @description The key method or `undefined` when not specified\n   */\n\n\n  get method() {\n    return this._method;\n  }\n  /**\n   * @description The output type\n   */\n\n\n  get outputType() {\n    return this._outputType;\n  }\n  /**\n   * @description The key section or `undefined` when not specified\n   */\n\n\n  get section() {\n    return this._section;\n  }\n\n  is(key) {\n    return key.section === this.section && key.method === this.method;\n  }\n  /**\n   * @description Sets the meta for this key\n   */\n\n\n  setMeta(meta, section, method) {\n    this._meta = meta;\n    this._method = method || this._method;\n    this._section = section || this._section;\n\n    if (meta) {\n      this._outputType = unwrapStorageType(meta.type);\n    }\n\n    try {\n      this._args = decodeArgsFromMeta(this.registry, this.toU8a(true), this.meta);\n    } catch (error) {// ignore...\n    }\n\n    return this;\n  }\n  /**\n   * @description Returns the Human representation for this type\n   */\n\n\n  toHuman() {\n    return this._args.length ? this._args.map(arg => arg.toHuman()) : super.toHuman();\n  }\n  /**\n   * @description Returns the raw type for this\n   */\n\n\n  toRawType() {\n    return 'StorageKey';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}