{"ast":null,"code":"// Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isString, u8aConcat, u8aToU8a } from '@polkadot/util';\nimport { MetadataVersioned } from \"./MetadataVersioned.mjs\"; // magic u32 preceding the version id\n\nconst VERSION_IDX = 4; // magic + lowest supported version\n\nconst EMPTY_METADATA = u8aConcat(new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]));\nconst EMPTY_U8A = new Uint8Array();\n\nfunction sanitizeInput(_value = EMPTY_U8A) {\n  if (isString(_value)) {\n    return sanitizeInput(u8aToU8a(_value));\n  }\n\n  return _value.length === 0 ? EMPTY_METADATA : _value;\n}\n\nfunction decodeMetadata(registry, _value) {\n  const value = sanitizeInput(_value);\n  const version = value[VERSION_IDX];\n\n  try {\n    return new MetadataVersioned(registry, value);\n  } catch (error) {\n    // This is an f-ing hack as a follow-up to another ugly hack\n    // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2\n    // when we fail on V9, try to re-parse it as v10... yes... HACK\n    if (version === 9) {\n      value[VERSION_IDX] = 10;\n      return decodeMetadata(registry, value);\n    }\n\n    throw error;\n  }\n}\n/**\n * @name Metadata\n * @description\n * The versioned runtime metadata as a decoded structure\n */\n\n\nexport class Metadata extends MetadataVersioned {\n  constructor(registry, value) {\n    super(registry, decodeMetadata(registry, value));\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/metadata/Metadata.mjs"],"names":["isString","u8aConcat","u8aToU8a","MetadataVersioned","VERSION_IDX","EMPTY_METADATA","Uint8Array","EMPTY_U8A","sanitizeInput","_value","length","decodeMetadata","registry","value","version","error","Metadata","constructor"],"mappings":"AAAA;AACA;AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA8C,gBAA9C;AACA,SAASC,iBAAT,QAAkC,yBAAlC,C,CAA6D;;AAE7D,MAAMC,WAAW,GAAG,CAApB,C,CAAuB;;AAEvB,MAAMC,cAAc,GAAGJ,SAAS,CAAC,IAAIK,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,CAAzB,CAAf,CAAD,CAAhC;AACA,MAAMC,SAAS,GAAG,IAAID,UAAJ,EAAlB;;AAEA,SAASE,aAAT,CAAuBC,MAAM,GAAGF,SAAhC,EAA2C;AACzC,MAAIP,QAAQ,CAACS,MAAD,CAAZ,EAAsB;AACpB,WAAOD,aAAa,CAACN,QAAQ,CAACO,MAAD,CAAT,CAApB;AACD;;AAED,SAAOA,MAAM,CAACC,MAAP,KAAkB,CAAlB,GAAsBL,cAAtB,GAAuCI,MAA9C;AACD;;AAED,SAASE,cAAT,CAAwBC,QAAxB,EAAkCH,MAAlC,EAA0C;AACxC,QAAMI,KAAK,GAAGL,aAAa,CAACC,MAAD,CAA3B;AACA,QAAMK,OAAO,GAAGD,KAAK,CAACT,WAAD,CAArB;;AAEA,MAAI;AACF,WAAO,IAAID,iBAAJ,CAAsBS,QAAtB,EAAgCC,KAAhC,CAAP;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd;AACA;AACA;AACA,QAAID,OAAO,KAAK,CAAhB,EAAmB;AACjBD,MAAAA,KAAK,CAACT,WAAD,CAAL,GAAqB,EAArB;AACA,aAAOO,cAAc,CAACC,QAAD,EAAWC,KAAX,CAArB;AACD;;AAED,UAAME,KAAN;AACD;AACF;AACD;AACA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMC,QAAN,SAAuBb,iBAAvB,CAAyC;AAC9Cc,EAAAA,WAAW,CAACL,QAAD,EAAWC,KAAX,EAAkB;AAC3B,UAAMD,QAAN,EAAgBD,cAAc,CAACC,QAAD,EAAWC,KAAX,CAA9B;AACD;;AAH6C","sourcesContent":["// Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isString, u8aConcat, u8aToU8a } from '@polkadot/util';\nimport { MetadataVersioned } from \"./MetadataVersioned.mjs\"; // magic u32 preceding the version id\n\nconst VERSION_IDX = 4; // magic + lowest supported version\n\nconst EMPTY_METADATA = u8aConcat(new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]));\nconst EMPTY_U8A = new Uint8Array();\n\nfunction sanitizeInput(_value = EMPTY_U8A) {\n  if (isString(_value)) {\n    return sanitizeInput(u8aToU8a(_value));\n  }\n\n  return _value.length === 0 ? EMPTY_METADATA : _value;\n}\n\nfunction decodeMetadata(registry, _value) {\n  const value = sanitizeInput(_value);\n  const version = value[VERSION_IDX];\n\n  try {\n    return new MetadataVersioned(registry, value);\n  } catch (error) {\n    // This is an f-ing hack as a follow-up to another ugly hack\n    // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2\n    // when we fail on V9, try to re-parse it as v10... yes... HACK\n    if (version === 9) {\n      value[VERSION_IDX] = 10;\n      return decodeMetadata(registry, value);\n    }\n\n    throw error;\n  }\n}\n/**\n * @name Metadata\n * @description\n * The versioned runtime metadata as a decoded structure\n */\n\n\nexport class Metadata extends MetadataVersioned {\n  constructor(registry, value) {\n    super(registry, decodeMetadata(registry, value));\n  }\n\n}"]},"metadata":{},"sourceType":"module"}