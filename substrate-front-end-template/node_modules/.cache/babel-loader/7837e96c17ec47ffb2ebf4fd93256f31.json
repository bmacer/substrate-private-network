{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isBn, isNumber, isString, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { Enum } from \"../codec/Enum.mjs\";\nimport { GenericAccountId } from \"./AccountId.mjs\";\nimport { GenericAccountIndex } from \"./AccountIndex.mjs\";\n\nfunction decodeMultiU8a(registry, value) {\n  if (isU8a(value) && value.length <= 32) {\n    if (value.length === 32) {\n      return {\n        id: value\n      };\n    } else if (value.length === 20) {\n      return {\n        Address20: value\n      };\n    } else {\n      return decodeMultiAny(registry, registry.createType('AccountIndex', value));\n    }\n  }\n\n  return value;\n}\n\nfunction decodeMultiAny(registry, value) {\n  if (value instanceof GenericMultiAddress) {\n    return value;\n  } else if (value instanceof GenericAccountId) {\n    return {\n      Id: value\n    };\n  } else if (value instanceof GenericAccountIndex || isNumber(value) || isBn(value)) {\n    return {\n      Index: registry.createType('Compact<AccountIndex>', value)\n    };\n  } else if (isString(value)) {\n    return decodeMultiU8a(registry, decodeAddress(value.toString()));\n  }\n\n  return decodeMultiU8a(registry, value);\n}\n\nexport class GenericMultiAddress extends Enum {\n  constructor(registry, value) {\n    super(registry, {\n      Id: 'AccountId',\n      Index: 'Compact<AccountIndex>',\n      Raw: 'Bytes',\n      // eslint-disable-next-line sort-keys\n      Address32: 'H256',\n      // eslint-disable-next-line sort-keys\n      Address20: 'H160'\n    }, decodeMultiAny(registry, value));\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.value.toString();\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/generic/MultiAddress.mjs"],"names":["isBn","isNumber","isString","isU8a","decodeAddress","Enum","GenericAccountId","GenericAccountIndex","decodeMultiU8a","registry","value","length","id","Address20","decodeMultiAny","createType","GenericMultiAddress","Id","Index","toString","constructor","Raw","Address32"],"mappings":"AAAA;AACA;AACA,SAASA,IAAT,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,KAAnC,QAAgD,gBAAhD;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,mBAAT,QAAoC,oBAApC;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,KAAlC,EAAyC;AACvC,MAAIP,KAAK,CAACO,KAAD,CAAL,IAAgBA,KAAK,CAACC,MAAN,IAAgB,EAApC,EAAwC;AACtC,QAAID,KAAK,CAACC,MAAN,KAAiB,EAArB,EAAyB;AACvB,aAAO;AACLC,QAAAA,EAAE,EAAEF;AADC,OAAP;AAGD,KAJD,MAIO,IAAIA,KAAK,CAACC,MAAN,KAAiB,EAArB,EAAyB;AAC9B,aAAO;AACLE,QAAAA,SAAS,EAAEH;AADN,OAAP;AAGD,KAJM,MAIA;AACL,aAAOI,cAAc,CAACL,QAAD,EAAWA,QAAQ,CAACM,UAAT,CAAoB,cAApB,EAAoCL,KAApC,CAAX,CAArB;AACD;AACF;;AAED,SAAOA,KAAP;AACD;;AAED,SAASI,cAAT,CAAwBL,QAAxB,EAAkCC,KAAlC,EAAyC;AACvC,MAAIA,KAAK,YAAYM,mBAArB,EAA0C;AACxC,WAAON,KAAP;AACD,GAFD,MAEO,IAAIA,KAAK,YAAYJ,gBAArB,EAAuC;AAC5C,WAAO;AACLW,MAAAA,EAAE,EAAEP;AADC,KAAP;AAGD,GAJM,MAIA,IAAIA,KAAK,YAAYH,mBAAjB,IAAwCN,QAAQ,CAACS,KAAD,CAAhD,IAA2DV,IAAI,CAACU,KAAD,CAAnE,EAA4E;AACjF,WAAO;AACLQ,MAAAA,KAAK,EAAET,QAAQ,CAACM,UAAT,CAAoB,uBAApB,EAA6CL,KAA7C;AADF,KAAP;AAGD,GAJM,MAIA,IAAIR,QAAQ,CAACQ,KAAD,CAAZ,EAAqB;AAC1B,WAAOF,cAAc,CAACC,QAAD,EAAWL,aAAa,CAACM,KAAK,CAACS,QAAN,EAAD,CAAxB,CAArB;AACD;;AAED,SAAOX,cAAc,CAACC,QAAD,EAAWC,KAAX,CAArB;AACD;;AAED,OAAO,MAAMM,mBAAN,SAAkCX,IAAlC,CAAuC;AAC5Ce,EAAAA,WAAW,CAACX,QAAD,EAAWC,KAAX,EAAkB;AAC3B,UAAMD,QAAN,EAAgB;AACdQ,MAAAA,EAAE,EAAE,WADU;AAEdC,MAAAA,KAAK,EAAE,uBAFO;AAGdG,MAAAA,GAAG,EAAE,OAHS;AAId;AACAC,MAAAA,SAAS,EAAE,MALG;AAMd;AACAT,MAAAA,SAAS,EAAE;AAPG,KAAhB,EAQGC,cAAc,CAACL,QAAD,EAAWC,KAAX,CARjB;AASD;AACD;AACF;AACA;;;AAGES,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKT,KAAL,CAAWS,QAAX,EAAP;AACD;;AAnB2C","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isBn, isNumber, isString, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { Enum } from \"../codec/Enum.mjs\";\nimport { GenericAccountId } from \"./AccountId.mjs\";\nimport { GenericAccountIndex } from \"./AccountIndex.mjs\";\n\nfunction decodeMultiU8a(registry, value) {\n  if (isU8a(value) && value.length <= 32) {\n    if (value.length === 32) {\n      return {\n        id: value\n      };\n    } else if (value.length === 20) {\n      return {\n        Address20: value\n      };\n    } else {\n      return decodeMultiAny(registry, registry.createType('AccountIndex', value));\n    }\n  }\n\n  return value;\n}\n\nfunction decodeMultiAny(registry, value) {\n  if (value instanceof GenericMultiAddress) {\n    return value;\n  } else if (value instanceof GenericAccountId) {\n    return {\n      Id: value\n    };\n  } else if (value instanceof GenericAccountIndex || isNumber(value) || isBn(value)) {\n    return {\n      Index: registry.createType('Compact<AccountIndex>', value)\n    };\n  } else if (isString(value)) {\n    return decodeMultiU8a(registry, decodeAddress(value.toString()));\n  }\n\n  return decodeMultiU8a(registry, value);\n}\n\nexport class GenericMultiAddress extends Enum {\n  constructor(registry, value) {\n    super(registry, {\n      Id: 'AccountId',\n      Index: 'Compact<AccountIndex>',\n      Raw: 'Bytes',\n      // eslint-disable-next-line sort-keys\n      Address32: 'H256',\n      // eslint-disable-next-line sort-keys\n      Address20: 'H160'\n    }, decodeMultiAny(registry, value));\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.value.toString();\n  }\n\n}"]},"metadata":{},"sourceType":"module"}