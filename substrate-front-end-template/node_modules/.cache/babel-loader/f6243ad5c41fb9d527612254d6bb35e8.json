{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Struct } from '@polkadot/types/codec';\nimport { assert } from '@polkadot/util';\nimport { toV10 } from \"./v9/toV10.mjs\";\nimport { toV11 } from \"./v10/toV11.mjs\";\nimport { toV12 } from \"./v11/toV12.mjs\";\nimport { toLatest } from \"./v12/toLatest.mjs\";\nimport { MagicNumber } from \"./MagicNumber.mjs\";\nimport { getUniqTypes, toCallsOnly } from \"./util/index.mjs\";\n\nvar _converted = _classPrivateFieldLooseKey(\"converted\");\n/**\n * @name MetadataVersioned\n * @description\n * The versioned runtime metadata as a decoded structure\n */\n\n\nexport class MetadataVersioned extends Struct {\n  constructor(registry, value) {\n    super(registry, {\n      magicNumber: MagicNumber,\n      metadata: 'MetadataAll'\n    }, value);\n    Object.defineProperty(this, _converted, {\n      writable: true,\n      value: new Map()\n    });\n  }\n\n  _assertVersion(version) {\n    assert(this.version <= version, `Cannot convert metadata from v${this.version} to v${version}`);\n    return this.version === version;\n  }\n\n  _getVersion(version, fromPrev) {\n    const asCurr = `asV${version}`;\n    const asPrev = `asV${version - 1}`;\n\n    if (this._assertVersion(version)) {\n      return this._metadata[asCurr];\n    }\n\n    if (!_classPrivateFieldLooseBase(this, _converted)[_converted].has(version)) {\n      _classPrivateFieldLooseBase(this, _converted)[_converted].set(version, fromPrev(this.registry, this[asPrev], this.version));\n    }\n\n    return _classPrivateFieldLooseBase(this, _converted)[_converted].get(version);\n  }\n  /**\n   * @description Returns the wrapped metadata as a limited calls-only (latest) version\n   */\n\n\n  get asCallsOnly() {\n    return new MetadataVersioned(this.registry, {\n      magicNumber: this.magicNumber,\n      metadata: this.registry.createType('MetadataAll', toCallsOnly(this.registry, this.asLatest), this.version)\n    });\n  }\n  /**\n   * @description Returns the wrapped metadata as a V9 object\n   */\n\n\n  get asV9() {\n    this._assertVersion(9);\n\n    return this._metadata.asV9;\n  }\n  /**\n   * @description Returns the wrapped values as a V10 object\n   */\n\n\n  get asV10() {\n    return this._getVersion(10, toV10);\n  }\n  /**\n   * @description Returns the wrapped values as a V11 object\n   */\n\n\n  get asV11() {\n    return this._getVersion(11, toV11);\n  }\n  /**\n   * @description Returns the wrapped values as a V12 object\n   */\n\n\n  get asV12() {\n    return this._getVersion(12, toV12);\n  }\n  /**\n   * @description Returns the wrapped values as a latest version object\n   */\n\n\n  get asLatest() {\n    // This is non-existent & latest - applied here to do the module-specific type conversions\n    return this._getVersion(13, toLatest);\n  }\n  /**\n   * @description\n   */\n\n\n  get magicNumber() {\n    return this.get('magicNumber');\n  }\n  /**\n   * @description the metadata wrapped\n   */\n\n\n  get _metadata() {\n    return this.get('metadata');\n  }\n  /**\n   * @description the metadata version this structure represents\n   */\n\n\n  get version() {\n    return this._metadata.index;\n  }\n\n  getUniqTypes(throwError) {\n    return getUniqTypes(this.registry, this.asLatest, throwError);\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/metadata/MetadataVersioned.mjs"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","Struct","assert","toV10","toV11","toV12","toLatest","MagicNumber","getUniqTypes","toCallsOnly","_converted","MetadataVersioned","constructor","registry","value","magicNumber","metadata","Object","defineProperty","writable","Map","_assertVersion","version","_getVersion","fromPrev","asCurr","asPrev","_metadata","has","set","get","asCallsOnly","createType","asLatest","asV9","asV10","asV11","asV12","index","throwError"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Struct } from '@polkadot/types/codec';\nimport { assert } from '@polkadot/util';\nimport { toV10 } from \"./v9/toV10.mjs\";\nimport { toV11 } from \"./v10/toV11.mjs\";\nimport { toV12 } from \"./v11/toV12.mjs\";\nimport { toLatest } from \"./v12/toLatest.mjs\";\nimport { MagicNumber } from \"./MagicNumber.mjs\";\nimport { getUniqTypes, toCallsOnly } from \"./util/index.mjs\";\n\nvar _converted = _classPrivateFieldLooseKey(\"converted\");\n\n/**\n * @name MetadataVersioned\n * @description\n * The versioned runtime metadata as a decoded structure\n */\nexport class MetadataVersioned extends Struct {\n  constructor(registry, value) {\n    super(registry, {\n      magicNumber: MagicNumber,\n      metadata: 'MetadataAll'\n    }, value);\n    Object.defineProperty(this, _converted, {\n      writable: true,\n      value: new Map()\n    });\n  }\n\n  _assertVersion(version) {\n    assert(this.version <= version, `Cannot convert metadata from v${this.version} to v${version}`);\n    return this.version === version;\n  }\n\n  _getVersion(version, fromPrev) {\n    const asCurr = `asV${version}`;\n    const asPrev = `asV${version - 1}`;\n\n    if (this._assertVersion(version)) {\n      return this._metadata[asCurr];\n    }\n\n    if (!_classPrivateFieldLooseBase(this, _converted)[_converted].has(version)) {\n      _classPrivateFieldLooseBase(this, _converted)[_converted].set(version, fromPrev(this.registry, this[asPrev], this.version));\n    }\n\n    return _classPrivateFieldLooseBase(this, _converted)[_converted].get(version);\n  }\n  /**\n   * @description Returns the wrapped metadata as a limited calls-only (latest) version\n   */\n\n\n  get asCallsOnly() {\n    return new MetadataVersioned(this.registry, {\n      magicNumber: this.magicNumber,\n      metadata: this.registry.createType('MetadataAll', toCallsOnly(this.registry, this.asLatest), this.version)\n    });\n  }\n  /**\n   * @description Returns the wrapped metadata as a V9 object\n   */\n\n\n  get asV9() {\n    this._assertVersion(9);\n\n    return this._metadata.asV9;\n  }\n  /**\n   * @description Returns the wrapped values as a V10 object\n   */\n\n\n  get asV10() {\n    return this._getVersion(10, toV10);\n  }\n  /**\n   * @description Returns the wrapped values as a V11 object\n   */\n\n\n  get asV11() {\n    return this._getVersion(11, toV11);\n  }\n  /**\n   * @description Returns the wrapped values as a V12 object\n   */\n\n\n  get asV12() {\n    return this._getVersion(12, toV12);\n  }\n  /**\n   * @description Returns the wrapped values as a latest version object\n   */\n\n\n  get asLatest() {\n    // This is non-existent & latest - applied here to do the module-specific type conversions\n    return this._getVersion(13, toLatest);\n  }\n  /**\n   * @description\n   */\n\n\n  get magicNumber() {\n    return this.get('magicNumber');\n  }\n  /**\n   * @description the metadata wrapped\n   */\n\n\n  get _metadata() {\n    return this.get('metadata');\n  }\n  /**\n   * @description the metadata version this structure represents\n   */\n\n\n  get version() {\n    return this._metadata.index;\n  }\n\n  getUniqTypes(throwError) {\n    return getUniqTypes(this.registry, this.asLatest, throwError);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}