{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\nexport function referendumsFinished(instanceId, api) {\n  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => api.query.democracy.referendumInfoOf.multi(ids)), map(infos => infos.filter(optInfo => optInfo.isSome).map(optInfo => optInfo.unwrap()).filter(info => info.isFinished).map(info => info.asFinished))));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/democracy/referendumsFinished.mjs"],"names":["map","switchMap","memo","referendumsFinished","instanceId","api","derive","democracy","referendumIds","pipe","ids","query","referendumInfoOf","multi","infos","filter","optInfo","isSome","unwrap","info","isFinished","asFinished"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,SAAd,QAA+B,4BAA/B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAO,SAASC,mBAAT,CAA6BC,UAA7B,EAAyCC,GAAzC,EAA8C;AACnD,SAAOH,IAAI,CAACE,UAAD,EAAa,MAAMC,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBC,aAArB,GAAqCC,IAArC,CAA0CR,SAAS,CAACS,GAAG,IAAIL,GAAG,CAACM,KAAJ,CAAUJ,SAAV,CAAoBK,gBAApB,CAAqCC,KAArC,CAA2CH,GAA3C,CAAR,CAAnD,EAA6GV,GAAG,CAACc,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACC,MAAhC,EAAwCjB,GAAxC,CAA4CgB,OAAO,IAAIA,OAAO,CAACE,MAAR,EAAvD,EAAyEH,MAAzE,CAAgFI,IAAI,IAAIA,IAAI,CAACC,UAA7F,EAAyGpB,GAAzG,CAA6GmB,IAAI,IAAIA,IAAI,CAACE,UAA1H,CAAV,CAAhH,CAAnB,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\nexport function referendumsFinished(instanceId, api) {\n  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => api.query.democracy.referendumInfoOf.multi(ids)), map(infos => infos.filter(optInfo => optInfo.isSome).map(optInfo => optInfo.unwrap()).filter(info => info.isFinished).map(info => info.asFinished))));\n}"]},"metadata":{},"sourceType":"module"}