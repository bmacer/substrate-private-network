{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { bip39ToSeed, isReady } from '@polkadot/wasm-crypto';\nimport { mnemonicToSeedSync } from \"./bip39.mjs\";\nimport { mnemonicValidate } from \"./validate.mjs\";\n/**\n * @name toSeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToBip39, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToBip39(mnemonic)}`); => u8a\n * }\n * ```\n */\n\nexport function mnemonicToLegacySeed(mnemonic, password = '', onlyJs = false) {\n  assert(mnemonicValidate(mnemonic), 'Invalid bip39 mnemonic specified');\n  return isReady() && !onlyJs ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32);\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.mjs"],"names":["assert","bip39ToSeed","isReady","mnemonicToSeedSync","mnemonicValidate","mnemonicToLegacySeed","mnemonic","password","onlyJs","subarray"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,uBAArC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,QAAQ,GAAG,EAAnD,EAAuDC,MAAM,GAAG,KAAhE,EAAuE;AAC5ER,EAAAA,MAAM,CAACI,gBAAgB,CAACE,QAAD,CAAjB,EAA6B,kCAA7B,CAAN;AACA,SAAOJ,OAAO,MAAM,CAACM,MAAd,GAAuBP,WAAW,CAACK,QAAD,EAAWC,QAAX,CAAlC,GAAyDJ,kBAAkB,CAACG,QAAD,EAAWC,QAAX,CAAlB,CAAuCE,QAAvC,CAAgD,CAAhD,EAAmD,EAAnD,CAAhE;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { bip39ToSeed, isReady } from '@polkadot/wasm-crypto';\nimport { mnemonicToSeedSync } from \"./bip39.mjs\";\nimport { mnemonicValidate } from \"./validate.mjs\";\n/**\n * @name toSeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToBip39, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToBip39(mnemonic)}`); => u8a\n * }\n * ```\n */\n\nexport function mnemonicToLegacySeed(mnemonic, password = '', onlyJs = false) {\n  assert(mnemonicValidate(mnemonic), 'Invalid bip39 mnemonic specified');\n  return isReady() && !onlyJs ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32);\n}"]},"metadata":{},"sourceType":"module"}