{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { deriveCache, memo } from \"../util/index.mjs\";\nconst CACHE_KEY = 'eraSlashes';\n\nfunction mapSlashes(era, noms, vals) {\n  const nominators = {};\n  const validators = {};\n  noms.forEach(([key, optBalance]) => {\n    nominators[key.args[1].toString()] = optBalance.unwrap();\n  });\n  vals.forEach(([key, optRes]) => {\n    validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];\n  });\n  return {\n    era,\n    nominators,\n    validators\n  };\n}\n\nexport function _eraSlashes(instanceId, api) {\n  return memo(instanceId, (era, withActive) => {\n    const cacheKey = `${CACHE_KEY}-${era.toString()}`;\n    const cached = withActive ? undefined : deriveCache.get(cacheKey);\n    return cached ? of(cached) : combineLatest([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe(map(([noms, vals]) => {\n      const value = mapSlashes(era, noms, vals);\n      !withActive && deriveCache.set(cacheKey, value);\n      return value;\n    }));\n  });\n}\nexport function eraSlashes(instanceId, api) {\n  return memo(instanceId, era => api.derive.staking._eraSlashes(era, true));\n}\nexport function _erasSlashes(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => eras.length ? combineLatest(eras.map(era => api.derive.staking._eraSlashes(era, withActive))) : of([]));\n}\nexport function erasSlashes(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasSlashes(eras, withActive))));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/erasSlashes.mjs"],"names":["combineLatest","of","map","switchMap","deriveCache","memo","CACHE_KEY","mapSlashes","era","noms","vals","nominators","validators","forEach","key","optBalance","args","toString","unwrap","optRes","unwrapOrDefault","_eraSlashes","instanceId","api","withActive","cacheKey","cached","undefined","get","query","staking","nominatorSlashInEra","entries","validatorSlashInEra","pipe","value","set","eraSlashes","derive","_erasSlashes","eras","length","erasSlashes","erasHistoric"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { deriveCache, memo } from \"../util/index.mjs\";\nconst CACHE_KEY = 'eraSlashes';\n\nfunction mapSlashes(era, noms, vals) {\n  const nominators = {};\n  const validators = {};\n  noms.forEach(([key, optBalance]) => {\n    nominators[key.args[1].toString()] = optBalance.unwrap();\n  });\n  vals.forEach(([key, optRes]) => {\n    validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];\n  });\n  return {\n    era,\n    nominators,\n    validators\n  };\n}\n\nexport function _eraSlashes(instanceId, api) {\n  return memo(instanceId, (era, withActive) => {\n    const cacheKey = `${CACHE_KEY}-${era.toString()}`;\n    const cached = withActive ? undefined : deriveCache.get(cacheKey);\n    return cached ? of(cached) : combineLatest([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe(map(([noms, vals]) => {\n      const value = mapSlashes(era, noms, vals);\n      !withActive && deriveCache.set(cacheKey, value);\n      return value;\n    }));\n  });\n}\nexport function eraSlashes(instanceId, api) {\n  return memo(instanceId, era => api.derive.staking._eraSlashes(era, true));\n}\nexport function _erasSlashes(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => eras.length ? combineLatest(eras.map(era => api.derive.staking._eraSlashes(era, withActive))) : of([]));\n}\nexport function erasSlashes(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasSlashes(eras, withActive))));\n}"]},"metadata":{},"sourceType":"module"}