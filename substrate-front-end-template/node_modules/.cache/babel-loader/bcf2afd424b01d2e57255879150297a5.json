{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.mjs\";\nimport { isHex } from \"../is/hex.mjs\";\nimport { hexStripPrefix } from \"./stripPrefix.mjs\";\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToU8a } from '@polkadot/util';\n *\n * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])\n * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])\n * ```\n */\n\nexport function hexToU8a(_value, bitLength = -1) {\n  if (!_value) {\n    return new Uint8Array();\n  }\n\n  assert(isHex(_value), `Expected hex value to convert, found '${_value}'`);\n  const value = hexStripPrefix(_value);\n  const valLength = value.length / 2;\n  const bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);\n  const result = new Uint8Array(bufLength);\n  const offset = Math.max(0, bufLength - valLength);\n\n  for (let index = 0; index < bufLength; index++) {\n    result[index + offset] = parseInt(value.substr(index * 2, 2), 16);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util/hex/toU8a.mjs"],"names":["assert","isHex","hexStripPrefix","hexToU8a","_value","bitLength","Uint8Array","value","valLength","length","bufLength","Math","ceil","result","offset","max","index","parseInt","substr"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,SAAS,GAAG,CAAC,CAAvC,EAA0C;AAC/C,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,IAAIE,UAAJ,EAAP;AACD;;AAEDN,EAAAA,MAAM,CAACC,KAAK,CAACG,MAAD,CAAN,EAAiB,yCAAwCA,MAAO,GAAhE,CAAN;AACA,QAAMG,KAAK,GAAGL,cAAc,CAACE,MAAD,CAA5B;AACA,QAAMI,SAAS,GAAGD,KAAK,CAACE,MAAN,GAAe,CAAjC;AACA,QAAMC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUP,SAAS,KAAK,CAAC,CAAf,GAAmBG,SAAnB,GAA+BH,SAAS,GAAG,CAArD,CAAlB;AACA,QAAMQ,MAAM,GAAG,IAAIP,UAAJ,CAAeI,SAAf,CAAf;AACA,QAAMI,MAAM,GAAGH,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYL,SAAS,GAAGF,SAAxB,CAAf;;AAEA,OAAK,IAAIQ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,SAA5B,EAAuCM,KAAK,EAA5C,EAAgD;AAC9CH,IAAAA,MAAM,CAACG,KAAK,GAAGF,MAAT,CAAN,GAAyBG,QAAQ,CAACV,KAAK,CAACW,MAAN,CAAaF,KAAK,GAAG,CAArB,EAAwB,CAAxB,CAAD,EAA6B,EAA7B,CAAjC;AACD;;AAED,SAAOH,MAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.mjs\";\nimport { isHex } from \"../is/hex.mjs\";\nimport { hexStripPrefix } from \"./stripPrefix.mjs\";\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToU8a } from '@polkadot/util';\n *\n * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])\n * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])\n * ```\n */\n\nexport function hexToU8a(_value, bitLength = -1) {\n  if (!_value) {\n    return new Uint8Array();\n  }\n\n  assert(isHex(_value), `Expected hex value to convert, found '${_value}'`);\n  const value = hexStripPrefix(_value);\n  const valLength = value.length / 2;\n  const bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);\n  const result = new Uint8Array(bufLength);\n  const offset = Math.max(0, bufLength - valLength);\n\n  for (let index = 0; index < bufLength; index++) {\n    result[index + offset] = parseInt(value.substr(index * 2, 2), 16);\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}