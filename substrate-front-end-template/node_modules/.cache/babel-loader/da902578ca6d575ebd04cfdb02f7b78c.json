{"ast":null,"code":"// Copyright 2017-2021 @polkadot/ui-keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { BehaviorSubject } from '@polkadot/x-rxjs';\nimport { obervableAll } from \"../observable/index.mjs\";\nlet hasCalledInitOptions = false;\n\nconst sortByName = (a, b) => {\n  const valueA = a.option.name;\n  const valueB = b.option.name;\n  return valueA.localeCompare(valueB);\n};\n\nconst sortByCreated = (a, b) => {\n  const valueA = a.json.meta.whenCreated || 0;\n  const valueB = b.json.meta.whenCreated || 0;\n\n  if (valueA < valueB) {\n    return 1;\n  }\n\n  if (valueA > valueB) {\n    return -1;\n  }\n\n  return 0;\n};\n\nexport class KeyringOption {\n  constructor() {\n    this.optionsSubject = new BehaviorSubject(this.emptyOptions());\n  }\n\n  createOptionHeader(name) {\n    return {\n      key: `header-${name.toLowerCase()}`,\n      name,\n      value: null\n    };\n  }\n\n  init(keyring) {\n    assert(!hasCalledInitOptions, 'Unable to initialise options more than once');\n    obervableAll.subscribe(() => {\n      const opts = this.emptyOptions();\n      this.addAccounts(keyring, opts);\n      this.addAddresses(keyring, opts);\n      this.addContracts(keyring, opts);\n      opts.address = this.linkItems({\n        Addresses: opts.address,\n        Recent: opts.recent\n      });\n      opts.account = this.linkItems({\n        Accounts: opts.account,\n        Development: opts.testing\n      });\n      opts.contract = this.linkItems({\n        Contracts: opts.contract\n      });\n      opts.all = [].concat(opts.account, opts.address);\n      opts.allPlus = [].concat(opts.account, opts.address, opts.contract);\n      this.optionsSubject.next(opts);\n    });\n    hasCalledInitOptions = true;\n  }\n\n  linkItems(items) {\n    return Object.keys(items).reduce((result, header) => {\n      const options = items[header];\n      return result.concat(options.length ? [this.createOptionHeader(header)] : [], options);\n    }, []);\n  }\n\n  addAccounts(keyring, options) {\n    const available = keyring.accounts.subject.getValue();\n    Object.values(available).sort(sortByName).forEach(({\n      json: {\n        meta: {\n          isTesting = false\n        }\n      },\n      option\n    }) => {\n      if (!isTesting) {\n        options.account.push(option);\n      } else {\n        options.testing.push(option);\n      }\n    });\n  }\n\n  addAddresses(keyring, options) {\n    const available = keyring.addresses.subject.getValue();\n    Object.values(available).filter(({\n      json\n    }) => !!json.meta.isRecent).sort(sortByCreated).forEach(({\n      option\n    }) => {\n      options.recent.push(option);\n    });\n    Object.values(available).filter(({\n      json\n    }) => !json.meta.isRecent).sort(sortByName).forEach(({\n      option\n    }) => {\n      options.address.push(option);\n    });\n  }\n\n  addContracts(keyring, options) {\n    const available = keyring.contracts.subject.getValue();\n    Object.values(available).sort(sortByName).forEach(({\n      option\n    }) => {\n      options.contract.push(option);\n    });\n  }\n\n  emptyOptions() {\n    return {\n      account: [],\n      address: [],\n      all: [],\n      allPlus: [],\n      contract: [],\n      recent: [],\n      testing: []\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/ui-keyring/options/index.mjs"],"names":["assert","BehaviorSubject","obervableAll","hasCalledInitOptions","sortByName","a","b","valueA","option","name","valueB","localeCompare","sortByCreated","json","meta","whenCreated","KeyringOption","constructor","optionsSubject","emptyOptions","createOptionHeader","key","toLowerCase","value","init","keyring","subscribe","opts","addAccounts","addAddresses","addContracts","address","linkItems","Addresses","Recent","recent","account","Accounts","Development","testing","contract","Contracts","all","concat","allPlus","next","items","Object","keys","reduce","result","header","options","length","available","accounts","subject","getValue","values","sort","forEach","isTesting","push","addresses","filter","isRecent","contracts"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/ui-keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { BehaviorSubject } from '@polkadot/x-rxjs';\nimport { obervableAll } from \"../observable/index.mjs\";\nlet hasCalledInitOptions = false;\n\nconst sortByName = (a, b) => {\n  const valueA = a.option.name;\n  const valueB = b.option.name;\n  return valueA.localeCompare(valueB);\n};\n\nconst sortByCreated = (a, b) => {\n  const valueA = a.json.meta.whenCreated || 0;\n  const valueB = b.json.meta.whenCreated || 0;\n\n  if (valueA < valueB) {\n    return 1;\n  }\n\n  if (valueA > valueB) {\n    return -1;\n  }\n\n  return 0;\n};\n\nexport class KeyringOption {\n  constructor() {\n    this.optionsSubject = new BehaviorSubject(this.emptyOptions());\n  }\n\n  createOptionHeader(name) {\n    return {\n      key: `header-${name.toLowerCase()}`,\n      name,\n      value: null\n    };\n  }\n\n  init(keyring) {\n    assert(!hasCalledInitOptions, 'Unable to initialise options more than once');\n    obervableAll.subscribe(() => {\n      const opts = this.emptyOptions();\n      this.addAccounts(keyring, opts);\n      this.addAddresses(keyring, opts);\n      this.addContracts(keyring, opts);\n      opts.address = this.linkItems({\n        Addresses: opts.address,\n        Recent: opts.recent\n      });\n      opts.account = this.linkItems({\n        Accounts: opts.account,\n        Development: opts.testing\n      });\n      opts.contract = this.linkItems({\n        Contracts: opts.contract\n      });\n      opts.all = [].concat(opts.account, opts.address);\n      opts.allPlus = [].concat(opts.account, opts.address, opts.contract);\n      this.optionsSubject.next(opts);\n    });\n    hasCalledInitOptions = true;\n  }\n\n  linkItems(items) {\n    return Object.keys(items).reduce((result, header) => {\n      const options = items[header];\n      return result.concat(options.length ? [this.createOptionHeader(header)] : [], options);\n    }, []);\n  }\n\n  addAccounts(keyring, options) {\n    const available = keyring.accounts.subject.getValue();\n    Object.values(available).sort(sortByName).forEach(({\n      json: {\n        meta: {\n          isTesting = false\n        }\n      },\n      option\n    }) => {\n      if (!isTesting) {\n        options.account.push(option);\n      } else {\n        options.testing.push(option);\n      }\n    });\n  }\n\n  addAddresses(keyring, options) {\n    const available = keyring.addresses.subject.getValue();\n    Object.values(available).filter(({\n      json\n    }) => !!json.meta.isRecent).sort(sortByCreated).forEach(({\n      option\n    }) => {\n      options.recent.push(option);\n    });\n    Object.values(available).filter(({\n      json\n    }) => !json.meta.isRecent).sort(sortByName).forEach(({\n      option\n    }) => {\n      options.address.push(option);\n    });\n  }\n\n  addContracts(keyring, options) {\n    const available = keyring.contracts.subject.getValue();\n    Object.values(available).sort(sortByName).forEach(({\n      option\n    }) => {\n      options.contract.push(option);\n    });\n  }\n\n  emptyOptions() {\n    return {\n      account: [],\n      address: [],\n      all: [],\n      allPlus: [],\n      contract: [],\n      recent: [],\n      testing: []\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}