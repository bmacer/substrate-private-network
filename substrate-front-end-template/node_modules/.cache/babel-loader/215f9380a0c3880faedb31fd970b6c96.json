{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactToU8a, isU8a, u8aConcat } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.mjs\";\nimport { typeToConstructor } from \"./utils/index.mjs\";\nimport { Vec } from \"./Vec.mjs\";\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\nexport class VecFixed extends AbstractArray {\n  constructor(registry, Type, length, value = []) {\n    const Clazz = typeToConstructor(registry, Type);\n    super(registry, ...VecFixed.decodeVecFixed(registry, Clazz, length, value));\n    this._Type = void 0;\n    this._Type = Clazz;\n  }\n  /** @internal */\n\n\n  static decodeVecFixed(registry, Type, allocLength, value) {\n    const values = Vec.decodeVec(registry, Type, isU8a(value) ? u8aConcat(compactToU8a(allocLength), value) : value);\n\n    while (values.length < allocLength) {\n      values.push(new Type(registry));\n    }\n\n    assert(values.length === allocLength, `Expected a length of exactly ${allocLength} entries`);\n    return values;\n  }\n\n  static with(Type, length) {\n    return class extends VecFixed {\n      constructor(registry, value) {\n        super(registry, Type, length, value);\n      }\n\n    };\n  }\n  /**\n   * @description The type for the items\n   */\n\n\n  get Type() {\n    return new this._Type(this.registry).toRawType();\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n\n  toU8a() {\n    // we override, we don't add the length prefix for ourselves, and at the same time we\n    // ignore isBare on entries, since they should be properly encoded at all times\n    const encoded = this.map(entry => entry.toU8a());\n    return encoded.length ? u8aConcat(...encoded) : new Uint8Array([]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[${this.Type};${this.length}]`;\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/codec/VecFixed.mjs"],"names":["assert","compactToU8a","isU8a","u8aConcat","AbstractArray","typeToConstructor","Vec","VecFixed","constructor","registry","Type","length","value","Clazz","decodeVecFixed","_Type","allocLength","values","decodeVec","push","with","toRawType","encodedLength","toU8a","encoded","map","entry","Uint8Array"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,YAAjB,EAA+BC,KAA/B,EAAsCC,SAAtC,QAAuD,gBAAvD;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,GAAT,QAAoB,WAApB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAN,SAAuBH,aAAvB,CAAqC;AAC1CI,EAAAA,WAAW,CAACC,QAAD,EAAWC,IAAX,EAAiBC,MAAjB,EAAyBC,KAAK,GAAG,EAAjC,EAAqC;AAC9C,UAAMC,KAAK,GAAGR,iBAAiB,CAACI,QAAD,EAAWC,IAAX,CAA/B;AACA,UAAMD,QAAN,EAAgB,GAAGF,QAAQ,CAACO,cAAT,CAAwBL,QAAxB,EAAkCI,KAAlC,EAAyCF,MAAzC,EAAiDC,KAAjD,CAAnB;AACA,SAAKG,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKA,KAAL,GAAaF,KAAb;AACD;AACD;;;AAGqB,SAAdC,cAAc,CAACL,QAAD,EAAWC,IAAX,EAAiBM,WAAjB,EAA8BJ,KAA9B,EAAqC;AACxD,UAAMK,MAAM,GAAGX,GAAG,CAACY,SAAJ,CAAcT,QAAd,EAAwBC,IAAxB,EAA8BR,KAAK,CAACU,KAAD,CAAL,GAAeT,SAAS,CAACF,YAAY,CAACe,WAAD,CAAb,EAA4BJ,KAA5B,CAAxB,GAA6DA,KAA3F,CAAf;;AAEA,WAAOK,MAAM,CAACN,MAAP,GAAgBK,WAAvB,EAAoC;AAClCC,MAAAA,MAAM,CAACE,IAAP,CAAY,IAAIT,IAAJ,CAASD,QAAT,CAAZ;AACD;;AAEDT,IAAAA,MAAM,CAACiB,MAAM,CAACN,MAAP,KAAkBK,WAAnB,EAAiC,gCAA+BA,WAAY,UAA5E,CAAN;AACA,WAAOC,MAAP;AACD;;AAEU,SAAJG,IAAI,CAACV,IAAD,EAAOC,MAAP,EAAe;AACxB,WAAO,cAAcJ,QAAd,CAAuB;AAC5BC,MAAAA,WAAW,CAACC,QAAD,EAAWG,KAAX,EAAkB;AAC3B,cAAMH,QAAN,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,KAA9B;AACD;;AAH2B,KAA9B;AAMD;AACD;AACF;AACA;;;AAGU,MAAJF,IAAI,GAAG;AACT,WAAO,IAAI,KAAKK,KAAT,CAAe,KAAKN,QAApB,EAA8BY,SAA9B,EAAP;AACD;AACD;AACF;AACA;;;AAGmB,MAAbC,aAAa,GAAG;AAClB,WAAO,KAAKC,KAAL,GAAaZ,MAApB;AACD;;AAEDY,EAAAA,KAAK,GAAG;AACN;AACA;AACA,UAAMC,OAAO,GAAG,KAAKC,GAAL,CAASC,KAAK,IAAIA,KAAK,CAACH,KAAN,EAAlB,CAAhB;AACA,WAAOC,OAAO,CAACb,MAAR,GAAiBR,SAAS,CAAC,GAAGqB,OAAJ,CAA1B,GAAyC,IAAIG,UAAJ,CAAe,EAAf,CAAhD;AACD;AACD;AACF;AACA;;;AAGEN,EAAAA,SAAS,GAAG;AACV,WAAQ,IAAG,KAAKX,IAAK,IAAG,KAAKC,MAAO,GAApC;AACD;;AA3DyC","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactToU8a, isU8a, u8aConcat } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.mjs\";\nimport { typeToConstructor } from \"./utils/index.mjs\";\nimport { Vec } from \"./Vec.mjs\";\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\nexport class VecFixed extends AbstractArray {\n  constructor(registry, Type, length, value = []) {\n    const Clazz = typeToConstructor(registry, Type);\n    super(registry, ...VecFixed.decodeVecFixed(registry, Clazz, length, value));\n    this._Type = void 0;\n    this._Type = Clazz;\n  }\n  /** @internal */\n\n\n  static decodeVecFixed(registry, Type, allocLength, value) {\n    const values = Vec.decodeVec(registry, Type, isU8a(value) ? u8aConcat(compactToU8a(allocLength), value) : value);\n\n    while (values.length < allocLength) {\n      values.push(new Type(registry));\n    }\n\n    assert(values.length === allocLength, `Expected a length of exactly ${allocLength} entries`);\n    return values;\n  }\n\n  static with(Type, length) {\n    return class extends VecFixed {\n      constructor(registry, value) {\n        super(registry, Type, length, value);\n      }\n\n    };\n  }\n  /**\n   * @description The type for the items\n   */\n\n\n  get Type() {\n    return new this._Type(this.registry).toRawType();\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n\n  toU8a() {\n    // we override, we don't add the length prefix for ourselves, and at the same time we\n    // ignore isBare on entries, since they should be properly encoded at all times\n    const encoded = this.map(entry => entry.toU8a());\n    return encoded.length ? u8aConcat(...encoded) : new Uint8Array([]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[${this.Type};${this.length}]`;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}