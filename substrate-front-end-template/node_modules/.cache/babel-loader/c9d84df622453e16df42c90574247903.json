{"ast":null,"code":"var _jsxFileName = \"/Users/bmacer/substrate-node-template/substrate-front-end-template/src/Interactor.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst argIsOptional = arg => arg.type.toString().startsWith('Option<');\n\nfunction Main(props) {\n  _s();\n\n  const {\n    api,\n    jsonrpc\n  } = useSubstrate();\n  const {\n    accountPair\n  } = props;\n  const [status, setStatus] = useState(null);\n  const [interxType, setInterxType] = useState('EXTRINSIC');\n  const [palletRPCs, setPalletRPCs] = useState([]);\n  const [callables, setCallables] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n  const [formState, setFormState] = useState(initFormState);\n  const {\n    palletRpc,\n    callable,\n    inputParams\n  } = formState;\n\n  const getApiType = (api, interxType) => {\n    if (interxType === 'QUERY') {\n      return api.query;\n    } else if (interxType === 'EXTRINSIC') {\n      return api.tx;\n    } else if (interxType === 'RPC') {\n      return api.rpc;\n    } else {\n      return api.consts;\n    }\n  };\n\n  const updatePalletRPCs = () => {\n    if (!api) {\n      return;\n    }\n\n    const apiType = getApiType(api, interxType);\n    const palletRPCs = Object.keys(apiType).sort().filter(pr => Object.keys(apiType[pr]).length > 0).map(pr => ({\n      key: pr,\n      value: pr,\n      text: pr\n    }));\n    setPalletRPCs(palletRPCs);\n  };\n\n  const updateCallables = () => {\n    if (!api || palletRpc === '') {\n      return;\n    }\n\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort().map(c => ({\n      key: c,\n      value: c,\n      text: c\n    }));\n    setCallables(callables);\n  };\n\n  const updateParamFields = () => {\n    if (!api || palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      const metaType = api.query[palletRpc][callable].meta.type;\n\n      if (metaType.isPlain) {// Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString(),\n          optional: false\n        }];\n      } else if (metaType.isDoubleMap) {\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString(),\n          optional: false\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString(),\n          optional: false\n        }];\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString(),\n          optional: argIsOptional(arg)\n        }));\n      }\n    } else if (interxType === 'RPC') {\n      let metaParam = [];\n\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\n        metaParam = jsonrpc[palletRpc][callable].params;\n      }\n\n      if (metaParam.length > 0) {\n        paramFields = metaParam.map(arg => ({\n          name: arg.name,\n          type: arg.type,\n          optional: arg.isOptional || false\n        }));\n      }\n    } else if (interxType === 'CONSTANT') {\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updatePalletRPCs, [api, interxType]);\n  useEffect(updateCallables, [api, interxType, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable, jsonrpc]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const {\n        state,\n        value\n      } = data;\n\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const {\n          ind,\n          paramField: {\n            type\n          }\n        } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = {\n          type,\n          value\n        };\n        res = { ...formState,\n          inputParams\n        };\n      } else if (state === 'palletRpc') {\n        res = { ...formState,\n          [state]: value,\n          callable: '',\n          inputParams: []\n        };\n      } else if (state === 'callable') {\n        res = { ...formState,\n          [state]: value,\n          inputParams: []\n        };\n      }\n\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value); // clear the formState\n\n    setFormState(initFormState);\n  };\n\n  const getOptionalMsg = interxType => interxType === 'RPC' ? 'Optional Parameter' : 'Leaving this field as blank will submit a NONE value';\n\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    width: 8,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pallet Interactor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        style: {\n          overflowX: 'auto'\n        },\n        inline: true,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Interaction Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Radio, {\n          label: \"Extrinsic\",\n          name: \"interxType\",\n          value: \"EXTRINSIC\",\n          checked: interxType === 'EXTRINSIC',\n          onChange: onInterxTypeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Radio, {\n          label: \"Query\",\n          name: \"interxType\",\n          value: \"QUERY\",\n          checked: interxType === 'QUERY',\n          onChange: onInterxTypeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Radio, {\n          label: \"RPC\",\n          name: \"interxType\",\n          value: \"RPC\",\n          checked: interxType === 'RPC',\n          onChange: onInterxTypeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Radio, {\n          label: \"Constant\",\n          name: \"interxType\",\n          value: \"CONSTANT\",\n          checked: interxType === 'CONSTANT',\n          onChange: onInterxTypeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Pallets / RPC\",\n          fluid: true,\n          label: \"Pallet / RPC\",\n          onChange: onPalletCallableParamChange,\n          search: true,\n          selection: true,\n          state: \"palletRpc\",\n          value: palletRpc,\n          options: palletRPCs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Callables\",\n          fluid: true,\n          label: \"Callable\",\n          onChange: onPalletCallableParamChange,\n          search: true,\n          selection: true,\n          state: \"callable\",\n          value: callable,\n          options: callables\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), paramFields.map((paramField, ind) => /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: paramField.type,\n          fluid: true,\n          type: \"text\",\n          label: paramField.name,\n          state: {\n            ind,\n            paramField\n          },\n          value: inputParams[ind] ? inputParams[ind].value : '',\n          onChange: onPalletCallableParamChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), paramField.optional ? /*#__PURE__*/_jsxDEV(Label, {\n          basic: true,\n          pointing: true,\n          color: \"teal\",\n          content: getOptionalMsg(interxType)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, this) : null]\n      }, `${paramField.name}-${paramField.type}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Form.Field, {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(InteractorSubmit, {\n          accountPair: accountPair,\n          setStatus: setStatus,\n          attrs: {\n            interxType,\n            palletRpc,\n            callable,\n            inputParams,\n            paramFields\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          overflowWrap: 'break-word'\n        },\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"se0a8jV3UMeNPMQDbkFSTtmlkLg=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Main;\n\nfunction InteractorSubmit(props) {\n  const {\n    attrs: {\n      interxType\n    }\n  } = props;\n\n  if (interxType === 'QUERY') {\n    return /*#__PURE__*/_jsxDEV(TxButton, {\n      label: \"Query\",\n      type: \"QUERY\",\n      color: \"blue\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 12\n    }, this);\n  } else if (interxType === 'EXTRINSIC') {\n    return /*#__PURE__*/_jsxDEV(TxGroupButton, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 12\n    }, this);\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return /*#__PURE__*/_jsxDEV(TxButton, {\n      label: \"Submit\",\n      type: interxType,\n      color: \"blue\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_c2 = InteractorSubmit;\nexport default function Interactor(props) {\n  _s2();\n\n  const {\n    api\n  } = useSubstrate();\n  return api.tx ? /*#__PURE__*/_jsxDEV(Main, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 19\n  }, this) : null;\n}\n\n_s2(Interactor, \"a5IVjGvlzdb5yuE5zCYn+JGZcoo=\", false, function () {\n  return [useSubstrate];\n});\n\n_c3 = Interactor;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"InteractorSubmit\");\n$RefreshReg$(_c3, \"Interactor\");","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/src/Interactor.js"],"names":["React","useEffect","useState","Grid","Form","Dropdown","Input","Label","useSubstrate","TxButton","TxGroupButton","argIsOptional","arg","type","toString","startsWith","Main","props","api","jsonrpc","accountPair","status","setStatus","interxType","setInterxType","palletRPCs","setPalletRPCs","callables","setCallables","paramFields","setParamFields","initFormState","palletRpc","callable","inputParams","formState","setFormState","getApiType","query","tx","rpc","consts","updatePalletRPCs","apiType","Object","keys","sort","filter","pr","length","map","key","value","text","updateCallables","c","updateParamFields","metaType","meta","isPlain","isMap","name","asMap","optional","isDoubleMap","asDoubleMap","key1","key2","metaArgs","args","metaParam","params","isOptional","onPalletCallableParamChange","_","data","res","state","ind","paramField","onInterxTypeChange","ev","getOptionalMsg","overflowX","textAlign","overflowWrap","InteractorSubmit","attrs","Interactor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\n\nconst argIsOptional = (arg) =>\n  arg.type.toString().startsWith('Option<');\n\nfunction Main (props) {\n  const { api, jsonrpc } = useSubstrate();\n  const { accountPair } = props;\n  const [status, setStatus] = useState(null);\n\n  const [interxType, setInterxType] = useState('EXTRINSIC');\n  const [palletRPCs, setPalletRPCs] = useState([]);\n  const [callables, setCallables] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n\n  const [formState, setFormState] = useState(initFormState);\n  const { palletRpc, callable, inputParams } = formState;\n\n  const getApiType = (api, interxType) => {\n    if (interxType === 'QUERY') {\n      return api.query;\n    } else if (interxType === 'EXTRINSIC') {\n      return api.tx;\n    } else if (interxType === 'RPC') {\n      return api.rpc;\n    } else {\n      return api.consts;\n    }\n  };\n\n  const updatePalletRPCs = () => {\n    if (!api) { return; }\n    const apiType = getApiType(api, interxType);\n    const palletRPCs = Object.keys(apiType).sort()\n      .filter(pr => Object.keys(apiType[pr]).length > 0)\n      .map(pr => ({ key: pr, value: pr, text: pr }));\n    setPalletRPCs(palletRPCs);\n  };\n\n  const updateCallables = () => {\n    if (!api || palletRpc === '') { return; }\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort()\n      .map(c => ({ key: c, value: c, text: c }));\n    setCallables(callables);\n  };\n\n  const updateParamFields = () => {\n    if (!api || palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      const metaType = api.query[palletRpc][callable].meta.type;\n      if (metaType.isPlain) {\n        // Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString(),\n          optional: false\n        }];\n      } else if (metaType.isDoubleMap) {\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString(),\n          optional: false\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString(),\n          optional: false\n        }];\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString(),\n          optional: argIsOptional(arg)\n        }));\n      }\n    } else if (interxType === 'RPC') {\n      let metaParam = [];\n\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\n        metaParam = jsonrpc[palletRpc][callable].params;\n      }\n\n      if (metaParam.length > 0) {\n        paramFields = metaParam.map(arg => ({\n          name: arg.name,\n          type: arg.type,\n          optional: arg.isOptional || false\n        }));\n      }\n    } else if (interxType === 'CONSTANT') {\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updatePalletRPCs, [api, interxType]);\n  useEffect(updateCallables, [api, interxType, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable, jsonrpc]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const { state, value } = data;\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const { ind, paramField: { type } } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = { type, value };\n        res = { ...formState, inputParams };\n      } else if (state === 'palletRpc') {\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\n      } else if (state === 'callable') {\n        res = { ...formState, [state]: value, inputParams: [] };\n      }\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value);\n    // clear the formState\n    setFormState(initFormState);\n  };\n\n  const getOptionalMsg = (interxType) =>\n    interxType === 'RPC'\n      ? 'Optional Parameter'\n      : 'Leaving this field as blank will submit a NONE value';\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Pallet Interactor</h1>\n      <Form>\n        <Form.Group style={{ overflowX: 'auto' }} inline>\n          <label>Interaction Type</label>\n          <Form.Radio\n            label='Extrinsic'\n            name='interxType'\n            value='EXTRINSIC'\n            checked={interxType === 'EXTRINSIC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Query'\n            name='interxType'\n            value='QUERY'\n            checked={interxType === 'QUERY'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='RPC'\n            name='interxType'\n            value='RPC'\n            checked={interxType === 'RPC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Constant'\n            name='interxType'\n            value='CONSTANT'\n            checked={interxType === 'CONSTANT'}\n            onChange={onInterxTypeChange}\n          />\n        </Form.Group>\n        <Form.Field>\n          <Dropdown\n            placeholder='Pallets / RPC'\n            fluid\n            label='Pallet / RPC'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='palletRpc'\n            value={palletRpc}\n            options={palletRPCs}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Callables'\n            fluid\n            label='Callable'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='callable'\n            value={callable}\n            options={callables}\n          />\n        </Form.Field>\n        {paramFields.map((paramField, ind) =>\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\n            <Input\n              placeholder={paramField.type}\n              fluid\n              type='text'\n              label={paramField.name}\n              state={{ ind, paramField }}\n              value={ inputParams[ind] ? inputParams[ind].value : '' }\n              onChange={onPalletCallableParamChange}\n            />\n            { paramField.optional\n              ? <Label\n                basic\n                pointing\n                color='teal'\n                content = { getOptionalMsg(interxType) }\n              />\n              : null\n            }\n          </Form.Field>\n        )}\n        <Form.Field style={{ textAlign: 'center' }}>\n          <InteractorSubmit\n            accountPair={accountPair}\n            setStatus={setStatus}\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction InteractorSubmit (props) {\n  const { attrs: { interxType } } = props;\n  if (interxType === 'QUERY') {\n    return <TxButton\n      label = 'Query'\n      type = 'QUERY'\n      color = 'blue'\n      {...props}\n    />;\n  } else if (interxType === 'EXTRINSIC') {\n    return <TxGroupButton {...props} />;\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return <TxButton\n      label = 'Submit'\n      type = {interxType}\n      color = 'blue'\n      {...props}\n    />;\n  }\n}\n\nexport default function Interactor (props) {\n  const { api } = useSubstrate();\n  return api.tx ? <Main {...props} /> : null;\n}\n"]},"metadata":{},"sourceType":"module"}