{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { u8aConcat } from '@polkadot/util';\nimport { Enum } from \"../../codec/Enum.mjs\";\nimport { Struct } from \"../../codec/Struct.mjs\";\nimport { EMPTY_U8A, IMMORTAL_ERA } from \"../constants.mjs\";\nimport { GenericExtrinsicPayloadV4 } from \"./ExtrinsicPayload.mjs\";\nconst FAKE_NONE = new Uint8Array();\nconst FAKE_SOME = new Uint8Array([1]);\n/**\n * @name GenericExtrinsicSignatureV4\n * @description\n * A container for the [[Signature]] associated with a specific [[Extrinsic]]\n */\n\nvar _fakePrefix = _classPrivateFieldLooseKey(\"fakePrefix\");\n\nexport class GenericExtrinsicSignatureV4 extends Struct {\n  constructor(registry, value, {\n    isSigned\n  } = {}) {\n    super(registry, _objectSpread({\n      signer: 'Address',\n      // eslint-disable-next-line sort-keys\n      signature: 'ExtrinsicSignature'\n    }, registry.getSignedExtensionTypes()), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));\n    Object.defineProperty(this, _fakePrefix, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _fakePrefix)[_fakePrefix] = registry.createType('ExtrinsicSignature') instanceof Enum ? FAKE_SOME : FAKE_NONE;\n  }\n  /** @internal */\n\n\n  static decodeExtrinsicSignature(value, isSigned = false) {\n    if (!value) {\n      return EMPTY_U8A;\n    } else if (value instanceof GenericExtrinsicSignatureV4) {\n      return value;\n    }\n\n    return isSigned ? value : EMPTY_U8A;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.isSigned ? super.encodedLength : 0;\n  }\n  /**\n   * @description `true` if the signature is valid\n   */\n\n\n  get isSigned() {\n    return !this.signature.isEmpty;\n  }\n  /**\n   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to\n   */\n\n\n  get era() {\n    return this.get('era');\n  }\n  /**\n   * @description The [[Index]] for the signature\n   */\n\n\n  get nonce() {\n    return this.get('nonce');\n  }\n  /**\n   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]\n   */\n\n\n  get signature() {\n    // the second case here is when we don't have an enum signature, treat as raw\n    return this.multiSignature.value || this.multiSignature;\n  }\n  /**\n   * @description The raw [[ExtrinsicSignature]]\n   */\n\n\n  get multiSignature() {\n    return this.get('signature');\n  }\n  /**\n   * @description The [[Address]] that signed\n   */\n\n\n  get signer() {\n    return this.get('signer');\n  }\n  /**\n   * @description The [[Balance]] tip\n   */\n\n\n  get tip() {\n    return this.get('tip');\n  }\n\n  _injectSignature(signer, signature, {\n    era,\n    nonce,\n    tip\n  }) {\n    this.set('era', era);\n    this.set('nonce', nonce);\n    this.set('signer', signer);\n    this.set('signature', signature);\n    this.set('tip', tip);\n    return this;\n  }\n  /**\n   * @description Adds a raw signature\n   */\n\n\n  addSignature(signer, signature, payload) {\n    return this._injectSignature(this.registry.createType('Address', signer), this.registry.createType('ExtrinsicSignature', signature), new GenericExtrinsicPayloadV4(this.registry, payload));\n  }\n  /**\n   * @description Creates a payload from the supplied options\n   */\n\n\n  createPayload(method, {\n    blockHash,\n    era,\n    genesisHash,\n    nonce,\n    runtimeVersion: {\n      specVersion,\n      transactionVersion\n    },\n    tip\n  }) {\n    return new GenericExtrinsicPayloadV4(this.registry, {\n      blockHash,\n      era: era || IMMORTAL_ERA,\n      genesisHash,\n      method: method.toHex(),\n      nonce,\n      specVersion,\n      tip: tip || 0,\n      transactionVersion: transactionVersion || 0\n    });\n  }\n  /**\n   * @description Generate a payload and applies the signature from a keypair\n   */\n\n\n  sign(method, account, options) {\n    const signer = this.registry.createType('Address', account.addressRaw);\n    const payload = this.createPayload(method, options);\n    const signature = this.registry.createType('ExtrinsicSignature', payload.sign(account));\n    return this._injectSignature(signer, signature, payload);\n  }\n  /**\n   * @description Generate a payload and applies a fake signature\n   */\n\n\n  signFake(method, address, options) {\n    const signer = this.registry.createType('Address', address);\n    const payload = this.createPayload(method, options);\n    const signature = this.registry.createType('ExtrinsicSignature', u8aConcat(_classPrivateFieldLooseBase(this, _fakePrefix)[_fakePrefix], new Uint8Array(64).fill(0x42)));\n    return this._injectSignature(signer, signature, payload);\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.mjs"],"names":["_defineProperty","_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","u8aConcat","Enum","Struct","EMPTY_U8A","IMMORTAL_ERA","GenericExtrinsicPayloadV4","FAKE_NONE","Uint8Array","FAKE_SOME","_fakePrefix","GenericExtrinsicSignatureV4","constructor","registry","value","isSigned","signer","signature","getSignedExtensionTypes","decodeExtrinsicSignature","writable","createType","encodedLength","isEmpty","era","get","nonce","multiSignature","tip","_injectSignature","set","addSignature","payload","createPayload","method","blockHash","genesisHash","runtimeVersion","specVersion","transactionVersion","toHex","sign","account","options","addressRaw","signFake","address","fill","toU8a","isBare"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,2BAAP,MAAwC,uDAAxC;AACA,OAAOC,0BAAP,MAAuC,sDAAvC;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIG,MAAM,CAACC,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAP,CAA6BJ,MAA7B,CAAd;AAAoD,QAAIC,cAAJ,EAAoBI,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOJ,MAAM,CAACK,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAV;AAA8GP,IAAAA,IAAI,CAACQ,IAAL,CAAUC,KAAV,CAAgBT,IAAhB,EAAsBG,OAAtB;AAAiC;;AAAC,SAAOH,IAAP;AAAc;;AAErV,SAASU,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEf,MAAAA,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAEvB,QAAAA,eAAe,CAACiB,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,OAAnG;AAAuG,KAApH,MAA0H,IAAIhB,MAAM,CAACiB,yBAAX,EAAsC;AAAEjB,MAAAA,MAAM,CAACkB,gBAAP,CAAwBR,MAAxB,EAAgCV,MAAM,CAACiB,yBAAP,CAAiCH,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAElB,MAAAA,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAEhB,QAAAA,MAAM,CAACmB,cAAP,CAAsBT,MAAtB,EAA8BM,GAA9B,EAAmChB,MAAM,CAACK,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAON,MAAP;AAAgB,C,CAEthB;AACA;;;AACA,SAASU,SAAT,QAA0B,gBAA1B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,kBAAxC;AACA,SAASC,yBAAT,QAA0C,wBAA1C;AACA,MAAMC,SAAS,GAAG,IAAIC,UAAJ,EAAlB;AACA,MAAMC,SAAS,GAAG,IAAID,UAAJ,CAAe,CAAC,CAAD,CAAf,CAAlB;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIE,WAAW,GAAGlC,0BAA0B,CAAC,YAAD,CAA5C;;AAEA,OAAO,MAAMmC,2BAAN,SAA0CR,MAA1C,CAAiD;AACtDS,EAAAA,WAAW,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAC3BC,IAAAA;AAD2B,MAEzB,EAFO,EAEH;AACN,UAAMF,QAAN,EAAgBvB,aAAa,CAAC;AAC5B0B,MAAAA,MAAM,EAAE,SADoB;AAE5B;AACAC,MAAAA,SAAS,EAAE;AAHiB,KAAD,EAI1BJ,QAAQ,CAACK,uBAAT,EAJ0B,CAA7B,EAIwCP,2BAA2B,CAACQ,wBAA5B,CAAqDL,KAArD,EAA4DC,QAA5D,CAJxC;AAKAlC,IAAAA,MAAM,CAACmB,cAAP,CAAsB,IAAtB,EAA4BU,WAA5B,EAAyC;AACvCU,MAAAA,QAAQ,EAAE,IAD6B;AAEvCN,MAAAA,KAAK,EAAE,KAAK;AAF2B,KAAzC;AAIAvC,IAAAA,2BAA2B,CAAC,IAAD,EAAOmC,WAAP,CAA3B,CAA+CA,WAA/C,IAA8DG,QAAQ,CAACQ,UAAT,CAAoB,oBAApB,aAAqDnB,IAArD,GAA4DO,SAA5D,GAAwEF,SAAtI;AACD;AACD;;;AAG+B,SAAxBY,wBAAwB,CAACL,KAAD,EAAQC,QAAQ,GAAG,KAAnB,EAA0B;AACvD,QAAI,CAACD,KAAL,EAAY;AACV,aAAOV,SAAP;AACD,KAFD,MAEO,IAAIU,KAAK,YAAYH,2BAArB,EAAkD;AACvD,aAAOG,KAAP;AACD;;AAED,WAAOC,QAAQ,GAAGD,KAAH,GAAWV,SAA1B;AACD;AACD;AACF;AACA;;;AAGmB,MAAbkB,aAAa,GAAG;AAClB,WAAO,KAAKP,QAAL,GAAgB,MAAMO,aAAtB,GAAsC,CAA7C;AACD;AACD;AACF;AACA;;;AAGc,MAARP,QAAQ,GAAG;AACb,WAAO,CAAC,KAAKE,SAAL,CAAeM,OAAvB;AACD;AACD;AACF;AACA;;;AAGS,MAAHC,GAAG,GAAG;AACR,WAAO,KAAKC,GAAL,CAAS,KAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGW,MAALC,KAAK,GAAG;AACV,WAAO,KAAKD,GAAL,CAAS,OAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGe,MAATR,SAAS,GAAG;AACd;AACA,WAAO,KAAKU,cAAL,CAAoBb,KAApB,IAA6B,KAAKa,cAAzC;AACD;AACD;AACF;AACA;;;AAGoB,MAAdA,cAAc,GAAG;AACnB,WAAO,KAAKF,GAAL,CAAS,WAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGY,MAANT,MAAM,GAAG;AACX,WAAO,KAAKS,GAAL,CAAS,QAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGS,MAAHG,GAAG,GAAG;AACR,WAAO,KAAKH,GAAL,CAAS,KAAT,CAAP;AACD;;AAEDI,EAAAA,gBAAgB,CAACb,MAAD,EAASC,SAAT,EAAoB;AAClCO,IAAAA,GADkC;AAElCE,IAAAA,KAFkC;AAGlCE,IAAAA;AAHkC,GAApB,EAIb;AACD,SAAKE,GAAL,CAAS,KAAT,EAAgBN,GAAhB;AACA,SAAKM,GAAL,CAAS,OAAT,EAAkBJ,KAAlB;AACA,SAAKI,GAAL,CAAS,QAAT,EAAmBd,MAAnB;AACA,SAAKc,GAAL,CAAS,WAAT,EAAsBb,SAAtB;AACA,SAAKa,GAAL,CAAS,KAAT,EAAgBF,GAAhB;AACA,WAAO,IAAP;AACD;AACD;AACF;AACA;;;AAGEG,EAAAA,YAAY,CAACf,MAAD,EAASC,SAAT,EAAoBe,OAApB,EAA6B;AACvC,WAAO,KAAKH,gBAAL,CAAsB,KAAKhB,QAAL,CAAcQ,UAAd,CAAyB,SAAzB,EAAoCL,MAApC,CAAtB,EAAmE,KAAKH,QAAL,CAAcQ,UAAd,CAAyB,oBAAzB,EAA+CJ,SAA/C,CAAnE,EAA8H,IAAIX,yBAAJ,CAA8B,KAAKO,QAAnC,EAA6CmB,OAA7C,CAA9H,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,aAAa,CAACC,MAAD,EAAS;AACpBC,IAAAA,SADoB;AAEpBX,IAAAA,GAFoB;AAGpBY,IAAAA,WAHoB;AAIpBV,IAAAA,KAJoB;AAKpBW,IAAAA,cAAc,EAAE;AACdC,MAAAA,WADc;AAEdC,MAAAA;AAFc,KALI;AASpBX,IAAAA;AAToB,GAAT,EAUV;AACD,WAAO,IAAItB,yBAAJ,CAA8B,KAAKO,QAAnC,EAA6C;AAClDsB,MAAAA,SADkD;AAElDX,MAAAA,GAAG,EAAEA,GAAG,IAAInB,YAFsC;AAGlD+B,MAAAA,WAHkD;AAIlDF,MAAAA,MAAM,EAAEA,MAAM,CAACM,KAAP,EAJ0C;AAKlDd,MAAAA,KALkD;AAMlDY,MAAAA,WANkD;AAOlDV,MAAAA,GAAG,EAAEA,GAAG,IAAI,CAPsC;AAQlDW,MAAAA,kBAAkB,EAAEA,kBAAkB,IAAI;AARQ,KAA7C,CAAP;AAUD;AACD;AACF;AACA;;;AAGEE,EAAAA,IAAI,CAACP,MAAD,EAASQ,OAAT,EAAkBC,OAAlB,EAA2B;AAC7B,UAAM3B,MAAM,GAAG,KAAKH,QAAL,CAAcQ,UAAd,CAAyB,SAAzB,EAAoCqB,OAAO,CAACE,UAA5C,CAAf;AACA,UAAMZ,OAAO,GAAG,KAAKC,aAAL,CAAmBC,MAAnB,EAA2BS,OAA3B,CAAhB;AACA,UAAM1B,SAAS,GAAG,KAAKJ,QAAL,CAAcQ,UAAd,CAAyB,oBAAzB,EAA+CW,OAAO,CAACS,IAAR,CAAaC,OAAb,CAA/C,CAAlB;AACA,WAAO,KAAKb,gBAAL,CAAsBb,MAAtB,EAA8BC,SAA9B,EAAyCe,OAAzC,CAAP;AACD;AACD;AACF;AACA;;;AAGEa,EAAAA,QAAQ,CAACX,MAAD,EAASY,OAAT,EAAkBH,OAAlB,EAA2B;AACjC,UAAM3B,MAAM,GAAG,KAAKH,QAAL,CAAcQ,UAAd,CAAyB,SAAzB,EAAoCyB,OAApC,CAAf;AACA,UAAMd,OAAO,GAAG,KAAKC,aAAL,CAAmBC,MAAnB,EAA2BS,OAA3B,CAAhB;AACA,UAAM1B,SAAS,GAAG,KAAKJ,QAAL,CAAcQ,UAAd,CAAyB,oBAAzB,EAA+CpB,SAAS,CAAC1B,2BAA2B,CAAC,IAAD,EAAOmC,WAAP,CAA3B,CAA+CA,WAA/C,CAAD,EAA8D,IAAIF,UAAJ,CAAe,EAAf,EAAmBuC,IAAnB,CAAwB,IAAxB,CAA9D,CAAxD,CAAlB;AACA,WAAO,KAAKlB,gBAAL,CAAsBb,MAAtB,EAA8BC,SAA9B,EAAyCe,OAAzC,CAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEgB,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,WAAO,KAAKlC,QAAL,GAAgB,MAAMiC,KAAN,CAAYC,MAAZ,CAAhB,GAAsC7C,SAA7C;AACD;;AA1KqD","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aConcat } from '@polkadot/util';\nimport { Enum } from \"../../codec/Enum.mjs\";\nimport { Struct } from \"../../codec/Struct.mjs\";\nimport { EMPTY_U8A, IMMORTAL_ERA } from \"../constants.mjs\";\nimport { GenericExtrinsicPayloadV4 } from \"./ExtrinsicPayload.mjs\";\nconst FAKE_NONE = new Uint8Array();\nconst FAKE_SOME = new Uint8Array([1]);\n/**\n * @name GenericExtrinsicSignatureV4\n * @description\n * A container for the [[Signature]] associated with a specific [[Extrinsic]]\n */\n\nvar _fakePrefix = _classPrivateFieldLooseKey(\"fakePrefix\");\n\nexport class GenericExtrinsicSignatureV4 extends Struct {\n  constructor(registry, value, {\n    isSigned\n  } = {}) {\n    super(registry, _objectSpread({\n      signer: 'Address',\n      // eslint-disable-next-line sort-keys\n      signature: 'ExtrinsicSignature'\n    }, registry.getSignedExtensionTypes()), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));\n    Object.defineProperty(this, _fakePrefix, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _fakePrefix)[_fakePrefix] = registry.createType('ExtrinsicSignature') instanceof Enum ? FAKE_SOME : FAKE_NONE;\n  }\n  /** @internal */\n\n\n  static decodeExtrinsicSignature(value, isSigned = false) {\n    if (!value) {\n      return EMPTY_U8A;\n    } else if (value instanceof GenericExtrinsicSignatureV4) {\n      return value;\n    }\n\n    return isSigned ? value : EMPTY_U8A;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.isSigned ? super.encodedLength : 0;\n  }\n  /**\n   * @description `true` if the signature is valid\n   */\n\n\n  get isSigned() {\n    return !this.signature.isEmpty;\n  }\n  /**\n   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to\n   */\n\n\n  get era() {\n    return this.get('era');\n  }\n  /**\n   * @description The [[Index]] for the signature\n   */\n\n\n  get nonce() {\n    return this.get('nonce');\n  }\n  /**\n   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]\n   */\n\n\n  get signature() {\n    // the second case here is when we don't have an enum signature, treat as raw\n    return this.multiSignature.value || this.multiSignature;\n  }\n  /**\n   * @description The raw [[ExtrinsicSignature]]\n   */\n\n\n  get multiSignature() {\n    return this.get('signature');\n  }\n  /**\n   * @description The [[Address]] that signed\n   */\n\n\n  get signer() {\n    return this.get('signer');\n  }\n  /**\n   * @description The [[Balance]] tip\n   */\n\n\n  get tip() {\n    return this.get('tip');\n  }\n\n  _injectSignature(signer, signature, {\n    era,\n    nonce,\n    tip\n  }) {\n    this.set('era', era);\n    this.set('nonce', nonce);\n    this.set('signer', signer);\n    this.set('signature', signature);\n    this.set('tip', tip);\n    return this;\n  }\n  /**\n   * @description Adds a raw signature\n   */\n\n\n  addSignature(signer, signature, payload) {\n    return this._injectSignature(this.registry.createType('Address', signer), this.registry.createType('ExtrinsicSignature', signature), new GenericExtrinsicPayloadV4(this.registry, payload));\n  }\n  /**\n   * @description Creates a payload from the supplied options\n   */\n\n\n  createPayload(method, {\n    blockHash,\n    era,\n    genesisHash,\n    nonce,\n    runtimeVersion: {\n      specVersion,\n      transactionVersion\n    },\n    tip\n  }) {\n    return new GenericExtrinsicPayloadV4(this.registry, {\n      blockHash,\n      era: era || IMMORTAL_ERA,\n      genesisHash,\n      method: method.toHex(),\n      nonce,\n      specVersion,\n      tip: tip || 0,\n      transactionVersion: transactionVersion || 0\n    });\n  }\n  /**\n   * @description Generate a payload and applies the signature from a keypair\n   */\n\n\n  sign(method, account, options) {\n    const signer = this.registry.createType('Address', account.addressRaw);\n    const payload = this.createPayload(method, options);\n    const signature = this.registry.createType('ExtrinsicSignature', payload.sign(account));\n    return this._injectSignature(signer, signature, payload);\n  }\n  /**\n   * @description Generate a payload and applies a fake signature\n   */\n\n\n  signFake(method, address, options) {\n    const signer = this.registry.createType('Address', address);\n    const payload = this.createPayload(method, options);\n    const signature = this.registry.createType('ExtrinsicSignature', u8aConcat(_classPrivateFieldLooseBase(this, _fakePrefix)[_fakePrefix], new Uint8Array(64).fill(0x42)));\n    return this._injectSignature(signer, signature, payload);\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}