{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { hexToU8a, isBoolean, isFunction, isHex, isObject, isU8a, isUndefined, stringCamelCase, u8aConcat, u8aToHex } from '@polkadot/util';\nimport { compareMap, decodeU8a, mapToTypeMap } from \"./utils/index.mjs\";\n/** @internal */\n\nfunction decodeStructFromObject(registry, Types, value, jsonMap) {\n  let jsonObj;\n  return Object.keys(Types).reduce((raw, key, index) => {\n    // The key in the JSON can be snake_case (or other cases), but in our\n    // Types, result or any other maps, it's camelCase\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const jsonKey = jsonMap.get(key) && !value[key] ? jsonMap.get(key) : key;\n\n    try {\n      if (Array.isArray(value)) {\n        // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n        raw[key] = value[index] instanceof Types[key] ? value[index] : new Types[key](registry, value[index]);\n      } else if (value instanceof Map) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const mapped = value.get(jsonKey); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        raw[key] = mapped instanceof Types[key] ? mapped : new Types[key](registry, mapped);\n      } else if (isObject(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        let assign = value[jsonKey];\n\n        if (isUndefined(assign)) {\n          if (isUndefined(jsonObj)) {\n            jsonObj = Object.entries(value).reduce((all, [key, value]) => {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              all[stringCamelCase(key)] = value;\n              return all;\n            }, {});\n          } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n          assign = jsonObj[jsonKey];\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n\n\n        raw[key] = assign instanceof Types[key] ? assign : new Types[key](registry, assign);\n      } else {\n        throw new Error(`Cannot decode value ${JSON.stringify(value)}`);\n      }\n    } catch (error) {\n      let type = Types[key].name;\n\n      try {\n        type = new Types[key](registry).toRawType();\n      } catch (error) {// ignore\n      }\n\n      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);\n    }\n\n    return raw;\n  }, {});\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param Types - Types definition.\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`\n * are also keys in `Types`\n * - array with `[value1, value2]` assuming the array has the same length as\n * `Object.keys(Types)`\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeStruct(registry, Types, value, jsonMap) {\n  if (isHex(value)) {\n    return decodeStruct(registry, Types, hexToU8a(value), jsonMap);\n  } else if (isU8a(value)) {\n    const values = decodeU8a(registry, value, Object.values(Types)); // Transform array of values to {key: value} mapping\n\n    return Object.keys(Types).reduce((raw, key, index) => {\n      // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      raw[key] = values[index];\n      return raw;\n    }, {});\n  } else if (!value) {\n    return {};\n  } // We assume from here that value is a JS object (Array, Map, Object)\n\n\n  return decodeStructFromObject(registry, Types, value, jsonMap);\n}\n/**\n * @name Struct\n * @description\n * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes\n * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec\n * values in the constructor and it manages the decoding. It is important that the constructor\n * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,\n * it needs to decoded in the specific defined order.\n * @noInheritDoc\n */\n\n\nvar _jsonMap = _classPrivateFieldLooseKey(\"jsonMap\");\n\nvar _Types = _classPrivateFieldLooseKey(\"Types\");\n\nexport class Struct extends Map {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  constructor(registry, Types, value = {}, jsonMap = new Map()) {\n    super(Object.entries(decodeStruct(registry, mapToTypeMap(registry, Types), value, jsonMap)));\n    this.registry = void 0;\n    Object.defineProperty(this, _jsonMap, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _Types, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _jsonMap)[_jsonMap] = jsonMap;\n    _classPrivateFieldLooseBase(this, _Types)[_Types] = mapToTypeMap(registry, Types);\n  }\n\n  static with(Types, jsonMap) {\n    return class extends Struct {\n      constructor(registry, value) {\n        super(registry, Types, value, jsonMap);\n        Object.keys(Types).forEach(key => {\n          isUndefined(this[key]) && Object.defineProperty(this, key, {\n            enumerable: true,\n            get: () => this.get(key)\n          });\n        });\n      }\n\n    };\n  }\n\n  static typesToMap(registry, Types) {\n    return Object.entries(Types).reduce((result, [key, Type]) => {\n      result[key] = registry.getClassName(Type) || new Type(registry).toRawType();\n      return result;\n    }, {});\n  }\n  /**\n   * @description The available keys for this enum\n   */\n\n\n  get defKeys() {\n    return Object.keys(_classPrivateFieldLooseBase(this, _Types)[_Types]);\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    const items = this.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (!items[i].isEmpty) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * @description Returns the Type description to sthe structure\n   */\n\n\n  get Type() {\n    return Object.entries(_classPrivateFieldLooseBase(this, _Types)[_Types]).reduce((result, [key, Type]) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      result[key] = new Type(this.registry).toRawType();\n      return result;\n    }, {});\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toArray().reduce((length, entry) => {\n      length += entry.encodedLength;\n      return length;\n    }, 0);\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareMap(this, other);\n  }\n  /**\n   * @description Returns a specific names entry in the structure\n   * @param name The name of the entry to retrieve\n   */\n\n\n  get(name) {\n    return super.get(name);\n  }\n  /**\n   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)\n   */\n\n\n  getAtIndex(index) {\n    return this.toArray()[index];\n  }\n  /**\n   * @description Converts the Object to an standard JavaScript Array\n   */\n\n\n  toArray() {\n    return [...this.values()];\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return [...this.keys()].reduce((json, key) => {\n      const value = this.get(key);\n      json[key] = value && value.toHuman(isExtended);\n      return json;\n    }, {});\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return [...this.keys()].reduce((json, key) => {\n      const jsonKey = _classPrivateFieldLooseBase(this, _jsonMap)[_jsonMap].get(key) || key;\n      const value = this.get(key);\n      json[jsonKey] = value && value.toJSON();\n      return json;\n    }, {});\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify(Struct.typesToMap(this.registry, _classPrivateFieldLooseBase(this, _Types)[_Types]));\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // we have keyof S here, cast to string to make it compatible with isBare\n    const entries = [...this.entries()];\n    return u8aConcat(...entries // eslint-disable-next-line @typescript-eslint/unbound-method\n    .filter(([, value]) => isFunction(value === null || value === void 0 ? void 0 : value.toU8a)).map(([key, value]) => value.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[key])));\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/codec/Struct.mjs"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","hexToU8a","isBoolean","isFunction","isHex","isObject","isU8a","isUndefined","stringCamelCase","u8aConcat","u8aToHex","compareMap","decodeU8a","mapToTypeMap","decodeStructFromObject","registry","Types","value","jsonMap","jsonObj","Object","keys","reduce","raw","key","index","jsonKey","get","Array","isArray","Map","mapped","assign","entries","all","Error","JSON","stringify","error","type","name","toRawType","message","decodeStruct","values","_jsonMap","_Types","Struct","constructor","defineProperty","writable","with","forEach","enumerable","typesToMap","result","Type","getClassName","defKeys","isEmpty","items","toArray","i","length","encodedLength","entry","hash","toU8a","eq","other","getAtIndex","toHex","toHuman","isExtended","json","toJSON","toString","isBare","filter","map"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { hexToU8a, isBoolean, isFunction, isHex, isObject, isU8a, isUndefined, stringCamelCase, u8aConcat, u8aToHex } from '@polkadot/util';\nimport { compareMap, decodeU8a, mapToTypeMap } from \"./utils/index.mjs\";\n\n/** @internal */\nfunction decodeStructFromObject(registry, Types, value, jsonMap) {\n  let jsonObj;\n  return Object.keys(Types).reduce((raw, key, index) => {\n    // The key in the JSON can be snake_case (or other cases), but in our\n    // Types, result or any other maps, it's camelCase\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const jsonKey = jsonMap.get(key) && !value[key] ? jsonMap.get(key) : key;\n\n    try {\n      if (Array.isArray(value)) {\n        // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n        raw[key] = value[index] instanceof Types[key] ? value[index] : new Types[key](registry, value[index]);\n      } else if (value instanceof Map) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const mapped = value.get(jsonKey); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        raw[key] = mapped instanceof Types[key] ? mapped : new Types[key](registry, mapped);\n      } else if (isObject(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        let assign = value[jsonKey];\n\n        if (isUndefined(assign)) {\n          if (isUndefined(jsonObj)) {\n            jsonObj = Object.entries(value).reduce((all, [key, value]) => {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              all[stringCamelCase(key)] = value;\n              return all;\n            }, {});\n          } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n          assign = jsonObj[jsonKey];\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n\n\n        raw[key] = assign instanceof Types[key] ? assign : new Types[key](registry, assign);\n      } else {\n        throw new Error(`Cannot decode value ${JSON.stringify(value)}`);\n      }\n    } catch (error) {\n      let type = Types[key].name;\n\n      try {\n        type = new Types[key](registry).toRawType();\n      } catch (error) {// ignore\n      }\n\n      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);\n    }\n\n    return raw;\n  }, {});\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param Types - Types definition.\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`\n * are also keys in `Types`\n * - array with `[value1, value2]` assuming the array has the same length as\n * `Object.keys(Types)`\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeStruct(registry, Types, value, jsonMap) {\n  if (isHex(value)) {\n    return decodeStruct(registry, Types, hexToU8a(value), jsonMap);\n  } else if (isU8a(value)) {\n    const values = decodeU8a(registry, value, Object.values(Types)); // Transform array of values to {key: value} mapping\n\n    return Object.keys(Types).reduce((raw, key, index) => {\n      // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      raw[key] = values[index];\n      return raw;\n    }, {});\n  } else if (!value) {\n    return {};\n  } // We assume from here that value is a JS object (Array, Map, Object)\n\n\n  return decodeStructFromObject(registry, Types, value, jsonMap);\n}\n/**\n * @name Struct\n * @description\n * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes\n * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec\n * values in the constructor and it manages the decoding. It is important that the constructor\n * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,\n * it needs to decoded in the specific defined order.\n * @noInheritDoc\n */\n\n\nvar _jsonMap = _classPrivateFieldLooseKey(\"jsonMap\");\n\nvar _Types = _classPrivateFieldLooseKey(\"Types\");\n\nexport class Struct extends Map {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  constructor(registry, Types, value = {}, jsonMap = new Map()) {\n    super(Object.entries(decodeStruct(registry, mapToTypeMap(registry, Types), value, jsonMap)));\n    this.registry = void 0;\n    Object.defineProperty(this, _jsonMap, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _Types, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _jsonMap)[_jsonMap] = jsonMap;\n    _classPrivateFieldLooseBase(this, _Types)[_Types] = mapToTypeMap(registry, Types);\n  }\n\n  static with(Types, jsonMap) {\n    return class extends Struct {\n      constructor(registry, value) {\n        super(registry, Types, value, jsonMap);\n        Object.keys(Types).forEach(key => {\n          isUndefined(this[key]) && Object.defineProperty(this, key, {\n            enumerable: true,\n            get: () => this.get(key)\n          });\n        });\n      }\n\n    };\n  }\n\n  static typesToMap(registry, Types) {\n    return Object.entries(Types).reduce((result, [key, Type]) => {\n      result[key] = registry.getClassName(Type) || new Type(registry).toRawType();\n      return result;\n    }, {});\n  }\n  /**\n   * @description The available keys for this enum\n   */\n\n\n  get defKeys() {\n    return Object.keys(_classPrivateFieldLooseBase(this, _Types)[_Types]);\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    const items = this.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (!items[i].isEmpty) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * @description Returns the Type description to sthe structure\n   */\n\n\n  get Type() {\n    return Object.entries(_classPrivateFieldLooseBase(this, _Types)[_Types]).reduce((result, [key, Type]) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      result[key] = new Type(this.registry).toRawType();\n      return result;\n    }, {});\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toArray().reduce((length, entry) => {\n      length += entry.encodedLength;\n      return length;\n    }, 0);\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareMap(this, other);\n  }\n  /**\n   * @description Returns a specific names entry in the structure\n   * @param name The name of the entry to retrieve\n   */\n\n\n  get(name) {\n    return super.get(name);\n  }\n  /**\n   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)\n   */\n\n\n  getAtIndex(index) {\n    return this.toArray()[index];\n  }\n  /**\n   * @description Converts the Object to an standard JavaScript Array\n   */\n\n\n  toArray() {\n    return [...this.values()];\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return [...this.keys()].reduce((json, key) => {\n      const value = this.get(key);\n      json[key] = value && value.toHuman(isExtended);\n      return json;\n    }, {});\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return [...this.keys()].reduce((json, key) => {\n      const jsonKey = _classPrivateFieldLooseBase(this, _jsonMap)[_jsonMap].get(key) || key;\n      const value = this.get(key);\n      json[jsonKey] = value && value.toJSON();\n      return json;\n    }, {});\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify(Struct.typesToMap(this.registry, _classPrivateFieldLooseBase(this, _Types)[_Types]));\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // we have keyof S here, cast to string to make it compatible with isBare\n    const entries = [...this.entries()];\n    return u8aConcat(...entries // eslint-disable-next-line @typescript-eslint/unbound-method\n    .filter(([, value]) => isFunction(value === null || value === void 0 ? void 0 : value.toU8a)).map(([key, value]) => value.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[key])));\n  }\n\n}"]},"metadata":{},"sourceType":"module"}