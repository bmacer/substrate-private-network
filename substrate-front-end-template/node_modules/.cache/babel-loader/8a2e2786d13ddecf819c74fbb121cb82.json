{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { HeaderExtended } from \"../type/index.mjs\";\nimport { memo } from \"../util/index.mjs\";\n/**\n * @name subscribeNewHeads\n * @returns A header with the current header (including extracted author)\n * @description An observable of the current block header and it's author\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.chain.subscribeNewHeads((header) => {\n *   console.log(`block #${header.number} was authored by ${header.author}`);\n * });\n * ```\n */\n\nexport function subscribeNewHeads(instanceId, api) {\n  return memo(instanceId, () => combineLatest([api.rpc.chain.subscribeNewHeads(), api.query.session ? api.query.session.validators() : of([])]).pipe(map(([header, validators]) => new HeaderExtended(api.registry, header, validators))));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/chain/subscribeNewHeads.mjs"],"names":["combineLatest","of","map","HeaderExtended","memo","subscribeNewHeads","instanceId","api","rpc","chain","query","session","validators","pipe","header","registry"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,EAAwBC,EAAxB,QAAkC,kBAAlC;AACA,SAASC,GAAT,QAAoB,4BAApB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,GAAvC,EAA4C;AACjD,SAAOH,IAAI,CAACE,UAAD,EAAa,MAAMN,aAAa,CAAC,CAACO,GAAG,CAACC,GAAJ,CAAQC,KAAR,CAAcJ,iBAAd,EAAD,EAAoCE,GAAG,CAACG,KAAJ,CAAUC,OAAV,GAAoBJ,GAAG,CAACG,KAAJ,CAAUC,OAAV,CAAkBC,UAAlB,EAApB,GAAqDX,EAAE,CAAC,EAAD,CAA3F,CAAD,CAAb,CAAgHY,IAAhH,CAAqHX,GAAG,CAAC,CAAC,CAACY,MAAD,EAASF,UAAT,CAAD,KAA0B,IAAIT,cAAJ,CAAmBI,GAAG,CAACQ,QAAvB,EAAiCD,MAAjC,EAAyCF,UAAzC,CAA3B,CAAxH,CAAnB,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { HeaderExtended } from \"../type/index.mjs\";\nimport { memo } from \"../util/index.mjs\";\n/**\n * @name subscribeNewHeads\n * @returns A header with the current header (including extracted author)\n * @description An observable of the current block header and it's author\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.chain.subscribeNewHeads((header) => {\n *   console.log(`block #${header.number} was authored by ${header.author}`);\n * });\n * ```\n */\n\nexport function subscribeNewHeads(instanceId, api) {\n  return memo(instanceId, () => combineLatest([api.rpc.chain.subscribeNewHeads(), api.query.session ? api.query.session.validators() : of([])]).pipe(map(([header, validators]) => new HeaderExtended(api.registry, header, validators))));\n}"]},"metadata":{},"sourceType":"module"}