{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isFunction, isUndefined } from '@polkadot/util';\nimport { compareMap } from \"./utils/index.mjs\";\n/** @internal */\n\nfunction decodeJson(value) {\n  return Object.entries(value || {});\n}\n/**\n * @name Json\n * @description\n * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it\n * implements a Codec, it is limited in that it can only be used with input objects via RPC,\n * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys\n * @noInheritDoc\n */\n\n\nexport class Json extends Map {\n  constructor(registry, value) {\n    const decoded = decodeJson(value);\n    super(decoded);\n    this.registry = void 0;\n    this.registry = registry;\n    decoded.forEach(([key]) => {\n      isUndefined(this[key]) && Object.defineProperty(this, key, {\n        enumerable: true,\n        get: () => this.get(key)\n      });\n    });\n  }\n  /**\n   * @description Always 0, never encodes as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 0;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return [...this.keys()].length === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareMap(this, other);\n  }\n  /**\n   * @description Unimplemented, will throw\n   */\n\n\n  toHex() {\n    throw new Error('Unimplemented');\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return [...this.entries()].reduce((json, [key, value]) => {\n      json[key] = isFunction(value.toHuman) ? value.toHuman() : value;\n      return json;\n    }, {});\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return [...this.entries()].reduce((json, [key, value]) => {\n      json[key] = value;\n      return json;\n    }, {});\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Json';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Unimplemented, will throw\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    throw new Error('Unimplemented');\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/codec/Json.mjs"],"names":["isFunction","isUndefined","compareMap","decodeJson","value","Object","entries","Json","Map","constructor","registry","decoded","forEach","key","defineProperty","enumerable","get","encodedLength","hash","toU8a","isEmpty","keys","length","eq","other","toHex","Error","toHuman","reduce","json","toJSON","toRawType","toString","JSON","stringify","isBare"],"mappings":"AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,gBAAxC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAOC,MAAM,CAACC,OAAP,CAAeF,KAAK,IAAI,EAAxB,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMG,IAAN,SAAmBC,GAAnB,CAAuB;AAC5BC,EAAAA,WAAW,CAACC,QAAD,EAAWN,KAAX,EAAkB;AAC3B,UAAMO,OAAO,GAAGR,UAAU,CAACC,KAAD,CAA1B;AACA,UAAMO,OAAN;AACA,SAAKD,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACAC,IAAAA,OAAO,CAACC,OAAR,CAAgB,CAAC,CAACC,GAAD,CAAD,KAAW;AACzBZ,MAAAA,WAAW,CAAC,KAAKY,GAAL,CAAD,CAAX,IAA0BR,MAAM,CAACS,cAAP,CAAsB,IAAtB,EAA4BD,GAA5B,EAAiC;AACzDE,QAAAA,UAAU,EAAE,IAD6C;AAEzDC,QAAAA,GAAG,EAAE,MAAM,KAAKA,GAAL,CAASH,GAAT;AAF8C,OAAjC,CAA1B;AAID,KALD;AAMD;AACD;AACF;AACA;;;AAGmB,MAAbI,aAAa,GAAG;AAClB,WAAO,CAAP;AACD;AACD;AACF;AACA;;;AAGU,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKR,QAAL,CAAcQ,IAAd,CAAmB,KAAKC,KAAL,EAAnB,CAAP;AACD;AACD;AACF;AACA;;;AAGa,MAAPC,OAAO,GAAG;AACZ,WAAO,CAAC,GAAG,KAAKC,IAAL,EAAJ,EAAiBC,MAAjB,KAA4B,CAAnC;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,WAAOtB,UAAU,CAAC,IAAD,EAAOsB,KAAP,CAAjB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,GAAG;AACN,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,OAAO,GAAG;AACR,WAAO,CAAC,GAAG,KAAKrB,OAAL,EAAJ,EAAoBsB,MAApB,CAA2B,CAACC,IAAD,EAAO,CAAChB,GAAD,EAAMT,KAAN,CAAP,KAAwB;AACxDyB,MAAAA,IAAI,CAAChB,GAAD,CAAJ,GAAYb,UAAU,CAACI,KAAK,CAACuB,OAAP,CAAV,GAA4BvB,KAAK,CAACuB,OAAN,EAA5B,GAA8CvB,KAA1D;AACA,aAAOyB,IAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;AACD;AACF;AACA;;;AAGEC,EAAAA,MAAM,GAAG;AACP,WAAO,CAAC,GAAG,KAAKxB,OAAL,EAAJ,EAAoBsB,MAApB,CAA2B,CAACC,IAAD,EAAO,CAAChB,GAAD,EAAMT,KAAN,CAAP,KAAwB;AACxDyB,MAAAA,IAAI,CAAChB,GAAD,CAAJ,GAAYT,KAAZ;AACA,aAAOyB,IAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;AACD;AACF;AACA;;;AAGEE,EAAAA,SAAS,GAAG;AACV,WAAO,MAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,QAAQ,GAAG;AACT,WAAOC,IAAI,CAACC,SAAL,CAAe,KAAKJ,MAAL,EAAf,CAAP;AACD;AACD;AACF;AACA;AACE;;;AAGAX,EAAAA,KAAK,CAACgB,MAAD,EAAS;AACZ,UAAM,IAAIT,KAAJ,CAAU,eAAV,CAAN;AACD;;AAnG2B","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isFunction, isUndefined } from '@polkadot/util';\nimport { compareMap } from \"./utils/index.mjs\";\n/** @internal */\n\nfunction decodeJson(value) {\n  return Object.entries(value || {});\n}\n/**\n * @name Json\n * @description\n * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it\n * implements a Codec, it is limited in that it can only be used with input objects via RPC,\n * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys\n * @noInheritDoc\n */\n\n\nexport class Json extends Map {\n  constructor(registry, value) {\n    const decoded = decodeJson(value);\n    super(decoded);\n    this.registry = void 0;\n    this.registry = registry;\n    decoded.forEach(([key]) => {\n      isUndefined(this[key]) && Object.defineProperty(this, key, {\n        enumerable: true,\n        get: () => this.get(key)\n      });\n    });\n  }\n  /**\n   * @description Always 0, never encodes as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 0;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return [...this.keys()].length === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareMap(this, other);\n  }\n  /**\n   * @description Unimplemented, will throw\n   */\n\n\n  toHex() {\n    throw new Error('Unimplemented');\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return [...this.entries()].reduce((json, [key, value]) => {\n      json[key] = isFunction(value.toHuman) ? value.toHuman() : value;\n      return json;\n    }, {});\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return [...this.entries()].reduce((json, [key, value]) => {\n      json[key] = value;\n      return json;\n    }, {});\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Json';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Unimplemented, will throw\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    throw new Error('Unimplemented');\n  }\n\n}"]},"metadata":{},"sourceType":"module"}