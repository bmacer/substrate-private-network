{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport BN from 'bn.js';\nimport { bnMax } from '@polkadot/util';\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\nconst VESTING_ID = '0x76657374696e6720';\n\nfunction calcLocked(api, bestNumber, locks) {\n  let lockedBalance = api.registry.createType('Balance');\n  let lockedBreakdown = [];\n  let vestingLocked = api.registry.createType('Balance');\n  let allLocked = false;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(({\n      until\n    }) => !until || bestNumber && until.gt(bestNumber));\n    allLocked = lockedBreakdown.some(({\n      amount\n    }) => amount.isMax());\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({\n      id\n    }) => id.eq(VESTING_ID)).reduce((result, {\n      amount\n    }) => result.iadd(amount), new BN(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    const notAll = lockedBreakdown.filter(({\n      amount\n    }) => !amount.isMax());\n\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({\n        amount\n      }) => amount)));\n    }\n  }\n\n  return {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  };\n}\n\nfunction calcShared(api, bestNumber, data, locks) {\n  const {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  } = calcLocked(api, bestNumber, locks);\n  const availableBalance = api.registry.createType('Balance', allLocked ? 0 : bnMax(new BN(0), data.freeBalance.sub(lockedBalance)));\n  return _objectSpread(_objectSpread({}, data), {}, {\n    availableBalance,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  });\n}\n\nfunction calcBalances(api, [data, bestNumber, [vesting, allLocks]]) {\n  const shared = calcShared(api, bestNumber, data, allLocks[0]); // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n\n  const {\n    locked: vestingTotal,\n    perBlock,\n    startingBlock\n  } = vesting || api.registry.createType('VestingInfo');\n  const isStarted = bestNumber.gt(startingBlock);\n  const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new BN(0);\n  const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);\n  const isVesting = isStarted && !shared.vestingLocked.isZero();\n  const vestedClaimable = api.registry.createType('Balance', isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);\n  const vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);\n  return _objectSpread(_objectSpread({}, shared), {}, {\n    accountId: data.accountId,\n    accountNonce: data.accountNonce,\n    additional: allLocks.filter((_, index) => index !== 0).map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),\n    isVesting,\n    vestedBalance,\n    vestedClaimable,\n    vestingEndBlock,\n    vestingPerBlock: perBlock,\n    vestingTotal\n  });\n} // old\n\n\nfunction queryOld(api, accountId) {\n  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe(map(([locks, optVesting]) => {\n    let vestingNew = null;\n\n    if (optVesting.isSome) {\n      const {\n        offset: locked,\n        perBlock,\n        startingBlock\n      } = optVesting.unwrap();\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked,\n        perBlock,\n        startingBlock\n      });\n    }\n\n    return [vestingNew, [locks]];\n  }));\n} // current (balances, vesting)\n\n\nfunction queryCurrent(api, accountId, balanceInstances = ['balances']) {\n  var _api$query$vesting;\n\n  const lockCalls = balanceInstances.map(m => api.query[m].locks);\n  const lockEmpty = lockCalls.map(c => !c);\n  const lockQueries = lockCalls.filter(c => c).map(c => [c, accountId]);\n  return ((_api$query$vesting = api.query.vesting) !== null && _api$query$vesting !== void 0 && _api$query$vesting.vesting ? api.queryMulti([[api.query.vesting.vesting, accountId], ...lockQueries]) // TODO We need to check module instances here as well, not only the balances module\n  : lockQueries.length ? api.queryMulti(lockQueries).pipe(map(locks => [api.registry.createType('Option<VestingInfo>'), ...locks])) : of([api.registry.createType('Option<VestingInfo>')])).pipe(map(([optVesting, ...locks]) => {\n    let offset = -1;\n    return [optVesting.unwrapOr(null), lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offset])];\n  }));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nexport function all(instanceId, api) {\n  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');\n  return memo(instanceId, address => api.derive.balances.account(address).pipe(switchMap(account => {\n    var _api$query$system, _api$query$balances;\n\n    return !account.accountId.isEmpty ? combineLatest([of(account), api.derive.chain.bestNumber(), (_api$query$system = api.query.system) !== null && _api$query$system !== void 0 && _api$query$system.account || (_api$query$balances = api.query.balances) !== null && _api$query$balances !== void 0 && _api$query$balances.account ? queryCurrent(api, account.accountId, balanceInstances) : queryOld(api, account.accountId)]) : of([account, api.registry.createType('BlockNumber'), [null, []]]);\n  }), map(result => calcBalances(api, result))));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/balances/all.mjs"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","BN","bnMax","combineLatest","of","map","switchMap","memo","VESTING_ID","calcLocked","api","bestNumber","locks","lockedBalance","registry","createType","lockedBreakdown","vestingLocked","allLocked","Array","isArray","until","gt","some","amount","isMax","id","eq","reduce","result","iadd","notAll","calcShared","data","availableBalance","freeBalance","sub","calcBalances","vesting","allLocks","shared","locked","vestingTotal","perBlock","startingBlock","isStarted","vestedNow","mul","vestedBalance","isVesting","isZero","vestedClaimable","vestingEndBlock","div","add","accountId","accountNonce","additional","_","index","l","vestingPerBlock","queryOld","queryMulti","query","balances","pipe","optVesting","vestingNew","isSome","offset","unwrap","queryCurrent","balanceInstances","_api$query$vesting","lockCalls","m","lockEmpty","c","lockQueries","unwrapOr","e","all","instanceId","getModuleInstances","runtimeVersion","specName","toString","address","derive","account","_api$query$system","_api$query$balances","isEmpty","chain","system"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { bnMax } from '@polkadot/util';\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\nconst VESTING_ID = '0x76657374696e6720';\n\nfunction calcLocked(api, bestNumber, locks) {\n  let lockedBalance = api.registry.createType('Balance');\n  let lockedBreakdown = [];\n  let vestingLocked = api.registry.createType('Balance');\n  let allLocked = false;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(({\n      until\n    }) => !until || bestNumber && until.gt(bestNumber));\n    allLocked = lockedBreakdown.some(({\n      amount\n    }) => amount.isMax());\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({\n      id\n    }) => id.eq(VESTING_ID)).reduce((result, {\n      amount\n    }) => result.iadd(amount), new BN(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    const notAll = lockedBreakdown.filter(({\n      amount\n    }) => !amount.isMax());\n\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({\n        amount\n      }) => amount)));\n    }\n  }\n\n  return {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  };\n}\n\nfunction calcShared(api, bestNumber, data, locks) {\n  const {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  } = calcLocked(api, bestNumber, locks);\n  const availableBalance = api.registry.createType('Balance', allLocked ? 0 : bnMax(new BN(0), data.freeBalance.sub(lockedBalance)));\n  return _objectSpread(_objectSpread({}, data), {}, {\n    availableBalance,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  });\n}\n\nfunction calcBalances(api, [data, bestNumber, [vesting, allLocks]]) {\n  const shared = calcShared(api, bestNumber, data, allLocks[0]); // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n\n  const {\n    locked: vestingTotal,\n    perBlock,\n    startingBlock\n  } = vesting || api.registry.createType('VestingInfo');\n  const isStarted = bestNumber.gt(startingBlock);\n  const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new BN(0);\n  const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);\n  const isVesting = isStarted && !shared.vestingLocked.isZero();\n  const vestedClaimable = api.registry.createType('Balance', isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);\n  const vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);\n  return _objectSpread(_objectSpread({}, shared), {}, {\n    accountId: data.accountId,\n    accountNonce: data.accountNonce,\n    additional: allLocks.filter((_, index) => index !== 0).map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),\n    isVesting,\n    vestedBalance,\n    vestedClaimable,\n    vestingEndBlock,\n    vestingPerBlock: perBlock,\n    vestingTotal\n  });\n} // old\n\n\nfunction queryOld(api, accountId) {\n  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe(map(([locks, optVesting]) => {\n    let vestingNew = null;\n\n    if (optVesting.isSome) {\n      const {\n        offset: locked,\n        perBlock,\n        startingBlock\n      } = optVesting.unwrap();\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked,\n        perBlock,\n        startingBlock\n      });\n    }\n\n    return [vestingNew, [locks]];\n  }));\n} // current (balances, vesting)\n\n\nfunction queryCurrent(api, accountId, balanceInstances = ['balances']) {\n  var _api$query$vesting;\n\n  const lockCalls = balanceInstances.map(m => api.query[m].locks);\n  const lockEmpty = lockCalls.map(c => !c);\n  const lockQueries = lockCalls.filter(c => c).map(c => [c, accountId]);\n  return ((_api$query$vesting = api.query.vesting) !== null && _api$query$vesting !== void 0 && _api$query$vesting.vesting ? api.queryMulti([[api.query.vesting.vesting, accountId], ...lockQueries]) // TODO We need to check module instances here as well, not only the balances module\n  : lockQueries.length ? api.queryMulti(lockQueries).pipe(map(locks => [api.registry.createType('Option<VestingInfo>'), ...locks])) : of([api.registry.createType('Option<VestingInfo>')])).pipe(map(([optVesting, ...locks]) => {\n    let offset = -1;\n    return [optVesting.unwrapOr(null), lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offset])];\n  }));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nexport function all(instanceId, api) {\n  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');\n  return memo(instanceId, address => api.derive.balances.account(address).pipe(switchMap(account => {\n    var _api$query$system, _api$query$balances;\n\n    return !account.accountId.isEmpty ? combineLatest([of(account), api.derive.chain.bestNumber(), (_api$query$system = api.query.system) !== null && _api$query$system !== void 0 && _api$query$system.account || (_api$query$balances = api.query.balances) !== null && _api$query$balances !== void 0 && _api$query$balances.account ? queryCurrent(api, account.accountId, balanceInstances) : queryOld(api, account.accountId)]) : of([account, api.registry.createType('BlockNumber'), [null, []]]);\n  }), map(result => calcBalances(api, result))));\n}"]},"metadata":{},"sourceType":"module"}