{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport js from 'blakejs';\nimport { u8aToU8a } from '@polkadot/util';\nimport { blake2b, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name blake2AsU8a\n * @summary Creates a blake2b u8a from the input.\n * @description\n * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { blake2AsU8a } from '@polkadot/util-crypto';\n *\n * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa53, 0xf98, 0x1c, 0x4d, 0x0d]\n * ```\n */\n\nexport function blake2AsU8a(data, bitLength = 256, key = null, onlyJs = false) {\n  const byteLength = Math.ceil(bitLength / 8);\n  return isReady() && !onlyJs ? blake2b(u8aToU8a(data), u8aToU8a(key), byteLength) : js.blake2b(u8aToU8a(data), key, byteLength);\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util-crypto/blake2/asU8a.mjs"],"names":["js","u8aToU8a","blake2b","isReady","blake2AsU8a","data","bitLength","key","onlyJs","byteLength","Math","ceil"],"mappings":"AAAA;AACA;AACA,OAAOA,EAAP,MAAe,SAAf;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,uBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,SAAS,GAAG,GAAvC,EAA4CC,GAAG,GAAG,IAAlD,EAAwDC,MAAM,GAAG,KAAjE,EAAwE;AAC7E,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUL,SAAS,GAAG,CAAtB,CAAnB;AACA,SAAOH,OAAO,MAAM,CAACK,MAAd,GAAuBN,OAAO,CAACD,QAAQ,CAACI,IAAD,CAAT,EAAiBJ,QAAQ,CAACM,GAAD,CAAzB,EAAgCE,UAAhC,CAA9B,GAA4ET,EAAE,CAACE,OAAH,CAAWD,QAAQ,CAACI,IAAD,CAAnB,EAA2BE,GAA3B,EAAgCE,UAAhC,CAAnF;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport js from 'blakejs';\nimport { u8aToU8a } from '@polkadot/util';\nimport { blake2b, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name blake2AsU8a\n * @summary Creates a blake2b u8a from the input.\n * @description\n * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { blake2AsU8a } from '@polkadot/util-crypto';\n *\n * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa53, 0xf98, 0x1c, 0x4d, 0x0d]\n * ```\n */\n\nexport function blake2AsU8a(data, bitLength = 256, key = null, onlyJs = false) {\n  const byteLength = Math.ceil(bitLength / 8);\n  return isReady() && !onlyJs ? blake2b(u8aToU8a(data), u8aToU8a(key), byteLength) : js.blake2b(u8aToU8a(data), key, byteLength);\n}"]},"metadata":{},"sourceType":"module"}