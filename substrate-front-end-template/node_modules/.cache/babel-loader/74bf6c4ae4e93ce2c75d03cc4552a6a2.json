{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { hexHasPrefix } from \"./hasPrefix.mjs\";\n/**\n * @name hexAddPrefix\n * @summary Adds the `0x` prefix to string values.\n * @description\n * Returns a `0x` prefixed string from the input value. If the input is already prefixed, it is returned unchanged.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexAddPrefix } from '@polkadot/util';\n *\n * console.log('With prefix', hexAddPrefix('0a0b12')); // => 0x0a0b12\n * ```\n */\n\nexport function hexAddPrefix(value) {\n  if (value && hexHasPrefix(value)) {\n    return value;\n  }\n\n  const prefix = value && value.length % 2 === 1 ? '0' : '';\n  return `0x${prefix}${value || ''}`;\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util/hex/addPrefix.mjs"],"names":["hexHasPrefix","hexAddPrefix","value","prefix","length"],"mappings":"AAAA;AACA;AACA,SAASA,YAAT,QAA6B,iBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,MAAIA,KAAK,IAAIF,YAAY,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAOA,KAAP;AACD;;AAED,QAAMC,MAAM,GAAGD,KAAK,IAAIA,KAAK,CAACE,MAAN,GAAe,CAAf,KAAqB,CAA9B,GAAkC,GAAlC,GAAwC,EAAvD;AACA,SAAQ,KAAID,MAAO,GAAED,KAAK,IAAI,EAAG,EAAjC;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { hexHasPrefix } from \"./hasPrefix.mjs\";\n/**\n * @name hexAddPrefix\n * @summary Adds the `0x` prefix to string values.\n * @description\n * Returns a `0x` prefixed string from the input value. If the input is already prefixed, it is returned unchanged.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexAddPrefix } from '@polkadot/util';\n *\n * console.log('With prefix', hexAddPrefix('0a0b12')); // => 0x0a0b12\n * ```\n */\n\nexport function hexAddPrefix(value) {\n  if (value && hexHasPrefix(value)) {\n    return value;\n  }\n\n  const prefix = value && value.length % 2 === 1 ? '0' : '';\n  return `0x${prefix}${value || ''}`;\n}"]},"metadata":{},"sourceType":"module"}