{"ast":null,"code":"var _jsxFileName = \"/Users/bmacer/substrate-node-template/substrate-front-end-template/src/Balances.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main(props) {\n  _s();\n\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n    api.query.system.account.multi(addresses, balances => {\n      const balancesMap = addresses.reduce((acc, address, index) => ({ ...acc,\n        [address]: balances[index].data.free.toHuman()\n      }), {});\n      setBalances(balancesMap);\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, keyring, setBalances]);\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Balances\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      celled: true,\n      striped: true,\n      size: \"small\",\n      children: /*#__PURE__*/_jsxDEV(Table.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Table.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Table.Cell, {\n            width: 3,\n            textAlign: \"right\",\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            width: 10,\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            width: 3,\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), accounts.map(account => /*#__PURE__*/_jsxDEV(Table.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Table.Cell, {\n            width: 3,\n            textAlign: \"right\",\n            children: account.meta.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            width: 10,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: 'inline-block',\n                minWidth: '31em'\n              },\n              children: account.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n              text: account.address,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                basic: true,\n                circular: true,\n                compact: true,\n                size: \"mini\",\n                color: \"blue\",\n                icon: \"copy outline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            width: 3,\n            children: balances && balances[account.address] && balances[account.address]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, account.address, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"HDMBT3HKpawRPjnrnO941ydACvQ=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/src/Balances.js"],"names":["React","useEffect","useState","Table","Grid","Button","CopyToClipboard","useSubstrate","Main","props","api","keyring","accounts","getPairs","balances","setBalances","addresses","map","account","address","unsubscribeAll","query","system","multi","balancesMap","reduce","acc","index","data","free","toHuman","then","unsub","catch","console","error","meta","name","display","minWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Main (props) {\n  const { api, keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n\n    api.query.system.account\n      .multi(addresses, balances => {\n        const balancesMap = addresses.reduce((acc, address, index) => ({\n          ...acc, [address]: balances[index].data.free.toHuman()\n        }), {});\n        setBalances(balancesMap);\n      }).then(unsub => {\n        unsubscribeAll = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, keyring, setBalances]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size='small'>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell width={3} textAlign='right'>\n              <strong>Name</strong>\n            </Table.Cell>\n            <Table.Cell width={10}>\n              <strong>Address</strong>\n            </Table.Cell>\n            <Table.Cell width={3}>\n              <strong>Balance</strong>\n            </Table.Cell>\n          </Table.Row>\n          {accounts.map(account =>\n            <Table.Row key={account.address}>\n              <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\n              <Table.Cell width={10}>\n                <span style={{ display: 'inline-block', minWidth: '31em' }}>\n                  {account.address}\n                </span>\n                <CopyToClipboard text={account.address}>\n                  <Button\n                    basic\n                    circular\n                    compact\n                    size='mini'\n                    color='blue'\n                    icon='copy outline'\n                  />\n                </CopyToClipboard>\n              </Table.Cell>\n              <Table.Cell width={3}>{\n                balances && balances[account.address] &&\n                balances[account.address]\n              }</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}