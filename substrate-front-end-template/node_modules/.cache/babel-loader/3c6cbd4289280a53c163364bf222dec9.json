{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ALPHABET = new Array(256).fill(0).map((_, n) => n.toString(16).padStart(2, '0'));\n/** @internal */\n\nfunction extract(value) {\n  const result = new Array(value.length);\n\n  for (let i = 0; i < value.length; i++) {\n    result[i] = ALPHABET[value[i]];\n  }\n\n  return result.join('');\n}\n/** @internal */\n\n\nfunction trim(value, halfLength) {\n  return `${u8aToHex(value.subarray(0, halfLength), -1, false)}…${u8aToHex(value.subarray(value.length - halfLength), -1, false)}`;\n}\n/**\n * @name u8aToHex\n * @summary Creates a hex string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToHex } from '@polkadot/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\n\n\nexport function u8aToHex(value, bitLength = -1, isPrefixed = true) {\n  const prefix = isPrefixed ? '0x' : '';\n\n  if (!(value !== null && value !== void 0 && value.length)) {\n    return prefix;\n  }\n\n  const byteLength = Math.ceil(bitLength / 8);\n  return prefix + (byteLength > 0 && value.length > byteLength ? trim(value, Math.ceil(byteLength / 2)) : extract(value));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util/u8a/toHex.mjs"],"names":["ALPHABET","Array","fill","map","_","n","toString","padStart","extract","value","result","length","i","join","trim","halfLength","u8aToHex","subarray","bitLength","isPrefixed","prefix","byteLength","Math","ceil"],"mappings":"AAAA;AACA;AACA,MAAMA,QAAQ,GAAG,IAAIC,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,CAApB,EAAuBC,GAAvB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CAArC,CAAjB;AACA;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAMC,MAAM,GAAG,IAAIT,KAAJ,CAAUQ,KAAK,CAACE,MAAhB,CAAf;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACE,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrCF,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAYZ,QAAQ,CAACS,KAAK,CAACG,CAAD,CAAN,CAApB;AACD;;AAED,SAAOF,MAAM,CAACG,IAAP,CAAY,EAAZ,CAAP;AACD;AACD;;;AAGA,SAASC,IAAT,CAAcL,KAAd,EAAqBM,UAArB,EAAiC;AAC/B,SAAQ,GAAEC,QAAQ,CAACP,KAAK,CAACQ,QAAN,CAAe,CAAf,EAAkBF,UAAlB,CAAD,EAAgC,CAAC,CAAjC,EAAoC,KAApC,CAA2C,IAAGC,QAAQ,CAACP,KAAK,CAACQ,QAAN,CAAeR,KAAK,CAACE,MAAN,GAAeI,UAA9B,CAAD,EAA4C,CAAC,CAA7C,EAAgD,KAAhD,CAAuD,EAA/H;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,QAAT,CAAkBP,KAAlB,EAAyBS,SAAS,GAAG,CAAC,CAAtC,EAAyCC,UAAU,GAAG,IAAtD,EAA4D;AACjE,QAAMC,MAAM,GAAGD,UAAU,GAAG,IAAH,GAAU,EAAnC;;AAEA,MAAI,EAAEV,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,IAAsCA,KAAK,CAACE,MAA9C,CAAJ,EAA2D;AACzD,WAAOS,MAAP;AACD;;AAED,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUL,SAAS,GAAG,CAAtB,CAAnB;AACA,SAAOE,MAAM,IAAIC,UAAU,GAAG,CAAb,IAAkBZ,KAAK,CAACE,MAAN,GAAeU,UAAjC,GAA8CP,IAAI,CAACL,KAAD,EAAQa,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAG,CAAvB,CAAR,CAAlD,GAAuFb,OAAO,CAACC,KAAD,CAAlG,CAAb;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ALPHABET = new Array(256).fill(0).map((_, n) => n.toString(16).padStart(2, '0'));\n/** @internal */\n\nfunction extract(value) {\n  const result = new Array(value.length);\n\n  for (let i = 0; i < value.length; i++) {\n    result[i] = ALPHABET[value[i]];\n  }\n\n  return result.join('');\n}\n/** @internal */\n\n\nfunction trim(value, halfLength) {\n  return `${u8aToHex(value.subarray(0, halfLength), -1, false)}…${u8aToHex(value.subarray(value.length - halfLength), -1, false)}`;\n}\n/**\n * @name u8aToHex\n * @summary Creates a hex string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToHex } from '@polkadot/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\n\n\nexport function u8aToHex(value, bitLength = -1, isPrefixed = true) {\n  const prefix = isPrefixed ? '0x' : '';\n\n  if (!(value !== null && value !== void 0 && value.length)) {\n    return prefix;\n  }\n\n  const byteLength = Math.ceil(bitLength / 8);\n  return prefix + (byteLength > 0 && value.length > byteLength ? trim(value, Math.ceil(byteLength / 2)) : extract(value));\n}"]},"metadata":{},"sourceType":"module"}