{"ast":null,"code":"// Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { flattenUniq } from \"./flattenUniq.mjs\";\nimport { validateTypes } from \"./validateTypes.mjs\";\n/** @internal */\n\nfunction unwrapCalls(mod) {\n  return mod.calls ? mod.calls.unwrapOr([]) // V0\n  : mod.module ? mod.module.call.functions : [];\n}\n/** @internal */\n\n\nfunction getCallNames({\n  modules\n}) {\n  return modules.map(mod => unwrapCalls(mod).map(({\n    args\n  }) => args.map(arg => arg.type.toString())));\n}\n/** @internal */\n\n\nfunction getConstantNames({\n  modules\n}) {\n  return modules.map(({\n    constants\n  }) => constants ? constants.map(constant => constant.type.toString()) : []);\n}\n/** @internal */\n\n\nfunction unwrapEvents(events) {\n  if (!events) {\n    return [];\n  }\n\n  return events.unwrapOr([]);\n}\n/** @internal */\n\n\nfunction getEventNames({\n  modules,\n  outerEvent\n}) {\n  const mapArg = ({\n    args\n  }) => args.map(arg => arg.toString()); // V0\n\n\n  if (outerEvent) {\n    return outerEvent.events.map(([, events]) => events.map(mapArg));\n  } // V1+\n\n\n  return modules.map(({\n    events\n  }) => unwrapEvents(events).map(mapArg));\n}\n/** @internal */\n\n\nfunction unwrapStorage(storage) {\n  if (!storage) {\n    return [];\n  }\n\n  const data = storage.unwrapOr([]);\n  return Array.isArray(data) ? data : data.items || data.functions;\n}\n/** @internal */\n\n\nfunction getStorageNames({\n  modules\n}) {\n  return modules.map(({\n    storage\n  }) => unwrapStorage(storage).map(({\n    type\n  }) => {\n    if (type.isDoubleMap && type.asDoubleMap) {\n      return [type.asDoubleMap.key1.toString(), type.asDoubleMap.key2.toString(), type.asDoubleMap.value.toString()];\n    } else if (type.isMap) {\n      return [type.asMap.key.toString(), type.asMap.value.toString()];\n    } else {\n      return [type.asPlain.toString()];\n    }\n  }));\n}\n/** @internal */\n\n\nexport function getUniqTypes(registry, meta, throwError) {\n  const types = flattenUniq([getCallNames(meta), getConstantNames(meta), getEventNames(meta), getStorageNames(meta)]);\n  validateTypes(registry, types, throwError);\n  return types;\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/metadata/util/getUniqTypes.mjs"],"names":["flattenUniq","validateTypes","unwrapCalls","mod","calls","unwrapOr","module","call","functions","getCallNames","modules","map","args","arg","type","toString","getConstantNames","constants","constant","unwrapEvents","events","getEventNames","outerEvent","mapArg","unwrapStorage","storage","data","Array","isArray","items","getStorageNames","isDoubleMap","asDoubleMap","key1","key2","value","isMap","asMap","key","asPlain","getUniqTypes","registry","meta","throwError","types"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { flattenUniq } from \"./flattenUniq.mjs\";\nimport { validateTypes } from \"./validateTypes.mjs\";\n\n/** @internal */\nfunction unwrapCalls(mod) {\n  return mod.calls ? mod.calls.unwrapOr([]) // V0\n  : mod.module ? mod.module.call.functions : [];\n}\n/** @internal */\n\n\nfunction getCallNames({\n  modules\n}) {\n  return modules.map(mod => unwrapCalls(mod).map(({\n    args\n  }) => args.map(arg => arg.type.toString())));\n}\n/** @internal */\n\n\nfunction getConstantNames({\n  modules\n}) {\n  return modules.map(({\n    constants\n  }) => constants ? constants.map(constant => constant.type.toString()) : []);\n}\n/** @internal */\n\n\nfunction unwrapEvents(events) {\n  if (!events) {\n    return [];\n  }\n\n  return events.unwrapOr([]);\n}\n/** @internal */\n\n\nfunction getEventNames({\n  modules,\n  outerEvent\n}) {\n  const mapArg = ({\n    args\n  }) => args.map(arg => arg.toString()); // V0\n\n\n  if (outerEvent) {\n    return outerEvent.events.map(([, events]) => events.map(mapArg));\n  } // V1+\n\n\n  return modules.map(({\n    events\n  }) => unwrapEvents(events).map(mapArg));\n}\n/** @internal */\n\n\nfunction unwrapStorage(storage) {\n  if (!storage) {\n    return [];\n  }\n\n  const data = storage.unwrapOr([]);\n  return Array.isArray(data) ? data : data.items || data.functions;\n}\n/** @internal */\n\n\nfunction getStorageNames({\n  modules\n}) {\n  return modules.map(({\n    storage\n  }) => unwrapStorage(storage).map(({\n    type\n  }) => {\n    if (type.isDoubleMap && type.asDoubleMap) {\n      return [type.asDoubleMap.key1.toString(), type.asDoubleMap.key2.toString(), type.asDoubleMap.value.toString()];\n    } else if (type.isMap) {\n      return [type.asMap.key.toString(), type.asMap.value.toString()];\n    } else {\n      return [type.asPlain.toString()];\n    }\n  }));\n}\n/** @internal */\n\n\nexport function getUniqTypes(registry, meta, throwError) {\n  const types = flattenUniq([getCallNames(meta), getConstantNames(meta), getEventNames(meta), getStorageNames(meta)]);\n  validateTypes(registry, types, throwError);\n  return types;\n}"]},"metadata":{},"sourceType":"module"}