{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToHex } from '@polkadot/util';\nimport { Struct } from \"../codec/Struct.mjs\"; // We explicitly cast the type here to get the actual TypeScript exports right\n// We can ignore the properties, added via Struct.with\n\nconst _Payload = Struct.with({\n  address: 'Address',\n  blockHash: 'Hash',\n  blockNumber: 'BlockNumber',\n  era: 'ExtrinsicEra',\n  genesisHash: 'Hash',\n  method: 'Call',\n  nonce: 'Compact<Index>',\n  runtimeVersion: 'RuntimeVersion',\n  signedExtensions: 'Vec<Text>',\n  tip: 'Compact<Balance>',\n  version: 'u8'\n});\n/**\n * @name GenericSignerPayload\n * @description\n * A generic signer payload that can be used for serialization between API and signer\n */\n\n\nexport class GenericSignerPayload extends _Payload {\n  /**\n   * @description Creates an representation of the structure as an ISignerPayload JSON\n   */\n  toPayload() {\n    const {\n      address,\n      blockHash,\n      blockNumber,\n      era,\n      genesisHash,\n      method,\n      nonce,\n      runtimeVersion: {\n        specVersion,\n        transactionVersion\n      },\n      signedExtensions,\n      tip,\n      version\n    } = this;\n    return {\n      address: address.toString(),\n      blockHash: blockHash.toHex(),\n      blockNumber: blockNumber.toHex(),\n      era: era.toHex(),\n      genesisHash: genesisHash.toHex(),\n      method: method.toHex(),\n      nonce: nonce.toHex(),\n      signedExtensions: signedExtensions.map(e => e.toString()),\n      specVersion: specVersion.toHex(),\n      tip: tip.toHex(),\n      transactionVersion: transactionVersion.toHex(),\n      version: version.toNumber()\n    };\n  }\n  /**\n   * @description Creates a representation of the payload in raw Exrinsic form\n   */\n\n\n  toRaw() {\n    const payload = this.toPayload(); // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)\n\n    const data = u8aToHex(this.registry.createType('ExtrinsicPayload', payload, {\n      version: payload.version\n    }).toU8a({\n      method: true\n    }));\n    return {\n      address: payload.address,\n      data,\n      type: 'payload'\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/extrinsic/SignerPayload.mjs"],"names":["u8aToHex","Struct","_Payload","with","address","blockHash","blockNumber","era","genesisHash","method","nonce","runtimeVersion","signedExtensions","tip","version","GenericSignerPayload","toPayload","specVersion","transactionVersion","toString","toHex","map","e","toNumber","toRaw","payload","data","registry","createType","toU8a","type"],"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,qBAAvB,C,CAEA;AACA;;AACA,MAAMC,QAAQ,GAAGD,MAAM,CAACE,IAAP,CAAY;AAC3BC,EAAAA,OAAO,EAAE,SADkB;AAE3BC,EAAAA,SAAS,EAAE,MAFgB;AAG3BC,EAAAA,WAAW,EAAE,aAHc;AAI3BC,EAAAA,GAAG,EAAE,cAJsB;AAK3BC,EAAAA,WAAW,EAAE,MALc;AAM3BC,EAAAA,MAAM,EAAE,MANmB;AAO3BC,EAAAA,KAAK,EAAE,gBAPoB;AAQ3BC,EAAAA,cAAc,EAAE,gBARW;AAS3BC,EAAAA,gBAAgB,EAAE,WATS;AAU3BC,EAAAA,GAAG,EAAE,kBAVsB;AAW3BC,EAAAA,OAAO,EAAE;AAXkB,CAAZ,CAAjB;AAaA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMC,oBAAN,SAAmCb,QAAnC,CAA4C;AACjD;AACF;AACA;AACEc,EAAAA,SAAS,GAAG;AACV,UAAM;AACJZ,MAAAA,OADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,WAHI;AAIJC,MAAAA,GAJI;AAKJC,MAAAA,WALI;AAMJC,MAAAA,MANI;AAOJC,MAAAA,KAPI;AAQJC,MAAAA,cAAc,EAAE;AACdM,QAAAA,WADc;AAEdC,QAAAA;AAFc,OARZ;AAYJN,MAAAA,gBAZI;AAaJC,MAAAA,GAbI;AAcJC,MAAAA;AAdI,QAeF,IAfJ;AAgBA,WAAO;AACLV,MAAAA,OAAO,EAAEA,OAAO,CAACe,QAAR,EADJ;AAELd,MAAAA,SAAS,EAAEA,SAAS,CAACe,KAAV,EAFN;AAGLd,MAAAA,WAAW,EAAEA,WAAW,CAACc,KAAZ,EAHR;AAILb,MAAAA,GAAG,EAAEA,GAAG,CAACa,KAAJ,EAJA;AAKLZ,MAAAA,WAAW,EAAEA,WAAW,CAACY,KAAZ,EALR;AAMLX,MAAAA,MAAM,EAAEA,MAAM,CAACW,KAAP,EANH;AAOLV,MAAAA,KAAK,EAAEA,KAAK,CAACU,KAAN,EAPF;AAQLR,MAAAA,gBAAgB,EAAEA,gBAAgB,CAACS,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAACH,QAAF,EAA1B,CARb;AASLF,MAAAA,WAAW,EAAEA,WAAW,CAACG,KAAZ,EATR;AAULP,MAAAA,GAAG,EAAEA,GAAG,CAACO,KAAJ,EAVA;AAWLF,MAAAA,kBAAkB,EAAEA,kBAAkB,CAACE,KAAnB,EAXf;AAYLN,MAAAA,OAAO,EAAEA,OAAO,CAACS,QAAR;AAZJ,KAAP;AAcD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,GAAG;AACN,UAAMC,OAAO,GAAG,KAAKT,SAAL,EAAhB,CADM,CAC4B;;AAElC,UAAMU,IAAI,GAAG1B,QAAQ,CAAC,KAAK2B,QAAL,CAAcC,UAAd,CAAyB,kBAAzB,EAA6CH,OAA7C,EAAsD;AAC1EX,MAAAA,OAAO,EAAEW,OAAO,CAACX;AADyD,KAAtD,EAEnBe,KAFmB,CAEb;AACPpB,MAAAA,MAAM,EAAE;AADD,KAFa,CAAD,CAArB;AAKA,WAAO;AACLL,MAAAA,OAAO,EAAEqB,OAAO,CAACrB,OADZ;AAELsB,MAAAA,IAFK;AAGLI,MAAAA,IAAI,EAAE;AAHD,KAAP;AAKD;;AAtDgD","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToHex } from '@polkadot/util';\nimport { Struct } from \"../codec/Struct.mjs\";\n\n// We explicitly cast the type here to get the actual TypeScript exports right\n// We can ignore the properties, added via Struct.with\nconst _Payload = Struct.with({\n  address: 'Address',\n  blockHash: 'Hash',\n  blockNumber: 'BlockNumber',\n  era: 'ExtrinsicEra',\n  genesisHash: 'Hash',\n  method: 'Call',\n  nonce: 'Compact<Index>',\n  runtimeVersion: 'RuntimeVersion',\n  signedExtensions: 'Vec<Text>',\n  tip: 'Compact<Balance>',\n  version: 'u8'\n});\n/**\n * @name GenericSignerPayload\n * @description\n * A generic signer payload that can be used for serialization between API and signer\n */\n\n\nexport class GenericSignerPayload extends _Payload {\n  /**\n   * @description Creates an representation of the structure as an ISignerPayload JSON\n   */\n  toPayload() {\n    const {\n      address,\n      blockHash,\n      blockNumber,\n      era,\n      genesisHash,\n      method,\n      nonce,\n      runtimeVersion: {\n        specVersion,\n        transactionVersion\n      },\n      signedExtensions,\n      tip,\n      version\n    } = this;\n    return {\n      address: address.toString(),\n      blockHash: blockHash.toHex(),\n      blockNumber: blockNumber.toHex(),\n      era: era.toHex(),\n      genesisHash: genesisHash.toHex(),\n      method: method.toHex(),\n      nonce: nonce.toHex(),\n      signedExtensions: signedExtensions.map(e => e.toString()),\n      specVersion: specVersion.toHex(),\n      tip: tip.toHex(),\n      transactionVersion: transactionVersion.toHex(),\n      version: version.toNumber()\n    };\n  }\n  /**\n   * @description Creates a representation of the payload in raw Exrinsic form\n   */\n\n\n  toRaw() {\n    const payload = this.toPayload(); // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)\n\n    const data = u8aToHex(this.registry.createType('ExtrinsicPayload', payload, {\n      version: payload.version\n    }).toU8a({\n      method: true\n    }));\n    return {\n      address: payload.address,\n      data,\n      type: 'payload'\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}