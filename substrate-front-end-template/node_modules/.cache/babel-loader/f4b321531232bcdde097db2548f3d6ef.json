{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ALLOWED_BOXES = ['BTreeMap', 'BTreeSet', 'Compact', 'DoNotConstruct', 'HashMap', 'Int', 'Linkage', 'Result', 'Option', 'UInt', 'Vec'];\nconst BOX_PRECEDING = ['<', '(', '[', '\"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple\n\nconst mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport\nalias(['<T::InherentOfflineReport as InherentOfflineReport>::Inherent'], 'InherentOfflineReport', false), alias(['VecDeque<'], 'Vec<', false), // <T::Balance as HasCompact>\ncleanupCompact(), // Remove all the trait prefixes\nremoveTraits(), // remove PairOf<T> -> (T, T)\nremovePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`\nremoveWrap('Box'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`\nremoveGenerics(), // alias String -> Text (compat with jsonrpc methods)\nalias(['String'], 'Text'), // alias Vec<u8> -> Bytes\nalias(['Vec<u8>', '&\\\\[u8\\\\]'], 'Bytes'), // alias RawAddress -> Address\nalias(['RawAddress'], 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime\nalias(['Lookup::Source'], 'LookupSource'), alias(['Lookup::Target'], 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec\nalias(['exec::StorageKey'], 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`\nflattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal\nremoveColons()]; // given a starting index, find the closing >\n\nexport function findClosing(value, start) {\n  let depth = 0;\n\n  for (let index = start; index < value.length; index++) {\n    if (value[index] === '>') {\n      if (!depth) {\n        return index;\n      }\n\n      depth--;\n    } else if (value[index] === '<') {\n      depth++;\n    }\n  }\n\n  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);\n}\nexport function alias(src, dest, withChecks = true) {\n  return value => {\n    return src.reduce((value, src) => {\n      return value.replace(new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\\\${box}${src}`).join('|')})`, 'g'), src => withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest);\n    }, value);\n  };\n}\nexport function cleanupCompact() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] !== '<') {\n        continue;\n      }\n\n      const end = findClosing(value, index + 1) - 14;\n\n      if (value.substr(end, 14) === ' as HasCompact') {\n        value = `Compact<${value.substr(index + 1, end - index - 1)}>`;\n      }\n    }\n\n    return value;\n  };\n}\nexport function flattenSingleTuple() {\n  return value => {\n    return value.replace(/\\(([^,]+)\\)/, '$1');\n  };\n}\nexport function removeColons() {\n  return (value, {\n    allowNamespaces\n  } = {}) => {\n    let index = 0;\n\n    while (index !== -1) {\n      index = value.indexOf('::');\n\n      if (index === 0) {\n        value = value.substr(2);\n      } else if (index !== -1) {\n        if (allowNamespaces) {\n          return value;\n        }\n\n        let start = index;\n\n        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {\n          start--;\n        }\n\n        value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;\n      }\n    }\n\n    return value;\n  };\n}\nexport function removeGenerics() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        // check against the allowed wrappers, be it Vec<..>, Option<...> ...\n        const box = ALLOWED_BOXES.find(box => {\n          const start = index - box.length;\n          return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>\n          start === 0 || BOX_PRECEDING.includes(value[start - 1]));\n        }); // we have not found anything, unwrap generic innards\n\n        if (!box) {\n          const end = findClosing(value, index + 1);\n          value = `${value.substr(0, index)}${value.substr(end + 1)}`;\n        }\n      }\n    }\n\n    return value;\n  };\n} // remove the PairOf wrappers\n\nexport function removePairOf() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value.substr(index, 7) === 'PairOf<') {\n        const start = index + 7;\n        const end = findClosing(value, start);\n        const type = value.substr(start, end - start);\n        value = `${value.substr(0, index)}(${type},${type})${value.substr(end + 1)}`;\n      }\n    }\n\n    return value;\n  };\n} // remove the type traits\n\nexport function removeTraits() {\n  return value => {\n    return value // remove all whitespaces\n    .replace(/\\s/g, '') // anything `T::<type>` to end up as `<type>`\n    .replace(/(T|Self)::/g, '') // replace `<T as Trait>::` (whitespaces were removed above)\n    .replace(/<(T|Self)asTrait>::/g, '') // replace `<T as something::Trait>::` (whitespaces were removed above)\n    .replace(/<Tas[a-z]+::Trait>::/g, '') // replace <Lookup as StaticLookup>\n    .replace(/<LookupasStaticLookup>/g, 'Lookup') // replace `<...>::Type`\n    .replace(/::Type/g, '');\n  };\n} // remove wrapping values, i.e. Box<Proposal> -> Proposal\n\nexport function removeWrap(_check) {\n  const check = `${_check}<`;\n  return value => {\n    let index = 0;\n\n    while (index !== -1) {\n      index = value.indexOf(check);\n\n      if (index !== -1) {\n        const start = index + check.length;\n        const end = findClosing(value, start);\n        value = `${value.substr(0, index)}${value.substr(start, end - start)}${value.substr(end + 1)}`;\n      }\n    }\n\n    return value;\n  };\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function sanitize(value, options) {\n  return mappings.reduce((result, fn) => {\n    return fn(result, options);\n  }, value.toString()).trim();\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/create/sanitize.mjs"],"names":["ALLOWED_BOXES","BOX_PRECEDING","mappings","alias","cleanupCompact","removeTraits","removePairOf","removeWrap","removeGenerics","flattenSingleTuple","removeColons","findClosing","value","start","depth","index","length","Error","src","dest","withChecks","reduce","replace","RegExp","map","box","join","includes","end","substr","allowNamespaces","indexOf","find","type","_check","check","sanitize","options","result","fn","toString","trim"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ALLOWED_BOXES = ['BTreeMap', 'BTreeSet', 'Compact', 'DoNotConstruct', 'HashMap', 'Int', 'Linkage', 'Result', 'Option', 'UInt', 'Vec'];\nconst BOX_PRECEDING = ['<', '(', '[', '\"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple\n\nconst mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport\nalias(['<T::InherentOfflineReport as InherentOfflineReport>::Inherent'], 'InherentOfflineReport', false), alias(['VecDeque<'], 'Vec<', false), // <T::Balance as HasCompact>\ncleanupCompact(), // Remove all the trait prefixes\nremoveTraits(), // remove PairOf<T> -> (T, T)\nremovePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`\nremoveWrap('Box'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`\nremoveGenerics(), // alias String -> Text (compat with jsonrpc methods)\nalias(['String'], 'Text'), // alias Vec<u8> -> Bytes\nalias(['Vec<u8>', '&\\\\[u8\\\\]'], 'Bytes'), // alias RawAddress -> Address\nalias(['RawAddress'], 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime\nalias(['Lookup::Source'], 'LookupSource'), alias(['Lookup::Target'], 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec\nalias(['exec::StorageKey'], 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`\nflattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal\nremoveColons()]; // given a starting index, find the closing >\n\nexport function findClosing(value, start) {\n  let depth = 0;\n\n  for (let index = start; index < value.length; index++) {\n    if (value[index] === '>') {\n      if (!depth) {\n        return index;\n      }\n\n      depth--;\n    } else if (value[index] === '<') {\n      depth++;\n    }\n  }\n\n  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);\n}\nexport function alias(src, dest, withChecks = true) {\n  return value => {\n    return src.reduce((value, src) => {\n      return value.replace(new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\\\${box}${src}`).join('|')})`, 'g'), src => withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest);\n    }, value);\n  };\n}\nexport function cleanupCompact() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] !== '<') {\n        continue;\n      }\n\n      const end = findClosing(value, index + 1) - 14;\n\n      if (value.substr(end, 14) === ' as HasCompact') {\n        value = `Compact<${value.substr(index + 1, end - index - 1)}>`;\n      }\n    }\n\n    return value;\n  };\n}\nexport function flattenSingleTuple() {\n  return value => {\n    return value.replace(/\\(([^,]+)\\)/, '$1');\n  };\n}\nexport function removeColons() {\n  return (value, {\n    allowNamespaces\n  } = {}) => {\n    let index = 0;\n\n    while (index !== -1) {\n      index = value.indexOf('::');\n\n      if (index === 0) {\n        value = value.substr(2);\n      } else if (index !== -1) {\n        if (allowNamespaces) {\n          return value;\n        }\n\n        let start = index;\n\n        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {\n          start--;\n        }\n\n        value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;\n      }\n    }\n\n    return value;\n  };\n}\nexport function removeGenerics() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        // check against the allowed wrappers, be it Vec<..>, Option<...> ...\n        const box = ALLOWED_BOXES.find(box => {\n          const start = index - box.length;\n          return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>\n          start === 0 || BOX_PRECEDING.includes(value[start - 1]));\n        }); // we have not found anything, unwrap generic innards\n\n        if (!box) {\n          const end = findClosing(value, index + 1);\n          value = `${value.substr(0, index)}${value.substr(end + 1)}`;\n        }\n      }\n    }\n\n    return value;\n  };\n} // remove the PairOf wrappers\n\nexport function removePairOf() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value.substr(index, 7) === 'PairOf<') {\n        const start = index + 7;\n        const end = findClosing(value, start);\n        const type = value.substr(start, end - start);\n        value = `${value.substr(0, index)}(${type},${type})${value.substr(end + 1)}`;\n      }\n    }\n\n    return value;\n  };\n} // remove the type traits\n\nexport function removeTraits() {\n  return value => {\n    return value // remove all whitespaces\n    .replace(/\\s/g, '') // anything `T::<type>` to end up as `<type>`\n    .replace(/(T|Self)::/g, '') // replace `<T as Trait>::` (whitespaces were removed above)\n    .replace(/<(T|Self)asTrait>::/g, '') // replace `<T as something::Trait>::` (whitespaces were removed above)\n    .replace(/<Tas[a-z]+::Trait>::/g, '') // replace <Lookup as StaticLookup>\n    .replace(/<LookupasStaticLookup>/g, 'Lookup') // replace `<...>::Type`\n    .replace(/::Type/g, '');\n  };\n} // remove wrapping values, i.e. Box<Proposal> -> Proposal\n\nexport function removeWrap(_check) {\n  const check = `${_check}<`;\n  return value => {\n    let index = 0;\n\n    while (index !== -1) {\n      index = value.indexOf(check);\n\n      if (index !== -1) {\n        const start = index + check.length;\n        const end = findClosing(value, start);\n        value = `${value.substr(0, index)}${value.substr(start, end - start)}${value.substr(end + 1)}`;\n      }\n    }\n\n    return value;\n  };\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function sanitize(value, options) {\n  return mappings.reduce((result, fn) => {\n    return fn(result, options);\n  }, value.toString()).trim();\n}"]},"metadata":{},"sourceType":"module"}