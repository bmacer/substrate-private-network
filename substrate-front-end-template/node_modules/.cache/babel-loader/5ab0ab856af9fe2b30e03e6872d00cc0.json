{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name u8aFixLength\n * @summary Shifts a Uint8Array to a specific bitLength\n * @description\n * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aFixLength } from '@polkadot/util';\n *\n * u8aFixLength('0x12') // => 0x12\n * u8aFixLength('0x12', 16) // => 0x0012\n * u8aFixLength('0x1234', 8) // => 0x12\n * ```\n */\nexport function u8aFixLength(value, bitLength = -1, atStart = false) {\n  const byteLength = Math.ceil(bitLength / 8);\n\n  if (bitLength === -1 || value.length === byteLength) {\n    return value;\n  } else if (value.length > byteLength) {\n    return value.subarray(0, byteLength);\n  }\n\n  const result = new Uint8Array(byteLength);\n\n  if (atStart) {\n    result.set(value, 0);\n  } else {\n    result.set(value, byteLength - value.length);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util/u8a/fixLength.mjs"],"names":["u8aFixLength","value","bitLength","atStart","byteLength","Math","ceil","length","subarray","result","Uint8Array","set"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,SAAS,GAAG,CAAC,CAA1C,EAA6CC,OAAO,GAAG,KAAvD,EAA8D;AACnE,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAAG,CAAtB,CAAnB;;AAEA,MAAIA,SAAS,KAAK,CAAC,CAAf,IAAoBD,KAAK,CAACM,MAAN,KAAiBH,UAAzC,EAAqD;AACnD,WAAOH,KAAP;AACD,GAFD,MAEO,IAAIA,KAAK,CAACM,MAAN,GAAeH,UAAnB,EAA+B;AACpC,WAAOH,KAAK,CAACO,QAAN,CAAe,CAAf,EAAkBJ,UAAlB,CAAP;AACD;;AAED,QAAMK,MAAM,GAAG,IAAIC,UAAJ,CAAeN,UAAf,CAAf;;AAEA,MAAID,OAAJ,EAAa;AACXM,IAAAA,MAAM,CAACE,GAAP,CAAWV,KAAX,EAAkB,CAAlB;AACD,GAFD,MAEO;AACLQ,IAAAA,MAAM,CAACE,GAAP,CAAWV,KAAX,EAAkBG,UAAU,GAAGH,KAAK,CAACM,MAArC;AACD;;AAED,SAAOE,MAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name u8aFixLength\n * @summary Shifts a Uint8Array to a specific bitLength\n * @description\n * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aFixLength } from '@polkadot/util';\n *\n * u8aFixLength('0x12') // => 0x12\n * u8aFixLength('0x12', 16) // => 0x0012\n * u8aFixLength('0x1234', 8) // => 0x12\n * ```\n */\nexport function u8aFixLength(value, bitLength = -1, atStart = false) {\n  const byteLength = Math.ceil(bitLength / 8);\n\n  if (bitLength === -1 || value.length === byteLength) {\n    return value;\n  } else if (value.length > byteLength) {\n    return value.subarray(0, byteLength);\n  }\n\n  const result = new Uint8Array(byteLength);\n\n  if (atStart) {\n    result.set(value, 0);\n  } else {\n    result.set(value, byteLength - value.length);\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}