{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isReady = isReady;\nexports.waitReady = waitReady;\nexports.twox = exports.sha512 = exports.scrypt = exports.pbkdf2 = exports.keccak256 = exports.blake2b = exports.vrfVerify = exports.vrfSign = exports.sr25519Verify = exports.sr25519Sign = exports.sr25519KeypairFromSeed = exports.sr25519DerivePublicSoft = exports.sr25519DeriveKeypairSoft = exports.sr25519DeriveKeypairHard = exports.ed25519Verify = exports.ed25519Sign = exports.ed25519KeypairFromSeed = exports.bip39Validate = exports.bip39ToSeed = exports.bip39ToMiniSecret = exports.bip39ToEntropy = exports.bip39Generate = void 0;\n\nrequire(\"./detectPackage\");\n\nvar _wasmCryptoAsmjs = require(\"@polkadot/wasm-crypto-asmjs\");\n\nvar _wasmCryptoWasm = require(\"@polkadot/wasm-crypto-wasm\");\n\nvar _bridge = require(\"./bridge\");\n\nvar imports = _interopRequireWildcard(require(\"./imports\")); // Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst wasmPromise = (0, _bridge.initWasm)(_wasmCryptoWasm.wasmBytes, _wasmCryptoAsmjs.asmJsInit, imports).catch(() => null);\nconst bip39Generate = (0, _bridge.withWasm)(wasm => words => {\n  wasm.ext_bip39_generate(8, words);\n  return (0, _bridge.resultString)();\n});\nexports.bip39Generate = bip39Generate;\nconst bip39ToEntropy = (0, _bridge.withWasm)(wasm => phrase => {\n  const [ptr0, len0] = (0, _bridge.allocString)(phrase);\n  wasm.ext_bip39_to_entropy(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.bip39ToEntropy = bip39ToEntropy;\nconst bip39ToMiniSecret = (0, _bridge.withWasm)(wasm => (phrase, password) => {\n  const [ptr0, len0] = (0, _bridge.allocString)(phrase);\n  const [ptr1, len1] = (0, _bridge.allocString)(password);\n  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.bip39ToMiniSecret = bip39ToMiniSecret;\nconst bip39ToSeed = (0, _bridge.withWasm)(wasm => (phrase, password) => {\n  const [ptr0, len0] = (0, _bridge.allocString)(phrase);\n  const [ptr1, len1] = (0, _bridge.allocString)(password);\n  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.bip39ToSeed = bip39ToSeed;\nconst bip39Validate = (0, _bridge.withWasm)(wasm => phrase => {\n  const [ptr0, len0] = (0, _bridge.allocString)(phrase);\n  const ret = wasm.ext_bip39_validate(ptr0, len0);\n  return ret !== 0;\n});\nexports.bip39Validate = bip39Validate;\nconst ed25519KeypairFromSeed = (0, _bridge.withWasm)(wasm => seed => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(seed);\n  wasm.ext_ed_from_seed(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.ed25519KeypairFromSeed = ed25519KeypairFromSeed;\nconst ed25519Sign = (0, _bridge.withWasm)(wasm => (pubkey, seckey, message) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(seckey);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(message);\n  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return (0, _bridge.resultU8a)();\n});\nexports.ed25519Sign = ed25519Sign;\nconst ed25519Verify = (0, _bridge.withWasm)(wasm => (signature, message, pubkey) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(signature);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(message);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(pubkey);\n  const ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nexports.ed25519Verify = ed25519Verify;\nconst sr25519DeriveKeypairHard = (0, _bridge.withWasm)(wasm => (pair, cc) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pair);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);\n  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519DeriveKeypairHard = sr25519DeriveKeypairHard;\nconst sr25519DeriveKeypairSoft = (0, _bridge.withWasm)(wasm => (pair, cc) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pair);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);\n  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519DeriveKeypairSoft = sr25519DeriveKeypairSoft;\nconst sr25519DerivePublicSoft = (0, _bridge.withWasm)(wasm => (pubkey, cc) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);\n  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519DerivePublicSoft = sr25519DerivePublicSoft;\nconst sr25519KeypairFromSeed = (0, _bridge.withWasm)(wasm => seed => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(seed);\n  wasm.ext_sr_from_seed(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519KeypairFromSeed = sr25519KeypairFromSeed;\nconst sr25519Sign = (0, _bridge.withWasm)(wasm => (pubkey, secret, message) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(secret);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(message);\n  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519Sign = sr25519Sign;\nconst sr25519Verify = (0, _bridge.withWasm)(wasm => (signature, message, pubkey) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(signature);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(message);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(pubkey);\n  const ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nexports.sr25519Verify = sr25519Verify;\nconst vrfSign = (0, _bridge.withWasm)(wasm => (secret, context, message, extra) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(secret);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(context);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(message);\n  const [ptr3, len3] = (0, _bridge.allocU8a)(extra);\n  wasm.ext_vrf_sign(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n  return (0, _bridge.resultU8a)();\n});\nexports.vrfSign = vrfSign;\nconst vrfVerify = (0, _bridge.withWasm)(wasm => (pubkey, context, message, extra, outAndProof) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(context);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(message);\n  const [ptr3, len3] = (0, _bridge.allocU8a)(extra);\n  const [ptr4, len4] = (0, _bridge.allocU8a)(outAndProof);\n  const ret = wasm.ext_vrf_verify(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n  return ret !== 0;\n});\nexports.vrfVerify = vrfVerify;\nconst blake2b = (0, _bridge.withWasm)(wasm => (data, key, size) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(key);\n  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);\n  return (0, _bridge.resultU8a)();\n});\nexports.blake2b = blake2b;\nconst keccak256 = (0, _bridge.withWasm)(wasm => data => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  wasm.ext_keccak256(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.keccak256 = keccak256;\nconst pbkdf2 = (0, _bridge.withWasm)(wasm => (data, salt, rounds) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(salt);\n  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);\n  return (0, _bridge.resultU8a)();\n});\nexports.pbkdf2 = pbkdf2;\nconst scrypt = (0, _bridge.withWasm)(wasm => (password, salt, log2n, r, p) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(password);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(salt);\n  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);\n  return (0, _bridge.resultU8a)();\n});\nexports.scrypt = scrypt;\nconst sha512 = (0, _bridge.withWasm)(wasm => data => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  wasm.ext_sha512(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.sha512 = sha512;\nconst twox = (0, _bridge.withWasm)(wasm => (data, rounds) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  wasm.ext_twox(8, ptr0, len0, rounds);\n  return (0, _bridge.resultU8a)();\n});\nexports.twox = twox;\n\nfunction isReady() {\n  return !!(0, _bridge.getWasm)();\n}\n\nfunction waitReady() {\n  return wasmPromise.then(() => isReady());\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/wasm-crypto/index.js"],"names":["_interopRequireWildcard","require","Object","defineProperty","exports","value","isReady","waitReady","twox","sha512","scrypt","pbkdf2","keccak256","blake2b","vrfVerify","vrfSign","sr25519Verify","sr25519Sign","sr25519KeypairFromSeed","sr25519DerivePublicSoft","sr25519DeriveKeypairSoft","sr25519DeriveKeypairHard","ed25519Verify","ed25519Sign","ed25519KeypairFromSeed","bip39Validate","bip39ToSeed","bip39ToMiniSecret","bip39ToEntropy","bip39Generate","_wasmCryptoAsmjs","_wasmCryptoWasm","_bridge","imports","wasmPromise","initWasm","wasmBytes","asmJsInit","catch","withWasm","wasm","words","ext_bip39_generate","resultString","phrase","ptr0","len0","allocString","ext_bip39_to_entropy","resultU8a","password","ptr1","len1","ext_bip39_to_mini_secret","ext_bip39_to_seed","ret","ext_bip39_validate","seed","allocU8a","ext_ed_from_seed","pubkey","seckey","message","ptr2","len2","ext_ed_sign","signature","ext_ed_verify","pair","cc","ext_sr_derive_keypair_hard","ext_sr_derive_keypair_soft","ext_sr_derive_public_soft","ext_sr_from_seed","secret","ext_sr_sign","ext_sr_verify","context","extra","ptr3","len3","ext_vrf_sign","outAndProof","ptr4","len4","ext_vrf_verify","data","key","size","ext_blake2b","ext_keccak256","salt","rounds","ext_pbkdf2","log2n","r","p","ext_scrypt","ext_sha512","ext_twox","getWasm","then"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isReady = isReady;\nexports.waitReady = waitReady;\nexports.twox = exports.sha512 = exports.scrypt = exports.pbkdf2 = exports.keccak256 = exports.blake2b = exports.vrfVerify = exports.vrfSign = exports.sr25519Verify = exports.sr25519Sign = exports.sr25519KeypairFromSeed = exports.sr25519DerivePublicSoft = exports.sr25519DeriveKeypairSoft = exports.sr25519DeriveKeypairHard = exports.ed25519Verify = exports.ed25519Sign = exports.ed25519KeypairFromSeed = exports.bip39Validate = exports.bip39ToSeed = exports.bip39ToMiniSecret = exports.bip39ToEntropy = exports.bip39Generate = void 0;\n\nrequire(\"./detectPackage\");\n\nvar _wasmCryptoAsmjs = require(\"@polkadot/wasm-crypto-asmjs\");\n\nvar _wasmCryptoWasm = require(\"@polkadot/wasm-crypto-wasm\");\n\nvar _bridge = require(\"./bridge\");\n\nvar imports = _interopRequireWildcard(require(\"./imports\"));\n\n// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst wasmPromise = (0, _bridge.initWasm)(_wasmCryptoWasm.wasmBytes, _wasmCryptoAsmjs.asmJsInit, imports).catch(() => null);\nconst bip39Generate = (0, _bridge.withWasm)(wasm => words => {\n  wasm.ext_bip39_generate(8, words);\n  return (0, _bridge.resultString)();\n});\nexports.bip39Generate = bip39Generate;\nconst bip39ToEntropy = (0, _bridge.withWasm)(wasm => phrase => {\n  const [ptr0, len0] = (0, _bridge.allocString)(phrase);\n  wasm.ext_bip39_to_entropy(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.bip39ToEntropy = bip39ToEntropy;\nconst bip39ToMiniSecret = (0, _bridge.withWasm)(wasm => (phrase, password) => {\n  const [ptr0, len0] = (0, _bridge.allocString)(phrase);\n  const [ptr1, len1] = (0, _bridge.allocString)(password);\n  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.bip39ToMiniSecret = bip39ToMiniSecret;\nconst bip39ToSeed = (0, _bridge.withWasm)(wasm => (phrase, password) => {\n  const [ptr0, len0] = (0, _bridge.allocString)(phrase);\n  const [ptr1, len1] = (0, _bridge.allocString)(password);\n  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.bip39ToSeed = bip39ToSeed;\nconst bip39Validate = (0, _bridge.withWasm)(wasm => phrase => {\n  const [ptr0, len0] = (0, _bridge.allocString)(phrase);\n  const ret = wasm.ext_bip39_validate(ptr0, len0);\n  return ret !== 0;\n});\nexports.bip39Validate = bip39Validate;\nconst ed25519KeypairFromSeed = (0, _bridge.withWasm)(wasm => seed => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(seed);\n  wasm.ext_ed_from_seed(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.ed25519KeypairFromSeed = ed25519KeypairFromSeed;\nconst ed25519Sign = (0, _bridge.withWasm)(wasm => (pubkey, seckey, message) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(seckey);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(message);\n  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return (0, _bridge.resultU8a)();\n});\nexports.ed25519Sign = ed25519Sign;\nconst ed25519Verify = (0, _bridge.withWasm)(wasm => (signature, message, pubkey) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(signature);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(message);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(pubkey);\n  const ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nexports.ed25519Verify = ed25519Verify;\nconst sr25519DeriveKeypairHard = (0, _bridge.withWasm)(wasm => (pair, cc) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pair);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);\n  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519DeriveKeypairHard = sr25519DeriveKeypairHard;\nconst sr25519DeriveKeypairSoft = (0, _bridge.withWasm)(wasm => (pair, cc) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pair);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);\n  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519DeriveKeypairSoft = sr25519DeriveKeypairSoft;\nconst sr25519DerivePublicSoft = (0, _bridge.withWasm)(wasm => (pubkey, cc) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);\n  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519DerivePublicSoft = sr25519DerivePublicSoft;\nconst sr25519KeypairFromSeed = (0, _bridge.withWasm)(wasm => seed => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(seed);\n  wasm.ext_sr_from_seed(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519KeypairFromSeed = sr25519KeypairFromSeed;\nconst sr25519Sign = (0, _bridge.withWasm)(wasm => (pubkey, secret, message) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(secret);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(message);\n  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return (0, _bridge.resultU8a)();\n});\nexports.sr25519Sign = sr25519Sign;\nconst sr25519Verify = (0, _bridge.withWasm)(wasm => (signature, message, pubkey) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(signature);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(message);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(pubkey);\n  const ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nexports.sr25519Verify = sr25519Verify;\nconst vrfSign = (0, _bridge.withWasm)(wasm => (secret, context, message, extra) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(secret);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(context);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(message);\n  const [ptr3, len3] = (0, _bridge.allocU8a)(extra);\n  wasm.ext_vrf_sign(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n  return (0, _bridge.resultU8a)();\n});\nexports.vrfSign = vrfSign;\nconst vrfVerify = (0, _bridge.withWasm)(wasm => (pubkey, context, message, extra, outAndProof) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(context);\n  const [ptr2, len2] = (0, _bridge.allocU8a)(message);\n  const [ptr3, len3] = (0, _bridge.allocU8a)(extra);\n  const [ptr4, len4] = (0, _bridge.allocU8a)(outAndProof);\n  const ret = wasm.ext_vrf_verify(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n  return ret !== 0;\n});\nexports.vrfVerify = vrfVerify;\nconst blake2b = (0, _bridge.withWasm)(wasm => (data, key, size) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(key);\n  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);\n  return (0, _bridge.resultU8a)();\n});\nexports.blake2b = blake2b;\nconst keccak256 = (0, _bridge.withWasm)(wasm => data => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  wasm.ext_keccak256(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.keccak256 = keccak256;\nconst pbkdf2 = (0, _bridge.withWasm)(wasm => (data, salt, rounds) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(salt);\n  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);\n  return (0, _bridge.resultU8a)();\n});\nexports.pbkdf2 = pbkdf2;\nconst scrypt = (0, _bridge.withWasm)(wasm => (password, salt, log2n, r, p) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(password);\n  const [ptr1, len1] = (0, _bridge.allocU8a)(salt);\n  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);\n  return (0, _bridge.resultU8a)();\n});\nexports.scrypt = scrypt;\nconst sha512 = (0, _bridge.withWasm)(wasm => data => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  wasm.ext_sha512(8, ptr0, len0);\n  return (0, _bridge.resultU8a)();\n});\nexports.sha512 = sha512;\nconst twox = (0, _bridge.withWasm)(wasm => (data, rounds) => {\n  const [ptr0, len0] = (0, _bridge.allocU8a)(data);\n  wasm.ext_twox(8, ptr0, len0, rounds);\n  return (0, _bridge.resultU8a)();\n});\nexports.twox = twox;\n\nfunction isReady() {\n  return !!(0, _bridge.getWasm)();\n}\n\nfunction waitReady() {\n  return wasmPromise.then(() => isReady());\n}"]},"metadata":{},"sourceType":"script"}