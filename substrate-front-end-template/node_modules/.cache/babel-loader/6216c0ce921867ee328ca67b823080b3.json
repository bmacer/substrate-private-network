{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\n\nfunction createDerive(api, [[hasBabe, epochDuration, sessionsPerEra], {\n  activeEra,\n  activeEraStart,\n  currentEra,\n  currentIndex,\n  validatorCount\n}]) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(epochDuration)),\n    isEpoch: hasBabe,\n    sessionLength: epochDuration,\n    sessionsPerEra,\n    validatorCount\n  };\n}\n\nfunction queryAura(api) {\n  return api.derive.session.indexes().pipe(map(indexes => {\n    var _api$consts$staking;\n\n    return createDerive(api, [[false, api.registry.createType('u64', 1), // we may have aura without staking (permissioned)\n    ((_api$consts$staking = api.consts.staking) === null || _api$consts$staking === void 0 ? void 0 : _api$consts$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1)], indexes]);\n  }));\n}\n\nfunction queryBabe(api) {\n  return api.derive.session.indexes().pipe(map(indexes => {\n    var _api$consts$staking2;\n\n    return createDerive(api, [[true, api.consts.babe.epochDuration, // we may have babe without staking (permissioned)\n    ((_api$consts$staking2 = api.consts.staking) === null || _api$consts$staking2 === void 0 ? void 0 : _api$consts$staking2.sessionsPerEra) || api.registry.createType('SessionIndex', 1)], indexes]);\n  }));\n}\n/**\n * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras\n */\n\n\nexport function info(instanceId, api) {\n  return memo(instanceId, () => api.consts.babe ? queryBabe(api) : queryAura(api));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/session/info.mjs"],"names":["map","memo","createDerive","api","hasBabe","epochDuration","sessionsPerEra","activeEra","activeEraStart","currentEra","currentIndex","validatorCount","eraLength","registry","createType","mul","isEpoch","sessionLength","queryAura","derive","session","indexes","pipe","_api$consts$staking","consts","staking","queryBabe","_api$consts$staking2","babe","info","instanceId"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,QAAoB,4BAApB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B,CAAC,CAACC,OAAD,EAAUC,aAAV,EAAyBC,cAAzB,CAAD,EAA2C;AACpEC,EAAAA,SADoE;AAEpEC,EAAAA,cAFoE;AAGpEC,EAAAA,UAHoE;AAIpEC,EAAAA,YAJoE;AAKpEC,EAAAA;AALoE,CAA3C,CAA3B,EAMI;AACF,SAAO;AACLJ,IAAAA,SADK;AAELC,IAAAA,cAFK;AAGLC,IAAAA,UAHK;AAILC,IAAAA,YAJK;AAKLE,IAAAA,SAAS,EAAET,GAAG,CAACU,QAAJ,CAAaC,UAAb,CAAwB,aAAxB,EAAuCR,cAAc,CAACS,GAAf,CAAmBV,aAAnB,CAAvC,CALN;AAMLW,IAAAA,OAAO,EAAEZ,OANJ;AAOLa,IAAAA,aAAa,EAAEZ,aAPV;AAQLC,IAAAA,cARK;AASLK,IAAAA;AATK,GAAP;AAWD;;AAED,SAASO,SAAT,CAAmBf,GAAnB,EAAwB;AACtB,SAAOA,GAAG,CAACgB,MAAJ,CAAWC,OAAX,CAAmBC,OAAnB,GAA6BC,IAA7B,CAAkCtB,GAAG,CAACqB,OAAO,IAAI;AACtD,QAAIE,mBAAJ;;AAEA,WAAOrB,YAAY,CAACC,GAAD,EAAM,CAAC,CAAC,KAAD,EAAQA,GAAG,CAACU,QAAJ,CAAaC,UAAb,CAAwB,KAAxB,EAA+B,CAA/B,CAAR,EAA2C;AACrE,KAAC,CAACS,mBAAmB,GAAGpB,GAAG,CAACqB,MAAJ,CAAWC,OAAlC,MAA+C,IAA/C,IAAuDF,mBAAmB,KAAK,KAAK,CAApF,GAAwF,KAAK,CAA7F,GAAiGA,mBAAmB,CAACjB,cAAtH,KAAyIH,GAAG,CAACU,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwC,CAAxC,CAD/G,CAAD,EAC6JO,OAD7J,CAAN,CAAnB;AAED,GAL2C,CAArC,CAAP;AAMD;;AAED,SAASK,SAAT,CAAmBvB,GAAnB,EAAwB;AACtB,SAAOA,GAAG,CAACgB,MAAJ,CAAWC,OAAX,CAAmBC,OAAnB,GAA6BC,IAA7B,CAAkCtB,GAAG,CAACqB,OAAO,IAAI;AACtD,QAAIM,oBAAJ;;AAEA,WAAOzB,YAAY,CAACC,GAAD,EAAM,CAAC,CAAC,IAAD,EAAOA,GAAG,CAACqB,MAAJ,CAAWI,IAAX,CAAgBvB,aAAvB,EAAsC;AAChE,KAAC,CAACsB,oBAAoB,GAAGxB,GAAG,CAACqB,MAAJ,CAAWC,OAAnC,MAAgD,IAAhD,IAAwDE,oBAAoB,KAAK,KAAK,CAAtF,GAA0F,KAAK,CAA/F,GAAmGA,oBAAoB,CAACrB,cAAzH,KAA4IH,GAAG,CAACU,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwC,CAAxC,CADlH,CAAD,EACgKO,OADhK,CAAN,CAAnB;AAED,GAL2C,CAArC,CAAP;AAMD;AACD;AACA;AACA;;;AAGA,OAAO,SAASQ,IAAT,CAAcC,UAAd,EAA0B3B,GAA1B,EAA+B;AACpC,SAAOF,IAAI,CAAC6B,UAAD,EAAa,MAAM3B,GAAG,CAACqB,MAAJ,CAAWI,IAAX,GAAkBF,SAAS,CAACvB,GAAD,CAA3B,GAAmCe,SAAS,CAACf,GAAD,CAA/D,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\n\nfunction createDerive(api, [[hasBabe, epochDuration, sessionsPerEra], {\n  activeEra,\n  activeEraStart,\n  currentEra,\n  currentIndex,\n  validatorCount\n}]) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(epochDuration)),\n    isEpoch: hasBabe,\n    sessionLength: epochDuration,\n    sessionsPerEra,\n    validatorCount\n  };\n}\n\nfunction queryAura(api) {\n  return api.derive.session.indexes().pipe(map(indexes => {\n    var _api$consts$staking;\n\n    return createDerive(api, [[false, api.registry.createType('u64', 1), // we may have aura without staking (permissioned)\n    ((_api$consts$staking = api.consts.staking) === null || _api$consts$staking === void 0 ? void 0 : _api$consts$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1)], indexes]);\n  }));\n}\n\nfunction queryBabe(api) {\n  return api.derive.session.indexes().pipe(map(indexes => {\n    var _api$consts$staking2;\n\n    return createDerive(api, [[true, api.consts.babe.epochDuration, // we may have babe without staking (permissioned)\n    ((_api$consts$staking2 = api.consts.staking) === null || _api$consts$staking2 === void 0 ? void 0 : _api$consts$staking2.sessionsPerEra) || api.registry.createType('SessionIndex', 1)], indexes]);\n  }));\n}\n/**\n * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras\n */\n\n\nexport function info(instanceId, api) {\n  return memo(instanceId, () => api.consts.babe ? queryBabe(api) : queryAura(api));\n}"]},"metadata":{},"sourceType":"module"}