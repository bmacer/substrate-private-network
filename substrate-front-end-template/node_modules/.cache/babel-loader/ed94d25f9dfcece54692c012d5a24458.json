{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { compactFromU8a, compactToU8a, isBigInt, isBn, isNumber, isString } from '@polkadot/util';\nimport { typeToConstructor } from \"./utils/index.mjs\";\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\n\nvar _Type = _classPrivateFieldLooseKey(\"Type\");\n\nvar _raw = _classPrivateFieldLooseKey(\"raw\");\n\nexport class Compact {\n  constructor(registry, Type, value = 0) {\n    this.registry = void 0;\n    Object.defineProperty(this, _Type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _Type)[_Type] = typeToConstructor(registry, Type);\n    _classPrivateFieldLooseBase(this, _raw)[_raw] = Compact.decodeCompact(registry, _classPrivateFieldLooseBase(this, _Type)[_Type], value);\n  }\n\n  static with(Type) {\n    return class extends Compact {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n  /** @internal */\n\n\n  static decodeCompact(registry, Type, value) {\n    if (value instanceof Compact) {\n      return new Type(registry, _classPrivateFieldLooseBase(value, _raw)[_raw]);\n    } else if (isString(value) || isNumber(value) || isBn(value) || isBigInt(value)) {\n      return new Type(registry, value);\n    }\n\n    const [, _value] = compactFromU8a(value, new Type(registry, 0).bitLength());\n    return new Type(registry, _value);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].isEmpty;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].bitLength();\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].eq(other instanceof Compact ? _classPrivateFieldLooseBase(other, _raw)[_raw] : other);\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  /**\n   * @description Returns the BN representation of the number\n   */\n\n\n  toBn() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toBn();\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toJSON();\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n\n\n  toNumber() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Compact<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _Type)[_Type]) || _classPrivateFieldLooseBase(this, _raw)[_raw].toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return compactToU8a(_classPrivateFieldLooseBase(this, _raw)[_raw].toBn());\n  }\n  /**\n   * @description Returns the embedded [[UInt]] or [[Moment]] value\n   */\n\n\n  unwrap() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw];\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/codec/Compact.mjs"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","compactFromU8a","compactToU8a","isBigInt","isBn","isNumber","isString","typeToConstructor","_Type","_raw","Compact","constructor","registry","Type","value","Object","defineProperty","writable","decodeCompact","with","_value","bitLength","encodedLength","toU8a","length","hash","isEmpty","eq","other","toBigInt","BigInt","toString","toBn","toHex","isLe","toHuman","isExtended","toJSON","toNumber","toRawType","getClassName","isBare","unwrap"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactFromU8a, compactToU8a, isBigInt, isBn, isNumber, isString } from '@polkadot/util';\nimport { typeToConstructor } from \"./utils/index.mjs\";\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\n\nvar _Type = _classPrivateFieldLooseKey(\"Type\");\n\nvar _raw = _classPrivateFieldLooseKey(\"raw\");\n\nexport class Compact {\n  constructor(registry, Type, value = 0) {\n    this.registry = void 0;\n    Object.defineProperty(this, _Type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _Type)[_Type] = typeToConstructor(registry, Type);\n    _classPrivateFieldLooseBase(this, _raw)[_raw] = Compact.decodeCompact(registry, _classPrivateFieldLooseBase(this, _Type)[_Type], value);\n  }\n\n  static with(Type) {\n    return class extends Compact {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n  /** @internal */\n\n\n  static decodeCompact(registry, Type, value) {\n    if (value instanceof Compact) {\n      return new Type(registry, _classPrivateFieldLooseBase(value, _raw)[_raw]);\n    } else if (isString(value) || isNumber(value) || isBn(value) || isBigInt(value)) {\n      return new Type(registry, value);\n    }\n\n    const [, _value] = compactFromU8a(value, new Type(registry, 0).bitLength());\n    return new Type(registry, _value);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].isEmpty;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].bitLength();\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].eq(other instanceof Compact ? _classPrivateFieldLooseBase(other, _raw)[_raw] : other);\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  /**\n   * @description Returns the BN representation of the number\n   */\n\n\n  toBn() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toBn();\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toJSON();\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n\n\n  toNumber() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Compact<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _Type)[_Type]) || _classPrivateFieldLooseBase(this, _raw)[_raw].toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw].toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return compactToU8a(_classPrivateFieldLooseBase(this, _raw)[_raw].toBn());\n  }\n  /**\n   * @description Returns the embedded [[UInt]] or [[Moment]] value\n   */\n\n\n  unwrap() {\n    return _classPrivateFieldLooseBase(this, _raw)[_raw];\n  }\n\n}"]},"metadata":{},"sourceType":"module"}