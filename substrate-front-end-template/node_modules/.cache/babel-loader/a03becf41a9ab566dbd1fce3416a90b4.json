{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\nexport function _stakerExposure(instanceId, api) {\n  return memo(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    })));\n  });\n}\nexport function stakerExposure(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposure(accountId, eras, withActive))));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/stakerExposure.mjs"],"names":["map","switchMap","memo","_stakerExposure","instanceId","api","accountId","eras","withActive","stakerId","registry","createType","toString","derive","staking","_erasExposure","pipe","exposures","era","nominators","allNominators","validators","allValidators","isValidator","nominating","forEach","validatorId","isEmpty","Object","keys","length","stakerExposure","erasHistoric"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,SAAd,QAA+B,4BAA/B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAO,SAASC,eAAT,CAAyBC,UAAzB,EAAqCC,GAArC,EAA0C;AAC/C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYC,IAAZ,EAAkBC,UAAlB,KAAiC;AACvD,UAAMC,QAAQ,GAAGJ,GAAG,CAACK,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCL,SAArC,EAAgDM,QAAhD,EAAjB;AACA,WAAOP,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBC,aAAnB,CAAiCR,IAAjC,EAAuCC,UAAvC,EAAmDQ,IAAnD,CAAwDhB,GAAG,CAACiB,SAAS,IAAIA,SAAS,CAACjB,GAAV,CAAc,CAAC;AAC7FkB,MAAAA,GAD6F;AAE7FC,MAAAA,UAAU,EAAEC,aAFiF;AAG7FC,MAAAA,UAAU,EAAEC;AAHiF,KAAD,KAIxF;AACJ,YAAMC,WAAW,GAAG,CAAC,CAACD,aAAa,CAACb,QAAD,CAAnC;AACA,YAAMY,UAAU,GAAG,EAAnB;AACA,YAAMG,UAAU,GAAGJ,aAAa,CAACX,QAAD,CAAb,IAA2B,EAA9C;;AAEA,UAAIc,WAAJ,EAAiB;AACfF,QAAAA,UAAU,CAACZ,QAAD,CAAV,GAAuBa,aAAa,CAACb,QAAD,CAApC;AACD,OAFD,MAEO,IAAIe,UAAJ,EAAgB;AACrBA,QAAAA,UAAU,CAACC,OAAX,CAAmB,CAAC;AAClBC,UAAAA;AADkB,SAAD,KAEb;AACJL,UAAAA,UAAU,CAACK,WAAD,CAAV,GAA0BJ,aAAa,CAACI,WAAD,CAAvC;AACD,SAJD;AAKD;;AAED,aAAO;AACLR,QAAAA,GADK;AAELS,QAAAA,OAAO,EAAE,CAACC,MAAM,CAACC,IAAP,CAAYR,UAAZ,EAAwBS,MAF7B;AAGLP,QAAAA,WAHK;AAILC,QAAAA,UAJK;AAKLH,QAAAA;AALK,OAAP;AAOD,KA1B+E,CAAd,CAA3D,CAAP;AA2BD,GA7BU,CAAX;AA8BD;AACD,OAAO,SAASU,cAAT,CAAwB3B,UAAxB,EAAoCC,GAApC,EAAyC;AAC9C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYE,UAAU,GAAG,KAAzB,KAAmCH,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBkB,YAAnB,CAAgCxB,UAAhC,EAA4CQ,IAA5C,CAAiDf,SAAS,CAACM,IAAI,IAAIF,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBX,eAAnB,CAAmCG,SAAnC,EAA8CC,IAA9C,EAAoDC,UAApD,CAAT,CAA1D,CAAhD,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\nexport function _stakerExposure(instanceId, api) {\n  return memo(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    })));\n  });\n}\nexport function stakerExposure(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposure(accountId, eras, withActive))));\n}"]},"metadata":{},"sourceType":"module"}