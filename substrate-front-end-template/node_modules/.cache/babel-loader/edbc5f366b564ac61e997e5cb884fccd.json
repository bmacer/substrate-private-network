{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nexport function extractAuthor(digest, sessionValidators = []) {\n  const [citem] = digest.logs.filter(({\n    type\n  }) => type === 'Consensus');\n\n  if (citem) {\n    const [engine, data] = citem.asConsensus;\n    return engine.extractAuthor(data, sessionValidators);\n  } else {\n    const [pitem] = digest.logs.filter(({\n      type\n    }) => type === 'PreRuntime');\n\n    if (pitem) {\n      const [engine, data] = pitem.asPreRuntime;\n      return engine.extractAuthor(data, sessionValidators);\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/type/util.mjs"],"names":["extractAuthor","digest","sessionValidators","citem","logs","filter","type","engine","data","asConsensus","pitem","asPreRuntime","undefined"],"mappings":"AAAA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,iBAAiB,GAAG,EAAnD,EAAuD;AAC5D,QAAM,CAACC,KAAD,IAAUF,MAAM,CAACG,IAAP,CAAYC,MAAZ,CAAmB,CAAC;AAClCC,IAAAA;AADkC,GAAD,KAE7BA,IAAI,KAAK,WAFC,CAAhB;;AAIA,MAAIH,KAAJ,EAAW;AACT,UAAM,CAACI,MAAD,EAASC,IAAT,IAAiBL,KAAK,CAACM,WAA7B;AACA,WAAOF,MAAM,CAACP,aAAP,CAAqBQ,IAArB,EAA2BN,iBAA3B,CAAP;AACD,GAHD,MAGO;AACL,UAAM,CAACQ,KAAD,IAAUT,MAAM,CAACG,IAAP,CAAYC,MAAZ,CAAmB,CAAC;AAClCC,MAAAA;AADkC,KAAD,KAE7BA,IAAI,KAAK,YAFC,CAAhB;;AAIA,QAAII,KAAJ,EAAW;AACT,YAAM,CAACH,MAAD,EAASC,IAAT,IAAiBE,KAAK,CAACC,YAA7B;AACA,aAAOJ,MAAM,CAACP,aAAP,CAAqBQ,IAArB,EAA2BN,iBAA3B,CAAP;AACD;AACF;;AAED,SAAOU,SAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nexport function extractAuthor(digest, sessionValidators = []) {\n  const [citem] = digest.logs.filter(({\n    type\n  }) => type === 'Consensus');\n\n  if (citem) {\n    const [engine, data] = citem.asConsensus;\n    return engine.extractAuthor(data, sessionValidators);\n  } else {\n    const [pitem] = digest.logs.filter(({\n      type\n    }) => type === 'PreRuntime');\n\n    if (pitem) {\n      const [engine, data] = pitem.asPreRuntime;\n      return engine.extractAuthor(data, sessionValidators);\n    }\n  }\n\n  return undefined;\n}"]},"metadata":{},"sourceType":"module"}