{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport BN from 'bn.js';\nimport { assert, bnToBn, bnToU8a, isBn, isNumber, isString, isU8a, isUndefined, stringCamelCase, stringUpperFirst, u8aToBn, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareArray } from \"./utils/index.mjs\";\n\nfunction encodeSet(setValues, value) {\n  return value.reduce((result, value) => {\n    return result.or(bnToBn(setValues[value] || 0));\n  }, new BN(0));\n}\n/** @internal */\n\n\nfunction decodeSetArray(setValues, value) {\n  return value.reduce((result, key) => {\n    assert(!isUndefined(setValues[key]), `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);\n    result.push(key);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeSetNumber(setValues, _value) {\n  const bn = bnToBn(_value);\n  const result = Object.keys(setValues).reduce((result, key) => {\n    if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {\n      result.push(key);\n    }\n\n    return result;\n  }, []);\n  const computed = encodeSet(setValues, result);\n  assert(bn.eq(computed), `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);\n  return result;\n}\n/** @internal */\n\n\nfunction decodeSet(setValues, value = 0, bitLength) {\n  assert(bitLength % 8 === 0, `Expected valid bitLength, power of 8, found ${bitLength}`);\n  const byteLength = bitLength / 8;\n\n  if (isString(value)) {\n    return decodeSet(setValues, u8aToU8a(value), byteLength);\n  } else if (isU8a(value)) {\n    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {\n      isLe: true\n    }));\n  } else if (value instanceof Set || Array.isArray(value)) {\n    const input = Array.isArray(value) ? value : [...value.values()];\n    return decodeSetArray(setValues, input);\n  }\n\n  return decodeSetNumber(setValues, value);\n}\n/**\n * @name Set\n * @description\n * An Set is an array of string values, represented an an encoded type by\n * a bitwise representation of the values.\n */\n// FIXME This is a prime candidate to extend the JavaScript built-in Set\n\n\nvar _allowed = _classPrivateFieldLooseKey(\"allowed\");\n\nvar _byteLength = _classPrivateFieldLooseKey(\"byteLength\");\n\nexport class CodecSet extends Set {\n  constructor(registry, setValues, value, bitLength = 8) {\n    super(decodeSet(setValues, value, bitLength));\n    this.registry = void 0;\n    Object.defineProperty(this, _allowed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _byteLength, {\n      writable: true,\n      value: void 0\n    });\n\n    this.add = key => {\n      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates \"some\" chaos\n      // we have the isUndefined(this._setValues) in here as well, add is used internally\n      // in the Set constructor (so it is undefined at this point, and should allow)\n      assert(isUndefined(_classPrivateFieldLooseBase(this, _allowed)[_allowed]) || !isUndefined(_classPrivateFieldLooseBase(this, _allowed)[_allowed][key]), `Set: Invalid key '${key}' on add`);\n      super.add(key);\n      return this;\n    };\n\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _allowed)[_allowed] = setValues;\n    _classPrivateFieldLooseBase(this, _byteLength)[_byteLength] = bitLength / 8;\n  }\n\n  static with(values, bitLength) {\n    return class extends CodecSet {\n      constructor(registry, value) {\n        super(registry, values, value, bitLength);\n        Object.keys(values).forEach(_key => {\n          const name = stringUpperFirst(stringCamelCase(_key));\n          const iskey = `is${name}`;\n          isUndefined(this[iskey]) && Object.defineProperty(this, iskey, {\n            enumerable: true,\n            get: () => this.strings.includes(_key)\n          });\n        });\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return _classPrivateFieldLooseBase(this, _byteLength)[_byteLength];\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description true is the Set contains no values\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()];\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  get valueEncoded() {\n    return encodeSet(_classPrivateFieldLooseBase(this, _allowed)[_allowed], this.strings);\n  }\n  /**\n   * @description adds a value to the Set (extended to allow for validity checking)\n   */\n\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (Array.isArray(other)) {\n      // we don't actually care about the order, sort the values\n      return compareArray(this.strings.sort(), other.sort());\n    } else if (other instanceof Set) {\n      return this.eq([...other.values()]);\n    } else if (isNumber(other) || isBn(other)) {\n      return this.valueEncoded.eq(bnToBn(other));\n    }\n\n    return false;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.strings;\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  toNumber() {\n    return this.valueEncoded.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify({\n      _set: _classPrivateFieldLooseBase(this, _allowed)[_allowed]\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return `[${this.strings.join(', ')}]`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return bnToU8a(this.valueEncoded, {\n      bitLength: _classPrivateFieldLooseBase(this, _byteLength)[_byteLength] * 8,\n      isLe: true\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/codec/Set.mjs"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","BN","assert","bnToBn","bnToU8a","isBn","isNumber","isString","isU8a","isUndefined","stringCamelCase","stringUpperFirst","u8aToBn","u8aToHex","u8aToU8a","compareArray","encodeSet","setValues","value","reduce","result","or","decodeSetArray","key","Object","keys","join","push","decodeSetNumber","_value","bn","and","eq","computed","toString","decodeSet","bitLength","byteLength","length","subarray","isLe","Set","Array","isArray","input","values","_allowed","_byteLength","CodecSet","constructor","registry","defineProperty","writable","add","with","forEach","_key","name","iskey","enumerable","get","strings","includes","encodedLength","hash","toU8a","isEmpty","size","valueEncoded","other","sort","toHex","toHuman","toJSON","toNumber","toRawType","JSON","stringify","_set","isBare"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { assert, bnToBn, bnToU8a, isBn, isNumber, isString, isU8a, isUndefined, stringCamelCase, stringUpperFirst, u8aToBn, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareArray } from \"./utils/index.mjs\";\n\nfunction encodeSet(setValues, value) {\n  return value.reduce((result, value) => {\n    return result.or(bnToBn(setValues[value] || 0));\n  }, new BN(0));\n}\n/** @internal */\n\n\nfunction decodeSetArray(setValues, value) {\n  return value.reduce((result, key) => {\n    assert(!isUndefined(setValues[key]), `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);\n    result.push(key);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeSetNumber(setValues, _value) {\n  const bn = bnToBn(_value);\n  const result = Object.keys(setValues).reduce((result, key) => {\n    if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {\n      result.push(key);\n    }\n\n    return result;\n  }, []);\n  const computed = encodeSet(setValues, result);\n  assert(bn.eq(computed), `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);\n  return result;\n}\n/** @internal */\n\n\nfunction decodeSet(setValues, value = 0, bitLength) {\n  assert(bitLength % 8 === 0, `Expected valid bitLength, power of 8, found ${bitLength}`);\n  const byteLength = bitLength / 8;\n\n  if (isString(value)) {\n    return decodeSet(setValues, u8aToU8a(value), byteLength);\n  } else if (isU8a(value)) {\n    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {\n      isLe: true\n    }));\n  } else if (value instanceof Set || Array.isArray(value)) {\n    const input = Array.isArray(value) ? value : [...value.values()];\n    return decodeSetArray(setValues, input);\n  }\n\n  return decodeSetNumber(setValues, value);\n}\n/**\n * @name Set\n * @description\n * An Set is an array of string values, represented an an encoded type by\n * a bitwise representation of the values.\n */\n// FIXME This is a prime candidate to extend the JavaScript built-in Set\n\n\nvar _allowed = _classPrivateFieldLooseKey(\"allowed\");\n\nvar _byteLength = _classPrivateFieldLooseKey(\"byteLength\");\n\nexport class CodecSet extends Set {\n  constructor(registry, setValues, value, bitLength = 8) {\n    super(decodeSet(setValues, value, bitLength));\n    this.registry = void 0;\n    Object.defineProperty(this, _allowed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _byteLength, {\n      writable: true,\n      value: void 0\n    });\n\n    this.add = key => {\n      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates \"some\" chaos\n      // we have the isUndefined(this._setValues) in here as well, add is used internally\n      // in the Set constructor (so it is undefined at this point, and should allow)\n      assert(isUndefined(_classPrivateFieldLooseBase(this, _allowed)[_allowed]) || !isUndefined(_classPrivateFieldLooseBase(this, _allowed)[_allowed][key]), `Set: Invalid key '${key}' on add`);\n      super.add(key);\n      return this;\n    };\n\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _allowed)[_allowed] = setValues;\n    _classPrivateFieldLooseBase(this, _byteLength)[_byteLength] = bitLength / 8;\n  }\n\n  static with(values, bitLength) {\n    return class extends CodecSet {\n      constructor(registry, value) {\n        super(registry, values, value, bitLength);\n        Object.keys(values).forEach(_key => {\n          const name = stringUpperFirst(stringCamelCase(_key));\n          const iskey = `is${name}`;\n          isUndefined(this[iskey]) && Object.defineProperty(this, iskey, {\n            enumerable: true,\n            get: () => this.strings.includes(_key)\n          });\n        });\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return _classPrivateFieldLooseBase(this, _byteLength)[_byteLength];\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description true is the Set contains no values\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()];\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  get valueEncoded() {\n    return encodeSet(_classPrivateFieldLooseBase(this, _allowed)[_allowed], this.strings);\n  }\n  /**\n   * @description adds a value to the Set (extended to allow for validity checking)\n   */\n\n\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  eq(other) {\n    if (Array.isArray(other)) {\n      // we don't actually care about the order, sort the values\n      return compareArray(this.strings.sort(), other.sort());\n    } else if (other instanceof Set) {\n      return this.eq([...other.values()]);\n    } else if (isNumber(other) || isBn(other)) {\n      return this.valueEncoded.eq(bnToBn(other));\n    }\n\n    return false;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.strings;\n  }\n  /**\n   * @description The encoded value for the set members\n   */\n\n\n  toNumber() {\n    return this.valueEncoded.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify({\n      _set: _classPrivateFieldLooseBase(this, _allowed)[_allowed]\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return `[${this.strings.join(', ')}]`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return bnToU8a(this.valueEncoded, {\n      bitLength: _classPrivateFieldLooseBase(this, _byteLength)[_byteLength] * 8,\n      isLe: true\n    });\n  }\n\n}"]},"metadata":{},"sourceType":"module"}