{"ast":null,"code":"var _jsxFileName = \"/Users/bmacer/substrate-node-template/substrate-front-end-template/src/Events.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib'; // Events to be filtered from feed\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILTERED_EVENTS = ['system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})', 'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'];\n\nfunction Main(props) {\n  _s();\n\n  const {\n    api\n  } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n  useEffect(() => {\n    let unsub = null;\n\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const {\n            event,\n            phase\n          } = record;\n          const types = event.typeDef; // show what we are busy with\n\n          const eventName = `${event.section}:${event.method}:: (phase=${phase.toString()})`;\n          if (FILTERED_EVENTS.includes(eventName)) return; // loop through each of the parameters, displaying the type and data\n\n          const params = event.data.map((data, index) => `${types[index].type}: ${data.toString()}`);\n          setEventFeed(e => [{\n            icon: 'bell',\n            summary: `${eventName}-${e.length}`,\n            extraText: event.meta.documentation.join(', ').toString(),\n            content: params.join(', ')\n          }, ...e]);\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n  const {\n    feedMaxHeight = 250\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    width: 8,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        float: 'left'\n      },\n      children: \"Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      basic: true,\n      circular: true,\n      size: \"mini\",\n      color: \"grey\",\n      floated: \"right\",\n      icon: \"erase\",\n      onClick: _ => setEventFeed([])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Feed, {\n      style: {\n        clear: 'both',\n        overflow: 'auto',\n        maxHeight: feedMaxHeight\n      },\n      events: eventFeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"HzbIHdFtwwHPAwpppr5AXnLQOVM=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Main;\nexport default function Events(props) {\n  _s2();\n\n  const {\n    api\n  } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events ? /*#__PURE__*/_jsxDEV(Main, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this) : null;\n}\n\n_s2(Events, \"a5IVjGvlzdb5yuE5zCYn+JGZcoo=\", false, function () {\n  return [useSubstrate];\n});\n\n_c2 = Events;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"Events\");","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/src/Events.js"],"names":["React","useEffect","useState","Feed","Grid","Button","useSubstrate","FILTERED_EVENTS","Main","props","api","eventFeed","setEventFeed","unsub","allEvents","query","system","events","forEach","record","event","phase","types","typeDef","eventName","section","method","toString","includes","params","data","map","index","type","e","icon","summary","length","extraText","meta","documentation","join","content","feedMaxHeight","float","_","clear","overflow","maxHeight","Events"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,QAAmC,mBAAnC;AAEA,SAASC,YAAT,QAA6B,iBAA7B,C,CAEA;;;AACA,MAAMC,eAAe,GAAG,CACtB,wDADsB,EAEtB,wDAFsB,CAAxB;;AAKA,SAASC,IAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAUJ,YAAY,EAA5B;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,KAAK,GAAG,IAAZ;;AACA,UAAMC,SAAS,GAAG,YAAY;AAC5BD,MAAAA,KAAK,GAAG,MAAMH,GAAG,CAACK,KAAJ,CAAUC,MAAV,CAAiBC,MAAjB,CAAwBA,MAAM,IAAI;AAC9C;AACAA,QAAAA,MAAM,CAACC,OAAP,CAAeC,MAAM,IAAI;AACvB;AACA,gBAAM;AAAEC,YAAAA,KAAF;AAASC,YAAAA;AAAT,cAAmBF,MAAzB;AACA,gBAAMG,KAAK,GAAGF,KAAK,CAACG,OAApB,CAHuB,CAKvB;;AACA,gBAAMC,SAAS,GAAI,GAAEJ,KAAK,CAACK,OAAQ,IACjCL,KAAK,CAACM,MACP,aAAYL,KAAK,CAACM,QAAN,EAAiB,GAF9B;AAIA,cAAIpB,eAAe,CAACqB,QAAhB,CAAyBJ,SAAzB,CAAJ,EAAyC,OAVlB,CAYvB;;AACA,gBAAMK,MAAM,GAAGT,KAAK,CAACU,IAAN,CAAWC,GAAX,CACb,CAACD,IAAD,EAAOE,KAAP,KAAkB,GAAEV,KAAK,CAACU,KAAD,CAAL,CAAaC,IAAK,KAAIH,IAAI,CAACH,QAAL,EAAgB,EAD7C,CAAf;AAIAf,UAAAA,YAAY,CAACsB,CAAC,IAAI,CAAC;AACjBC,YAAAA,IAAI,EAAE,MADW;AAEjBC,YAAAA,OAAO,EAAG,GAAEZ,SAAU,IAAGU,CAAC,CAACG,MAAO,EAFjB;AAGjBC,YAAAA,SAAS,EAAElB,KAAK,CAACmB,IAAN,CAAWC,aAAX,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoCd,QAApC,EAHM;AAIjBe,YAAAA,OAAO,EAAEb,MAAM,CAACY,IAAP,CAAY,IAAZ;AAJQ,WAAD,EAKf,GAAGP,CALY,CAAN,CAAZ;AAMD,SAvBD;AAwBD,OA1Ba,CAAd;AA2BD,KA5BD;;AA8BApB,IAAAA,SAAS;AACT,WAAO,MAAMD,KAAK,IAAIA,KAAK,EAA3B;AACD,GAlCQ,EAkCN,CAACH,GAAG,CAACK,KAAJ,CAAUC,MAAX,CAlCM,CAAT;AAoCA,QAAM;AAAE2B,IAAAA,aAAa,GAAG;AAAlB,MAA0BlC,KAAhC;AAEA,sBACE,QAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,CAApB;AAAA,4BACE;AAAI,MAAA,KAAK,EAAE;AAAEmC,QAAAA,KAAK,EAAE;AAAT,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACE,MAAA,KAAK,MADP;AACQ,MAAA,QAAQ,MADhB;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,OAAO,EAAC,OAJV;AAKE,MAAA,IAAI,EAAC,OALP;AAME,MAAA,OAAO,EAAGC,CAAC,IAAIjC,YAAY,CAAC,EAAD;AAN7B;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEkC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,SAAS,EAAEL;AAA9C,OAAb;AAA4E,MAAA,MAAM,EAAEhC;AAApF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAxDQH,I;UACSF,Y;;;KADTE,I;AA0DT,eAAe,SAASyC,MAAT,CAAiBxC,KAAjB,EAAwB;AAAA;;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAUJ,YAAY,EAA5B;AACA,SAAOI,GAAG,CAACK,KAAJ,IAAaL,GAAG,CAACK,KAAJ,CAAUC,MAAvB,IAAiCN,GAAG,CAACK,KAAJ,CAAUC,MAAV,CAAiBC,MAAlD,gBACH,QAAC,IAAD,OAAUR;AAAV;AAAA;AAAA;AAAA;AAAA,UADG,GAEH,IAFJ;AAGD;;IALuBwC,M;UACN3C,Y;;;MADM2C,M","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\n// Events to be filtered from feed\nconst FILTERED_EVENTS = [\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n];\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    let unsub = null;\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const { event, phase } = record;\n          const types = event.typeDef;\n\n          // show what we are busy with\n          const eventName = `${event.section}:${\n            event.method\n          }:: (phase=${phase.toString()})`;\n\n          if (FILTERED_EVENTS.includes(eventName)) return;\n\n          // loop through each of the parameters, displaying the type and data\n          const params = event.data.map(\n            (data, index) => `${types[index].type}: ${data.toString()}`\n          );\n\n          setEventFeed(e => [{\n            icon: 'bell',\n            summary: `${eventName}-${e.length}`,\n            extraText: event.meta.documentation.join(', ').toString(),\n            content: params.join(', ')\n          }, ...e]);\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n\n  const { feedMaxHeight = 250 } = props;\n\n  return (\n    <Grid.Column width={8}>\n      <h1 style={{ float: 'left' }}>Events</h1>\n      <Button\n        basic circular\n        size='mini'\n        color='grey'\n        floated='right'\n        icon='erase'\n        onClick={ _ => setEventFeed([]) }\n      />\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: feedMaxHeight }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events\n    ? <Main {...props} />\n    : null;\n}\n"]},"metadata":{},"sourceType":"module"}