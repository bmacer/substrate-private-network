{"ast":null,"code":"// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// For esm, this should be import.meta.url or to get the same behavior as __dirname, we can use\n//\n//   new URL(import.meta.url).pathname)\n//\n// The issue is the WP4 has \"some\" issues with import.meta.url. So because of bundlers, we can't have\n// nice things... In this case it is even worse since import.meta.url won't even make it compile, so\n// there is a complete dead end with usage thereof\n//\n// When that is fixed, a solution is to have both .js & .mjs files, with the following content -\n//\n// cjs: util.detectPackage(packageInfo, () => __dirname);\n// esm: detectPackage(packageInfo, () => import.meta.url);\n//\n// With the above we additionally need a .d.ts to just export the packageInfo\nimport { detectPackage } from '@polkadot/util';\nimport packageInfo from \"./package-info.json\";\ndetectPackage(packageInfo, typeof __dirname !== 'undefined' && __dirname);\nexport { packageInfo };","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/keyring/detectPackage.mjs"],"names":["detectPackage","packageInfo","__dirname"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,gBAA9B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACAD,aAAa,CAACC,WAAD,EAAc,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAlD,CAAb;AACA,SAASD,WAAT","sourcesContent":["// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// For esm, this should be import.meta.url or to get the same behavior as __dirname, we can use\n//\n//   new URL(import.meta.url).pathname)\n//\n// The issue is the WP4 has \"some\" issues with import.meta.url. So because of bundlers, we can't have\n// nice things... In this case it is even worse since import.meta.url won't even make it compile, so\n// there is a complete dead end with usage thereof\n//\n// When that is fixed, a solution is to have both .js & .mjs files, with the following content -\n//\n// cjs: util.detectPackage(packageInfo, () => __dirname);\n// esm: detectPackage(packageInfo, () => import.meta.url);\n//\n// With the above we additionally need a .d.ts to just export the packageInfo\nimport { detectPackage } from '@polkadot/util';\nimport packageInfo from \"./package-info.json\";\ndetectPackage(packageInfo, typeof __dirname !== 'undefined' && __dirname);\nexport { packageInfo };"]},"metadata":{},"sourceType":"module"}