{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { xglobal } from '@polkadot/x-global';\nimport { isFunction } from \"./is/function.mjs\";\nimport { isString } from \"./is/string.mjs\";\nimport { assert } from \"./assert.mjs\"; // eslint-disable-next-line no-undef\n\n/** @internal */\n\nfunction expandPath(path) {\n  return !path || path.length < 5 ? '<unknown>' : path;\n}\n/** @internal */\n\n\nfunction getEntry(name) {\n  const _global = xglobal;\n\n  if (!_global.__polkadotjs) {\n    _global.__polkadotjs = {};\n  }\n\n  if (!_global.__polkadotjs[name]) {\n    _global.__polkadotjs[name] = [];\n  }\n\n  return _global.__polkadotjs[name];\n}\n/** @internal */\n\n\nfunction flattenVersions(entry) {\n  const all = entry.map(version => isString(version) ? {\n    version\n  } : version);\n  const verLength = all.reduce((max, {\n    version\n  }) => Math.max(max, version.length), 0);\n  return all.map(({\n    path,\n    version\n  }) => `\\t${version.padEnd(verLength)}\\t${expandPath(path)}`).join('\\n');\n}\n/** @internal */\n\n\nfunction getPath(pathOrFn) {\n  if (isFunction(pathOrFn)) {\n    try {\n      return pathOrFn();\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  return pathOrFn;\n}\n/**\n * @name detectPackage\n * @summary Checks that a specific package is only imported once\n */\n\n\nexport function detectPackage({\n  name,\n  version\n}, pathOrFn) {\n  assert(name.startsWith('@polkadot'), `Invalid package descriptor ${name}`);\n  const entry = getEntry(name);\n  entry.push({\n    path: getPath(pathOrFn) || '',\n    version\n  });\n\n  if (entry.length !== 1) {\n    console.warn(`Multiple instances of ${name} detected, ensure that there is only one package in your dependency tree.\\n${flattenVersions(entry)}`);\n  }\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util/detectPackage.mjs"],"names":["xglobal","isFunction","isString","assert","expandPath","path","length","getEntry","name","_global","__polkadotjs","flattenVersions","entry","all","map","version","verLength","reduce","max","Math","padEnd","join","getPath","pathOrFn","error","undefined","detectPackage","startsWith","push","console","warn"],"mappings":"AAAA;AACA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,MAAT,QAAuB,cAAvB,C,CAAuC;;AAEvC;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAO,CAACA,IAAD,IAASA,IAAI,CAACC,MAAL,GAAc,CAAvB,GAA2B,WAA3B,GAAyCD,IAAhD;AACD;AACD;;;AAGA,SAASE,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAMC,OAAO,GAAGT,OAAhB;;AAEA,MAAI,CAACS,OAAO,CAACC,YAAb,EAA2B;AACzBD,IAAAA,OAAO,CAACC,YAAR,GAAuB,EAAvB;AACD;;AAED,MAAI,CAACD,OAAO,CAACC,YAAR,CAAqBF,IAArB,CAAL,EAAiC;AAC/BC,IAAAA,OAAO,CAACC,YAAR,CAAqBF,IAArB,IAA6B,EAA7B;AACD;;AAED,SAAOC,OAAO,CAACC,YAAR,CAAqBF,IAArB,CAAP;AACD;AACD;;;AAGA,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAMC,GAAG,GAAGD,KAAK,CAACE,GAAN,CAAUC,OAAO,IAAIb,QAAQ,CAACa,OAAD,CAAR,GAAoB;AACnDA,IAAAA;AADmD,GAApB,GAE7BA,OAFQ,CAAZ;AAGA,QAAMC,SAAS,GAAGH,GAAG,CAACI,MAAJ,CAAW,CAACC,GAAD,EAAM;AACjCH,IAAAA;AADiC,GAAN,KAEvBI,IAAI,CAACD,GAAL,CAASA,GAAT,EAAcH,OAAO,CAACT,MAAtB,CAFY,EAEmB,CAFnB,CAAlB;AAGA,SAAOO,GAAG,CAACC,GAAJ,CAAQ,CAAC;AACdT,IAAAA,IADc;AAEdU,IAAAA;AAFc,GAAD,KAGR,KAAIA,OAAO,CAACK,MAAR,CAAeJ,SAAf,CAA0B,KAAIZ,UAAU,CAACC,IAAD,CAAO,EAHnD,EAGsDgB,IAHtD,CAG2D,IAH3D,CAAP;AAID;AACD;;;AAGA,SAASC,OAAT,CAAiBC,QAAjB,EAA2B;AACzB,MAAItB,UAAU,CAACsB,QAAD,CAAd,EAA0B;AACxB,QAAI;AACF,aAAOA,QAAQ,EAAf;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd,aAAOC,SAAP;AACD;AACF;;AAED,SAAOF,QAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,OAAO,SAASG,aAAT,CAAuB;AAC5BlB,EAAAA,IAD4B;AAE5BO,EAAAA;AAF4B,CAAvB,EAGJQ,QAHI,EAGM;AACXpB,EAAAA,MAAM,CAACK,IAAI,CAACmB,UAAL,CAAgB,WAAhB,CAAD,EAAgC,8BAA6BnB,IAAK,EAAlE,CAAN;AACA,QAAMI,KAAK,GAAGL,QAAQ,CAACC,IAAD,CAAtB;AACAI,EAAAA,KAAK,CAACgB,IAAN,CAAW;AACTvB,IAAAA,IAAI,EAAEiB,OAAO,CAACC,QAAD,CAAP,IAAqB,EADlB;AAETR,IAAAA;AAFS,GAAX;;AAKA,MAAIH,KAAK,CAACN,MAAN,KAAiB,CAArB,EAAwB;AACtBuB,IAAAA,OAAO,CAACC,IAAR,CAAc,yBAAwBtB,IAAK,8EAA6EG,eAAe,CAACC,KAAD,CAAQ,EAA/I;AACD;AACF","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { xglobal } from '@polkadot/x-global';\nimport { isFunction } from \"./is/function.mjs\";\nimport { isString } from \"./is/string.mjs\";\nimport { assert } from \"./assert.mjs\"; // eslint-disable-next-line no-undef\n\n/** @internal */\nfunction expandPath(path) {\n  return !path || path.length < 5 ? '<unknown>' : path;\n}\n/** @internal */\n\n\nfunction getEntry(name) {\n  const _global = xglobal;\n\n  if (!_global.__polkadotjs) {\n    _global.__polkadotjs = {};\n  }\n\n  if (!_global.__polkadotjs[name]) {\n    _global.__polkadotjs[name] = [];\n  }\n\n  return _global.__polkadotjs[name];\n}\n/** @internal */\n\n\nfunction flattenVersions(entry) {\n  const all = entry.map(version => isString(version) ? {\n    version\n  } : version);\n  const verLength = all.reduce((max, {\n    version\n  }) => Math.max(max, version.length), 0);\n  return all.map(({\n    path,\n    version\n  }) => `\\t${version.padEnd(verLength)}\\t${expandPath(path)}`).join('\\n');\n}\n/** @internal */\n\n\nfunction getPath(pathOrFn) {\n  if (isFunction(pathOrFn)) {\n    try {\n      return pathOrFn();\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  return pathOrFn;\n}\n/**\n * @name detectPackage\n * @summary Checks that a specific package is only imported once\n */\n\n\nexport function detectPackage({\n  name,\n  version\n}, pathOrFn) {\n  assert(name.startsWith('@polkadot'), `Invalid package descriptor ${name}`);\n  const entry = getEntry(name);\n  entry.push({\n    path: getPath(pathOrFn) || '',\n    version\n  });\n\n  if (entry.length !== 1) {\n    console.warn(`Multiple instances of ${name} detected, ensure that there is only one package in your dependency tree.\\n${flattenVersions(entry)}`);\n  }\n}"]},"metadata":{},"sourceType":"module"}