{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { polkadot } from \"./polkadot.mjs\";\nimport { substrate } from \"./substrate.mjs\"; // A mapping of the known signed extensions to the extra fields that they contain. Unlike in the actual extensions,\n// we define the extra fields not as a Tuple, but rather as a struct so they can be named. These will be expanded\n// into the various fields when added to the payload (we only support V4 onwards with these, V3 and earlier are\n// deemed fixed and non-changeable)\n\nconst allExtensions = _objectSpread(_objectSpread({}, substrate), polkadot); // the v4 signed extensions (the order is important here, as applied by default)\n\n\nconst defaultExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];\n\nfunction findUnknownExtensions(extensions, userExtensions = {}) {\n  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];\n  return extensions.filter(key => !names.includes(key));\n}\n\nfunction expandExtensionTypes(extensions, type, userExtensions = {}) {\n  return extensions // Always allow user extensions first - these should provide overrides\n  .map(key => userExtensions[key] || allExtensions[key]).filter(info => !!info).reduce((result, info) => _objectSpread(_objectSpread({}, result), info[type]), {});\n}\n\nexport { allExtensions, defaultExtensions, expandExtensionTypes, findUnknownExtensions };","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/extrinsic/signedExtensions/index.mjs"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","polkadot","substrate","allExtensions","defaultExtensions","findUnknownExtensions","extensions","userExtensions","names","includes","expandExtensionTypes","type","map","info","reduce","result"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { polkadot } from \"./polkadot.mjs\";\nimport { substrate } from \"./substrate.mjs\"; // A mapping of the known signed extensions to the extra fields that they contain. Unlike in the actual extensions,\n// we define the extra fields not as a Tuple, but rather as a struct so they can be named. These will be expanded\n// into the various fields when added to the payload (we only support V4 onwards with these, V3 and earlier are\n// deemed fixed and non-changeable)\n\nconst allExtensions = _objectSpread(_objectSpread({}, substrate), polkadot); // the v4 signed extensions (the order is important here, as applied by default)\n\n\nconst defaultExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];\n\nfunction findUnknownExtensions(extensions, userExtensions = {}) {\n  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];\n  return extensions.filter(key => !names.includes(key));\n}\n\nfunction expandExtensionTypes(extensions, type, userExtensions = {}) {\n  return extensions // Always allow user extensions first - these should provide overrides\n  .map(key => userExtensions[key] || allExtensions[key]).filter(info => !!info).reduce((result, info) => _objectSpread(_objectSpread({}, result), info[type]), {});\n}\n\nexport { allExtensions, defaultExtensions, expandExtensionTypes, findUnknownExtensions };"]},"metadata":{},"sourceType":"module"}