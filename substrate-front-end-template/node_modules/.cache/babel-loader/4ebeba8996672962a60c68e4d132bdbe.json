{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { bnToBn } from '@polkadot/util';\nimport { u32 } from \"../primitive/U32.mjs\"; // there are all reversed since it is actually encoded as u32, LE,\n// this means that FRNK has the bytes as KNRF\n\nconst CID_AURA = 0x61727561; // 'aura'\n\nconst CID_BABE = 0x45424142; // 'BABE'\n\nconst CID_GRPA = 0x4b4e5246; // 'FRNK' (don't ask, used to be afg1)\n\nconst CID_POW = 0x5f776f70; // 'pow_'\n\nexport { CID_AURA, CID_BABE, CID_GRPA, CID_POW };\n/**\n * @name GenericConsensusEngineId\n * @description\n * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']\n */\n\nexport class GenericConsensusEngineId extends u32 {\n  static idToString(input) {\n    return bnToBn(input).toArray('le').map(code => String.fromCharCode(code)).join('');\n  }\n\n  static stringToId(input) {\n    return input.split('').reverse().reduce((result, char) => result * 256 + char.charCodeAt(0), 0);\n  }\n  /**\n   * @description `true` if the engine matches aura\n   */\n\n\n  get isAura() {\n    return this.eq(CID_AURA);\n  }\n  /**\n   * @description `true` is the engine matches babe\n   */\n\n\n  get isBabe() {\n    return this.eq(CID_BABE);\n  }\n  /**\n   * @description `true` is the engine matches grandpa\n   */\n\n\n  get isGrandpa() {\n    return this.eq(CID_GRPA);\n  }\n  /**\n   * @description `true` is the engine matches pow\n   */\n\n\n  get isPow() {\n    return this.eq(CID_POW);\n  }\n\n  _getAuraAuthor(bytes, sessionValidators) {\n    return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new BN(sessionValidators.length)).toNumber()];\n  }\n\n  _getBabeAuthor(bytes, sessionValidators) {\n    const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));\n    return sessionValidators[digest.value.toNumber()];\n  }\n\n  _getPowAuthor(bytes) {\n    return this.registry.createType('AccountId', bytes);\n  }\n\n  _getH160Author(bytes) {\n    return this.registry.createType('AccountId', bytes);\n  }\n  /**\n   * @description From the input bytes, decode into an author\n   */\n\n\n  extractAuthor(bytes, sessionValidators) {\n    if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {\n      if (this.isAura) {\n        return this._getAuraAuthor(bytes, sessionValidators);\n      } else if (this.isBabe) {\n        return this._getBabeAuthor(bytes, sessionValidators);\n      }\n    }\n\n    if (this.isPow) {\n      return this._getPowAuthor(bytes);\n    } // Moonbeam is neither Aura nor Babe nor Pow and uses h160 addresses\n\n\n    if (bytes.length === 20) {\n      return this._getH160Author(bytes);\n    }\n\n    return undefined;\n  }\n  /**\n   * @description Override the default toString to return a 4-byte string\n   */\n\n\n  toString() {\n    return GenericConsensusEngineId.idToString(this);\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/generic/ConsensusEngineId.mjs"],"names":["BN","bnToBn","u32","CID_AURA","CID_BABE","CID_GRPA","CID_POW","GenericConsensusEngineId","idToString","input","toArray","map","code","String","fromCharCode","join","stringToId","split","reverse","reduce","result","char","charCodeAt","isAura","eq","isBabe","isGrandpa","isPow","_getAuraAuthor","bytes","sessionValidators","registry","createType","toU8a","slotNumber","mod","length","toNumber","_getBabeAuthor","digest","value","_getPowAuthor","_getH160Author","extractAuthor","undefined","toString"],"mappings":"AAAA;AACA;AACA,OAAOA,EAAP,MAAe,OAAf;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,GAAT,QAAoB,sBAApB,C,CAA4C;AAC5C;;AAEA,MAAMC,QAAQ,GAAG,UAAjB,C,CAA6B;;AAE7B,MAAMC,QAAQ,GAAG,UAAjB,C,CAA6B;;AAE7B,MAAMC,QAAQ,GAAG,UAAjB,C,CAA6B;;AAE7B,MAAMC,OAAO,GAAG,UAAhB,C,CAA4B;;AAE5B,SAASH,QAAT,EAAmBC,QAAnB,EAA6BC,QAA7B,EAAuCC,OAAvC;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,wBAAN,SAAuCL,GAAvC,CAA2C;AAC/B,SAAVM,UAAU,CAACC,KAAD,EAAQ;AACvB,WAAOR,MAAM,CAACQ,KAAD,CAAN,CAAcC,OAAd,CAAsB,IAAtB,EAA4BC,GAA5B,CAAgCC,IAAI,IAAIC,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAAxC,EAAmEG,IAAnE,CAAwE,EAAxE,CAAP;AACD;;AAEgB,SAAVC,UAAU,CAACP,KAAD,EAAQ;AACvB,WAAOA,KAAK,CAACQ,KAAN,CAAY,EAAZ,EAAgBC,OAAhB,GAA0BC,MAA1B,CAAiC,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,GAAG,GAAT,GAAeC,IAAI,CAACC,UAAL,CAAgB,CAAhB,CAAlE,EAAsF,CAAtF,CAAP;AACD;AACD;AACF;AACA;;;AAGY,MAANC,MAAM,GAAG;AACX,WAAO,KAAKC,EAAL,CAAQrB,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGY,MAANsB,MAAM,GAAG;AACX,WAAO,KAAKD,EAAL,CAAQpB,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGe,MAATsB,SAAS,GAAG;AACd,WAAO,KAAKF,EAAL,CAAQnB,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGW,MAALsB,KAAK,GAAG;AACV,WAAO,KAAKH,EAAL,CAAQlB,OAAR,CAAP;AACD;;AAEDsB,EAAAA,cAAc,CAACC,KAAD,EAAQC,iBAAR,EAA2B;AACvC,WAAOA,iBAAiB,CAAC,KAAKC,QAAL,CAAcC,UAAd,CAAyB,kBAAzB,EAA6CH,KAAK,CAACI,KAAN,CAAY,IAAZ,CAA7C,EAAgEC,UAAhE,CAA2EC,GAA3E,CAA+E,IAAInC,EAAJ,CAAO8B,iBAAiB,CAACM,MAAzB,CAA/E,EAAiHC,QAAjH,EAAD,CAAxB;AACD;;AAEDC,EAAAA,cAAc,CAACT,KAAD,EAAQC,iBAAR,EAA2B;AACvC,UAAMS,MAAM,GAAG,KAAKR,QAAL,CAAcC,UAAd,CAAyB,wBAAzB,EAAmDH,KAAK,CAACI,KAAN,CAAY,IAAZ,CAAnD,CAAf;AACA,WAAOH,iBAAiB,CAACS,MAAM,CAACC,KAAP,CAAaH,QAAb,EAAD,CAAxB;AACD;;AAEDI,EAAAA,aAAa,CAACZ,KAAD,EAAQ;AACnB,WAAO,KAAKE,QAAL,CAAcC,UAAd,CAAyB,WAAzB,EAAsCH,KAAtC,CAAP;AACD;;AAEDa,EAAAA,cAAc,CAACb,KAAD,EAAQ;AACpB,WAAO,KAAKE,QAAL,CAAcC,UAAd,CAAyB,WAAzB,EAAsCH,KAAtC,CAAP;AACD;AACD;AACF;AACA;;;AAGEc,EAAAA,aAAa,CAACd,KAAD,EAAQC,iBAAR,EAA2B;AACtC,QAAIA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,IAA8DA,iBAAiB,CAACM,MAApF,EAA4F;AAC1F,UAAI,KAAKb,MAAT,EAAiB;AACf,eAAO,KAAKK,cAAL,CAAoBC,KAApB,EAA2BC,iBAA3B,CAAP;AACD,OAFD,MAEO,IAAI,KAAKL,MAAT,EAAiB;AACtB,eAAO,KAAKa,cAAL,CAAoBT,KAApB,EAA2BC,iBAA3B,CAAP;AACD;AACF;;AAED,QAAI,KAAKH,KAAT,EAAgB;AACd,aAAO,KAAKc,aAAL,CAAmBZ,KAAnB,CAAP;AACD,KAXqC,CAWpC;;;AAGF,QAAIA,KAAK,CAACO,MAAN,KAAiB,EAArB,EAAyB;AACvB,aAAO,KAAKM,cAAL,CAAoBb,KAApB,CAAP;AACD;;AAED,WAAOe,SAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,QAAQ,GAAG;AACT,WAAOtC,wBAAwB,CAACC,UAAzB,CAAoC,IAApC,CAAP;AACD;;AAzF+C","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { bnToBn } from '@polkadot/util';\nimport { u32 } from \"../primitive/U32.mjs\"; // there are all reversed since it is actually encoded as u32, LE,\n// this means that FRNK has the bytes as KNRF\n\nconst CID_AURA = 0x61727561; // 'aura'\n\nconst CID_BABE = 0x45424142; // 'BABE'\n\nconst CID_GRPA = 0x4b4e5246; // 'FRNK' (don't ask, used to be afg1)\n\nconst CID_POW = 0x5f776f70; // 'pow_'\n\nexport { CID_AURA, CID_BABE, CID_GRPA, CID_POW };\n/**\n * @name GenericConsensusEngineId\n * @description\n * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']\n */\n\nexport class GenericConsensusEngineId extends u32 {\n  static idToString(input) {\n    return bnToBn(input).toArray('le').map(code => String.fromCharCode(code)).join('');\n  }\n\n  static stringToId(input) {\n    return input.split('').reverse().reduce((result, char) => result * 256 + char.charCodeAt(0), 0);\n  }\n  /**\n   * @description `true` if the engine matches aura\n   */\n\n\n  get isAura() {\n    return this.eq(CID_AURA);\n  }\n  /**\n   * @description `true` is the engine matches babe\n   */\n\n\n  get isBabe() {\n    return this.eq(CID_BABE);\n  }\n  /**\n   * @description `true` is the engine matches grandpa\n   */\n\n\n  get isGrandpa() {\n    return this.eq(CID_GRPA);\n  }\n  /**\n   * @description `true` is the engine matches pow\n   */\n\n\n  get isPow() {\n    return this.eq(CID_POW);\n  }\n\n  _getAuraAuthor(bytes, sessionValidators) {\n    return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new BN(sessionValidators.length)).toNumber()];\n  }\n\n  _getBabeAuthor(bytes, sessionValidators) {\n    const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));\n    return sessionValidators[digest.value.toNumber()];\n  }\n\n  _getPowAuthor(bytes) {\n    return this.registry.createType('AccountId', bytes);\n  }\n\n  _getH160Author(bytes) {\n    return this.registry.createType('AccountId', bytes);\n  }\n  /**\n   * @description From the input bytes, decode into an author\n   */\n\n\n  extractAuthor(bytes, sessionValidators) {\n    if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {\n      if (this.isAura) {\n        return this._getAuraAuthor(bytes, sessionValidators);\n      } else if (this.isBabe) {\n        return this._getBabeAuthor(bytes, sessionValidators);\n      }\n    }\n\n    if (this.isPow) {\n      return this._getPowAuthor(bytes);\n    } // Moonbeam is neither Aura nor Babe nor Pow and uses h160 addresses\n\n\n    if (bytes.length === 20) {\n      return this._getH160Author(bytes);\n    }\n\n    return undefined;\n  }\n  /**\n   * @description Override the default toString to return a 4-byte string\n   */\n\n\n  toString() {\n    return GenericConsensusEngineId.idToString(this);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}