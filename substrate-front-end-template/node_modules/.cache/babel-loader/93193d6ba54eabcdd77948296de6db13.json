{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\n\nfunction sortAccounts([, balanceA], [, balanceB]) {\n  return balanceB.cmp(balanceA);\n}\n\nfunction queryElections(api) {\n  const section = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';\n  return api.queryMulti([api.query.council.members, api.query[section].candidates, api.query[section].members, api.query[section].runnersUp]).pipe(map(([councilMembers, candidates, members, runnersUp]) => ({\n    candidacyBond: api.consts[section].candidacyBond,\n    candidateCount: api.registry.createType('u32', candidates.length),\n    candidates,\n    desiredRunnersUp: api.consts[section].desiredRunnersUp,\n    desiredSeats: api.consts[section].desiredMembers,\n    members: members.length ? members.sort(sortAccounts) : councilMembers.map(accountId => [accountId, api.registry.createType('Balance')]),\n    runnersUp: runnersUp.sort(sortAccounts),\n    termDuration: api.consts[section].termDuration,\n    votingBond: api.consts[section].votingBond\n  })));\n}\n/**\n * @name info\n * @returns An object containing the combined results of the storage queries for\n * all relevant election module properties.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.elections.info(({ members, candidates }) => {\n *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);\n * });\n * ```\n */\n\n\nexport function info(instanceId, api) {\n  return memo(instanceId, () => queryElections(api));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/elections/info.mjs"],"names":["map","memo","sortAccounts","balanceA","balanceB","cmp","queryElections","api","section","query","electionsPhragmen","queryMulti","council","members","candidates","runnersUp","pipe","councilMembers","candidacyBond","consts","candidateCount","registry","createType","length","desiredRunnersUp","desiredSeats","desiredMembers","sort","accountId","termDuration","votingBond","info","instanceId"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,QAAoB,4BAApB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,SAASC,YAAT,CAAsB,GAAGC,QAAH,CAAtB,EAAoC,GAAGC,QAAH,CAApC,EAAkD;AAChD,SAAOA,QAAQ,CAACC,GAAT,CAAaF,QAAb,CAAP;AACD;;AAED,SAASG,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,QAAMC,OAAO,GAAGD,GAAG,CAACE,KAAJ,CAAUC,iBAAV,GAA8B,mBAA9B,GAAoD,WAApE;AACA,SAAOH,GAAG,CAACI,UAAJ,CAAe,CAACJ,GAAG,CAACE,KAAJ,CAAUG,OAAV,CAAkBC,OAAnB,EAA4BN,GAAG,CAACE,KAAJ,CAAUD,OAAV,EAAmBM,UAA/C,EAA2DP,GAAG,CAACE,KAAJ,CAAUD,OAAV,EAAmBK,OAA9E,EAAuFN,GAAG,CAACE,KAAJ,CAAUD,OAAV,EAAmBO,SAA1G,CAAf,EAAqIC,IAArI,CAA0IhB,GAAG,CAAC,CAAC,CAACiB,cAAD,EAAiBH,UAAjB,EAA6BD,OAA7B,EAAsCE,SAAtC,CAAD,MAAuD;AAC1MG,IAAAA,aAAa,EAAEX,GAAG,CAACY,MAAJ,CAAWX,OAAX,EAAoBU,aADuK;AAE1ME,IAAAA,cAAc,EAAEb,GAAG,CAACc,QAAJ,CAAaC,UAAb,CAAwB,KAAxB,EAA+BR,UAAU,CAACS,MAA1C,CAF0L;AAG1MT,IAAAA,UAH0M;AAI1MU,IAAAA,gBAAgB,EAAEjB,GAAG,CAACY,MAAJ,CAAWX,OAAX,EAAoBgB,gBAJoK;AAK1MC,IAAAA,YAAY,EAAElB,GAAG,CAACY,MAAJ,CAAWX,OAAX,EAAoBkB,cALwK;AAM1Mb,IAAAA,OAAO,EAAEA,OAAO,CAACU,MAAR,GAAiBV,OAAO,CAACc,IAAR,CAAazB,YAAb,CAAjB,GAA8Ce,cAAc,CAACjB,GAAf,CAAmB4B,SAAS,IAAI,CAACA,SAAD,EAAYrB,GAAG,CAACc,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CAAZ,CAAhC,CANmJ;AAO1MP,IAAAA,SAAS,EAAEA,SAAS,CAACY,IAAV,CAAezB,YAAf,CAP+L;AAQ1M2B,IAAAA,YAAY,EAAEtB,GAAG,CAACY,MAAJ,CAAWX,OAAX,EAAoBqB,YARwK;AAS1MC,IAAAA,UAAU,EAAEvB,GAAG,CAACY,MAAJ,CAAWX,OAAX,EAAoBsB;AAT0K,GAAvD,CAAD,CAA7I,CAAP;AAWD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,IAAT,CAAcC,UAAd,EAA0BzB,GAA1B,EAA+B;AACpC,SAAON,IAAI,CAAC+B,UAAD,EAAa,MAAM1B,cAAc,CAACC,GAAD,CAAjC,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\n\nfunction sortAccounts([, balanceA], [, balanceB]) {\n  return balanceB.cmp(balanceA);\n}\n\nfunction queryElections(api) {\n  const section = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';\n  return api.queryMulti([api.query.council.members, api.query[section].candidates, api.query[section].members, api.query[section].runnersUp]).pipe(map(([councilMembers, candidates, members, runnersUp]) => ({\n    candidacyBond: api.consts[section].candidacyBond,\n    candidateCount: api.registry.createType('u32', candidates.length),\n    candidates,\n    desiredRunnersUp: api.consts[section].desiredRunnersUp,\n    desiredSeats: api.consts[section].desiredMembers,\n    members: members.length ? members.sort(sortAccounts) : councilMembers.map(accountId => [accountId, api.registry.createType('Balance')]),\n    runnersUp: runnersUp.sort(sortAccounts),\n    termDuration: api.consts[section].termDuration,\n    votingBond: api.consts[section].votingBond\n  })));\n}\n/**\n * @name info\n * @returns An object containing the combined results of the storage queries for\n * all relevant election module properties.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.elections.info(({ members, candidates }) => {\n *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);\n * });\n * ```\n */\n\n\nexport function info(instanceId, api) {\n  return memo(instanceId, () => queryElections(api));\n}"]},"metadata":{},"sourceType":"module"}