{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nexport default {\n  rpc: {\n    proveFinality: {\n      description: 'Prove finality for the range (begin; end] hash.',\n      params: [{\n        name: 'begin',\n        type: 'BlockHash'\n      }, {\n        name: 'end',\n        type: 'BlockHash'\n      }, {\n        name: 'authoritiesSetId',\n        type: 'u64',\n        isOptional: true\n      }],\n      type: 'Option<EncodedFinalityProofs>'\n    },\n    roundState: {\n      description: 'Returns the state of the current best round state as well as the ongoing background rounds',\n      params: [],\n      type: 'ReportedRoundStates'\n    },\n    subscribeJustifications: {\n      description: 'Subscribes to grandpa justifications',\n      params: [],\n      pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],\n      type: 'JustificationNotification'\n    }\n  },\n  types: {\n    AuthorityIndex: 'u64',\n    AuthorityList: 'Vec<NextAuthority>',\n    AuthorityWeight: 'u64',\n    EncodedFinalityProofs: 'Bytes',\n    GrandpaEquivocation: {\n      _enum: {\n        Prevote: 'GrandpaEquivocationValue',\n        Precommit: 'GrandpaEquivocationValue'\n      }\n    },\n    GrandpaEquivocationProof: {\n      setId: 'SetId',\n      equivocation: 'GrandpaEquivocation'\n    },\n    GrandpaEquivocationValue: {\n      roundNumber: 'u64',\n      identity: 'AuthorityId',\n      first: '(GrandpaPrevote, AuthoritySignature)',\n      second: '(GrandpaPrevote, AuthoritySignature)'\n    },\n    GrandpaPrevote: {\n      targetHash: 'Hash',\n      targetNumber: 'BlockNumber'\n    },\n    JustificationNotification: 'Bytes',\n    KeyOwnerProof: 'MembershipProof',\n    NextAuthority: '(AuthorityId, AuthorityWeight)',\n    PendingPause: {\n      /// Block at which the intention to pause was scheduled.\n      scheduledAt: 'BlockNumber',\n      /// Number of blocks after which the change will be enacted.\n      delay: 'BlockNumber'\n    },\n    PendingResume: {\n      /// Block at which the intention to resume was scheduled.\n      scheduledAt: 'BlockNumber',\n      /// Number of blocks after which the change will be enacted.\n      delay: 'BlockNumber'\n    },\n    Precommits: {\n      currentWeight: 'u32',\n      missing: 'BTreeSet<AuthorityId>'\n    },\n    Prevotes: {\n      currentWeight: 'u32',\n      missing: 'BTreeSet<AuthorityId>'\n    },\n    ReportedRoundStates: {\n      setId: 'u32',\n      best: 'RoundState',\n      background: 'Vec<RoundState>'\n    },\n    RoundState: {\n      round: 'u32',\n      totalWeight: 'u32',\n      thresholdWeight: 'u32',\n      prevotes: 'Prevotes',\n      precommits: 'Precommits'\n    },\n    SetId: 'u64',\n    StoredPendingChange: {\n      scheduledAt: 'BlockNumber',\n      delay: 'BlockNumber',\n      nextAuthorities: 'AuthorityList'\n    },\n    StoredState: {\n      _enum: {\n        /// The current authority set is live, and GRANDPA is enabled.\n        Live: 'Null',\n        /// There is a pending pause event which will be enacted at the given block height.\n        PendingPause: 'PendingPause',\n        /// The current GRANDPA authority set is paused.\n        Paused: 'Null',\n        /// There is a pending resume event which will be enacted at the given block height.\n        PendingResume: 'PendingResume'\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/interfaces/grandpa/definitions.mjs"],"names":["rpc","proveFinality","description","params","name","type","isOptional","roundState","subscribeJustifications","pubsub","types","AuthorityIndex","AuthorityList","AuthorityWeight","EncodedFinalityProofs","GrandpaEquivocation","_enum","Prevote","Precommit","GrandpaEquivocationProof","setId","equivocation","GrandpaEquivocationValue","roundNumber","identity","first","second","GrandpaPrevote","targetHash","targetNumber","JustificationNotification","KeyOwnerProof","NextAuthority","PendingPause","scheduledAt","delay","PendingResume","Precommits","currentWeight","missing","Prevotes","ReportedRoundStates","best","background","RoundState","round","totalWeight","thresholdWeight","prevotes","precommits","SetId","StoredPendingChange","nextAuthorities","StoredState","Live","Paused"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nexport default {\n  rpc: {\n    proveFinality: {\n      description: 'Prove finality for the range (begin; end] hash.',\n      params: [{\n        name: 'begin',\n        type: 'BlockHash'\n      }, {\n        name: 'end',\n        type: 'BlockHash'\n      }, {\n        name: 'authoritiesSetId',\n        type: 'u64',\n        isOptional: true\n      }],\n      type: 'Option<EncodedFinalityProofs>'\n    },\n    roundState: {\n      description: 'Returns the state of the current best round state as well as the ongoing background rounds',\n      params: [],\n      type: 'ReportedRoundStates'\n    },\n    subscribeJustifications: {\n      description: 'Subscribes to grandpa justifications',\n      params: [],\n      pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],\n      type: 'JustificationNotification'\n    }\n  },\n  types: {\n    AuthorityIndex: 'u64',\n    AuthorityList: 'Vec<NextAuthority>',\n    AuthorityWeight: 'u64',\n    EncodedFinalityProofs: 'Bytes',\n    GrandpaEquivocation: {\n      _enum: {\n        Prevote: 'GrandpaEquivocationValue',\n        Precommit: 'GrandpaEquivocationValue'\n      }\n    },\n    GrandpaEquivocationProof: {\n      setId: 'SetId',\n      equivocation: 'GrandpaEquivocation'\n    },\n    GrandpaEquivocationValue: {\n      roundNumber: 'u64',\n      identity: 'AuthorityId',\n      first: '(GrandpaPrevote, AuthoritySignature)',\n      second: '(GrandpaPrevote, AuthoritySignature)'\n    },\n    GrandpaPrevote: {\n      targetHash: 'Hash',\n      targetNumber: 'BlockNumber'\n    },\n    JustificationNotification: 'Bytes',\n    KeyOwnerProof: 'MembershipProof',\n    NextAuthority: '(AuthorityId, AuthorityWeight)',\n    PendingPause: {\n      /// Block at which the intention to pause was scheduled.\n      scheduledAt: 'BlockNumber',\n      /// Number of blocks after which the change will be enacted.\n      delay: 'BlockNumber'\n    },\n    PendingResume: {\n      /// Block at which the intention to resume was scheduled.\n      scheduledAt: 'BlockNumber',\n      /// Number of blocks after which the change will be enacted.\n      delay: 'BlockNumber'\n    },\n    Precommits: {\n      currentWeight: 'u32',\n      missing: 'BTreeSet<AuthorityId>'\n    },\n    Prevotes: {\n      currentWeight: 'u32',\n      missing: 'BTreeSet<AuthorityId>'\n    },\n    ReportedRoundStates: {\n      setId: 'u32',\n      best: 'RoundState',\n      background: 'Vec<RoundState>'\n    },\n    RoundState: {\n      round: 'u32',\n      totalWeight: 'u32',\n      thresholdWeight: 'u32',\n      prevotes: 'Prevotes',\n      precommits: 'Precommits'\n    },\n    SetId: 'u64',\n    StoredPendingChange: {\n      scheduledAt: 'BlockNumber',\n      delay: 'BlockNumber',\n      nextAuthorities: 'AuthorityList'\n    },\n    StoredState: {\n      _enum: {\n        /// The current authority set is live, and GRANDPA is enabled.\n        Live: 'Null',\n        /// There is a pending pause event which will be enacted at the given block height.\n        PendingPause: 'PendingPause',\n        /// The current GRANDPA authority set is paused.\n        Paused: 'Null',\n        /// There is a pending resume event which will be enacted at the given block height.\n        PendingResume: 'PendingResume'\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}