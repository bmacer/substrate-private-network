{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { hexToBn } from \"../hex/toBn.mjs\";\nimport { isBigInt } from \"../is/bigInt.mjs\";\nimport { isHex } from \"../is/hex.mjs\";\nimport { isToBn } from \"../is/toBn.mjs\";\n\nfunction numberToBn(value) {\n  return BN.isBN(value) ? value : isToBn(value) ? value.toBn() : new BN(value);\n}\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, BigInt, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\n\n\nexport function bnToBn(value) {\n  if (!value) {\n    return new BN(0);\n  } else if (isHex(value)) {\n    return hexToBn(value.toString());\n  } else if (isBigInt(value)) {\n    return new BN(value.toString());\n  }\n\n  return numberToBn(value);\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util/bn/toBn.mjs"],"names":["BN","hexToBn","isBigInt","isHex","isToBn","numberToBn","value","isBN","toBn","bnToBn","toString"],"mappings":"AAAA;AACA;AACA,OAAOA,EAAP,MAAe,OAAf;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,MAAT,QAAuB,gBAAvB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAON,EAAE,CAACO,IAAH,CAAQD,KAAR,IAAiBA,KAAjB,GAAyBF,MAAM,CAACE,KAAD,CAAN,GAAgBA,KAAK,CAACE,IAAN,EAAhB,GAA+B,IAAIR,EAAJ,CAAOM,KAAP,CAA/D;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASG,MAAT,CAAgBH,KAAhB,EAAuB;AAC5B,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAIN,EAAJ,CAAO,CAAP,CAAP;AACD,GAFD,MAEO,IAAIG,KAAK,CAACG,KAAD,CAAT,EAAkB;AACvB,WAAOL,OAAO,CAACK,KAAK,CAACI,QAAN,EAAD,CAAd;AACD,GAFM,MAEA,IAAIR,QAAQ,CAACI,KAAD,CAAZ,EAAqB;AAC1B,WAAO,IAAIN,EAAJ,CAAOM,KAAK,CAACI,QAAN,EAAP,CAAP;AACD;;AAED,SAAOL,UAAU,CAACC,KAAD,CAAjB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { hexToBn } from \"../hex/toBn.mjs\";\nimport { isBigInt } from \"../is/bigInt.mjs\";\nimport { isHex } from \"../is/hex.mjs\";\nimport { isToBn } from \"../is/toBn.mjs\";\n\nfunction numberToBn(value) {\n  return BN.isBN(value) ? value : isToBn(value) ? value.toBn() : new BN(value);\n}\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, BigInt, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\n\n\nexport function bnToBn(value) {\n  if (!value) {\n    return new BN(0);\n  } else if (isHex(value)) {\n    return hexToBn(value.toString());\n  } else if (isBigInt(value)) {\n    return new BN(value.toString());\n  }\n\n  return numberToBn(value);\n}"]},"metadata":{},"sourceType":"module"}