{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, hexToU8a, isHex, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { U8aFixed } from \"../codec/U8aFixed.mjs\";\n/** @internal */\n\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if (isU8a(value) || Array.isArray(value)) {\n    return u8aToU8a(value);\n  } else if (isHex(value)) {\n    return hexToU8a(value.toString());\n  } else if (isString(value)) {\n    return decodeAddress(value.toString());\n  }\n\n  throw new Error('Unknown type passed to AccountId constructor');\n}\n/**\n * @name GenericAccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nexport class GenericAccountId extends U8aFixed {\n  constructor(registry, value) {\n    const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    assert(decoded.length >= 32 || !decoded.some(b => b), `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);\n    super(registry, decoded, 256);\n  }\n\n  static encode(value, ss58Format) {\n    return encodeAddress(value, ss58Format);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return GenericAccountId.encode(this, this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/generic/AccountId.mjs"],"names":["assert","hexToU8a","isHex","isString","isU8a","u8aToU8a","decodeAddress","encodeAddress","U8aFixed","decodeAccountId","value","Uint8Array","Array","isArray","toString","Error","GenericAccountId","constructor","registry","decoded","length","some","b","encode","ss58Format","eq","other","toHuman","toJSON","chainSS58","toRawType"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,KAA5C,EAAmDC,QAAnD,QAAmE,gBAAnE;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,uBAA7C;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAIC,UAAJ,EAAP;AACD,GAFD,MAEO,IAAIP,KAAK,CAACM,KAAD,CAAL,IAAgBE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAApB,EAA0C;AAC/C,WAAOL,QAAQ,CAACK,KAAD,CAAf;AACD,GAFM,MAEA,IAAIR,KAAK,CAACQ,KAAD,CAAT,EAAkB;AACvB,WAAOT,QAAQ,CAACS,KAAK,CAACI,QAAN,EAAD,CAAf;AACD,GAFM,MAEA,IAAIX,QAAQ,CAACO,KAAD,CAAZ,EAAqB;AAC1B,WAAOJ,aAAa,CAACI,KAAK,CAACI,QAAN,EAAD,CAApB;AACD;;AAED,QAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMC,gBAAN,SAA+BR,QAA/B,CAAwC;AAC7CS,EAAAA,WAAW,CAACC,QAAD,EAAWR,KAAX,EAAkB;AAC3B,UAAMS,OAAO,GAAGV,eAAe,CAACC,KAAD,CAA/B,CAD2B,CACa;;AAExCV,IAAAA,MAAM,CAACmB,OAAO,CAACC,MAAR,IAAkB,EAAlB,IAAwB,CAACD,OAAO,CAACE,IAAR,CAAaC,CAAC,IAAIA,CAAlB,CAA1B,EAAiD,wDAAuDH,OAAO,CAACC,MAAO,EAAvH,CAAN;AACA,UAAMF,QAAN,EAAgBC,OAAhB,EAAyB,GAAzB;AACD;;AAEY,SAANI,MAAM,CAACb,KAAD,EAAQc,UAAR,EAAoB;AAC/B,WAAOjB,aAAa,CAACG,KAAD,EAAQc,UAAR,CAApB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,WAAO,MAAMD,EAAN,CAAShB,eAAe,CAACiB,KAAD,CAAxB,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKd,QAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,QAAQ,GAAG;AACT,WAAOE,gBAAgB,CAACO,MAAjB,CAAwB,IAAxB,EAA8B,KAAKL,QAAL,CAAcW,SAA5C,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,WAAO,WAAP;AACD;;AAlD4C","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, hexToU8a, isHex, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { U8aFixed } from \"../codec/U8aFixed.mjs\";\n/** @internal */\n\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if (isU8a(value) || Array.isArray(value)) {\n    return u8aToU8a(value);\n  } else if (isHex(value)) {\n    return hexToU8a(value.toString());\n  } else if (isString(value)) {\n    return decodeAddress(value.toString());\n  }\n\n  throw new Error('Unknown type passed to AccountId constructor');\n}\n/**\n * @name GenericAccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nexport class GenericAccountId extends U8aFixed {\n  constructor(registry, value) {\n    const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    assert(decoded.length >= 32 || !decoded.some(b => b), `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);\n    super(registry, decoded, 256);\n  }\n\n  static encode(value, ss58Format) {\n    return encodeAddress(value, ss58Format);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return GenericAccountId.encode(this, this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}