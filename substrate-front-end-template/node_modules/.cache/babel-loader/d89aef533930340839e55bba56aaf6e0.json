{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\n\nfunction retrieveStakeOf(api) {\n  return (api.query.electionsPhragmen || api.query.elections).stakeOf.entries().pipe(map(entries => entries.map(([key, stake]) => [key.args[0], stake])));\n}\n\nfunction retrieveVoteOf(api) {\n  return (api.query.electionsPhragmen || api.query.elections).votesOf.entries().pipe(map(entries => entries.map(([key, votes]) => [key.args[0], votes])));\n}\n\nfunction retrievePrev(api) {\n  return combineLatest([retrieveStakeOf(api), retrieveVoteOf(api)]).pipe(map(([stakes, votes]) => {\n    const result = [];\n    votes.forEach(([voter, votes]) => {\n      result.push([voter, {\n        stake: api.registry.createType('Balance'),\n        votes\n      }]);\n    });\n    stakes.forEach(([staker, stake]) => {\n      const entry = result.find(([voter]) => voter.eq(staker));\n\n      if (entry) {\n        entry[1].stake = stake;\n      } else {\n        result.push([staker, {\n          stake,\n          votes: []\n        }]);\n      }\n    });\n    return result;\n  }));\n}\n\nfunction retrieveCurrent(api) {\n  const elections = api.query.electionsPhragmen || api.query.elections;\n  return elections.voting.entries().pipe(map(entries => entries.map(([key, [stake, votes]]) => [key.args[0], {\n    stake,\n    votes\n  }])));\n}\n\nexport function votes(instanceId, api) {\n  return memo(instanceId, () => (api.query.electionsPhragmen || api.query.elections).stakeOf ? retrievePrev(api) : retrieveCurrent(api));\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/council/votes.mjs"],"names":["combineLatest","map","memo","retrieveStakeOf","api","query","electionsPhragmen","elections","stakeOf","entries","pipe","key","stake","args","retrieveVoteOf","votesOf","votes","retrievePrev","stakes","result","forEach","voter","push","registry","createType","staker","entry","find","eq","retrieveCurrent","voting","instanceId"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.mjs\";\n\nfunction retrieveStakeOf(api) {\n  return (api.query.electionsPhragmen || api.query.elections).stakeOf.entries().pipe(map(entries => entries.map(([key, stake]) => [key.args[0], stake])));\n}\n\nfunction retrieveVoteOf(api) {\n  return (api.query.electionsPhragmen || api.query.elections).votesOf.entries().pipe(map(entries => entries.map(([key, votes]) => [key.args[0], votes])));\n}\n\nfunction retrievePrev(api) {\n  return combineLatest([retrieveStakeOf(api), retrieveVoteOf(api)]).pipe(map(([stakes, votes]) => {\n    const result = [];\n    votes.forEach(([voter, votes]) => {\n      result.push([voter, {\n        stake: api.registry.createType('Balance'),\n        votes\n      }]);\n    });\n    stakes.forEach(([staker, stake]) => {\n      const entry = result.find(([voter]) => voter.eq(staker));\n\n      if (entry) {\n        entry[1].stake = stake;\n      } else {\n        result.push([staker, {\n          stake,\n          votes: []\n        }]);\n      }\n    });\n    return result;\n  }));\n}\n\nfunction retrieveCurrent(api) {\n  const elections = api.query.electionsPhragmen || api.query.elections;\n  return elections.voting.entries().pipe(map(entries => entries.map(([key, [stake, votes]]) => [key.args[0], {\n    stake,\n    votes\n  }])));\n}\n\nexport function votes(instanceId, api) {\n  return memo(instanceId, () => (api.query.electionsPhragmen || api.query.elections).stakeOf ? retrievePrev(api) : retrieveCurrent(api));\n}"]},"metadata":{},"sourceType":"module"}