{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { drr } from '@polkadot/rpc-core/util';\nimport { memoize } from '@polkadot/util';\nimport { Observable } from '@polkadot/x-rxjs'; // Wraps a derive, doing 2 things to optimize calls -\n//   1. creates a memo of the inner fn -> Observable, removing when unsubscribed\n//   2. wraps the observable in a drr() (which includes an unsub delay)\n\n/** @internal */\n\nexport function memo(instanceId, inner) {\n  const cached = memoize((...params) => new Observable(observer => {\n    const subscription = inner(...params).subscribe(observer);\n    return () => {\n      cached.unmemoize(...params);\n      subscription.unsubscribe();\n    };\n  }).pipe(drr()), {\n    getInstanceId: () => instanceId\n  });\n  return cached;\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/util/memo.mjs"],"names":["drr","memoize","Observable","memo","instanceId","inner","cached","params","observer","subscription","subscribe","unmemoize","unsubscribe","pipe","getInstanceId"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,QAAoB,yBAApB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CACA;AACA;AACA;;AAEA;;AACA,OAAO,SAASC,IAAT,CAAcC,UAAd,EAA0BC,KAA1B,EAAiC;AACtC,QAAMC,MAAM,GAAGL,OAAO,CAAC,CAAC,GAAGM,MAAJ,KAAe,IAAIL,UAAJ,CAAeM,QAAQ,IAAI;AAC/D,UAAMC,YAAY,GAAGJ,KAAK,CAAC,GAAGE,MAAJ,CAAL,CAAiBG,SAAjB,CAA2BF,QAA3B,CAArB;AACA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACK,SAAP,CAAiB,GAAGJ,MAApB;AACAE,MAAAA,YAAY,CAACG,WAAb;AACD,KAHD;AAID,GANqC,EAMnCC,IANmC,CAM9Bb,GAAG,EAN2B,CAAhB,EAMN;AACdc,IAAAA,aAAa,EAAE,MAAMV;AADP,GANM,CAAtB;AASA,SAAOE,MAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { drr } from '@polkadot/rpc-core/util';\nimport { memoize } from '@polkadot/util';\nimport { Observable } from '@polkadot/x-rxjs';\n// Wraps a derive, doing 2 things to optimize calls -\n//   1. creates a memo of the inner fn -> Observable, removing when unsubscribed\n//   2. wraps the observable in a drr() (which includes an unsub delay)\n\n/** @internal */\nexport function memo(instanceId, inner) {\n  const cached = memoize((...params) => new Observable(observer => {\n    const subscription = inner(...params).subscribe(observer);\n    return () => {\n      cached.unmemoize(...params);\n      subscription.unsubscribe();\n    };\n  }).pipe(drr()), {\n    getInstanceId: () => instanceId\n  });\n  return cached;\n}"]},"metadata":{},"sourceType":"module"}