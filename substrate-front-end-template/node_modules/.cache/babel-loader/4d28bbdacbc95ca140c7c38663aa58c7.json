{"ast":null,"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isUndefined } from '@polkadot/util';\n\nfunction sig({\n  method,\n  section\n}, ...args) {\n  return `${section}.${method}(${args.join(', ')})`;\n}\n\nfunction doDoubleMap(creator, args) {\n  const {\n    key1,\n    key2\n  } = creator.meta.type.asDoubleMap;\n  assert(args.length === 2, `${sig(creator, key1, key2)} is a doublemap, requiring 2 arguments, ${args.length} found`); // pass as tuple\n\n  return [creator, args];\n}\n\nfunction doMap(creator, args) {\n  const {\n    key\n  } = creator.meta.type.asMap;\n  assert(args.length === 1, `${sig(creator, key)} is a map, requiring 1 argument, ${args.length} found`); // expand\n\n  return args.length ? [creator, args[0]] : [creator];\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nexport function extractStorageArgs(creator, _args) {\n  const args = _args.filter(arg => !isUndefined(arg));\n\n  if (creator.meta.type.isDoubleMap) {\n    return doDoubleMap(creator, args);\n  } else if (creator.meta.type.isMap) {\n    return doMap(creator, args);\n  }\n\n  assert(args.length === 0, `${sig(creator)} does not take any arguments, ${args.length} found`); // no args\n\n  return [creator];\n}","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api/util/validate.mjs"],"names":["assert","isUndefined","sig","method","section","args","join","doDoubleMap","creator","key1","key2","meta","type","asDoubleMap","length","doMap","key","asMap","extractStorageArgs","_args","filter","arg","isDoubleMap","isMap"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,gBAApC;;AAEA,SAASC,GAAT,CAAa;AACXC,EAAAA,MADW;AAEXC,EAAAA;AAFW,CAAb,EAGG,GAAGC,IAHN,EAGY;AACV,SAAQ,GAAED,OAAQ,IAAGD,MAAO,IAAGE,IAAI,CAACC,IAAL,CAAU,IAAV,CAAgB,GAA/C;AACD;;AAED,SAASC,WAAT,CAAqBC,OAArB,EAA8BH,IAA9B,EAAoC;AAClC,QAAM;AACJI,IAAAA,IADI;AAEJC,IAAAA;AAFI,MAGFF,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBC,WAHtB;AAIAb,EAAAA,MAAM,CAACK,IAAI,CAACS,MAAL,KAAgB,CAAjB,EAAqB,GAAEZ,GAAG,CAACM,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,CAAsB,2CAA0CL,IAAI,CAACS,MAAO,QAAtG,CAAN,CALkC,CAKoF;;AAEtH,SAAO,CAACN,OAAD,EAAUH,IAAV,CAAP;AACD;;AAED,SAASU,KAAT,CAAeP,OAAf,EAAwBH,IAAxB,EAA8B;AAC5B,QAAM;AACJW,IAAAA;AADI,MAEFR,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBK,KAFtB;AAGAjB,EAAAA,MAAM,CAACK,IAAI,CAACS,MAAL,KAAgB,CAAjB,EAAqB,GAAEZ,GAAG,CAACM,OAAD,EAAUQ,GAAV,CAAe,oCAAmCX,IAAI,CAACS,MAAO,QAAxF,CAAN,CAJ4B,CAI4E;;AAExG,SAAOT,IAAI,CAACS,MAAL,GAAc,CAACN,OAAD,EAAUH,IAAI,CAAC,CAAD,CAAd,CAAd,GAAmC,CAACG,OAAD,CAA1C;AACD,C,CAAC;AACF;;;AAGA,OAAO,SAASU,kBAAT,CAA4BV,OAA5B,EAAqCW,KAArC,EAA4C;AACjD,QAAMd,IAAI,GAAGc,KAAK,CAACC,MAAN,CAAaC,GAAG,IAAI,CAACpB,WAAW,CAACoB,GAAD,CAAhC,CAAb;;AAEA,MAAIb,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBU,WAAtB,EAAmC;AACjC,WAAOf,WAAW,CAACC,OAAD,EAAUH,IAAV,CAAlB;AACD,GAFD,MAEO,IAAIG,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBW,KAAtB,EAA6B;AAClC,WAAOR,KAAK,CAACP,OAAD,EAAUH,IAAV,CAAZ;AACD;;AAEDL,EAAAA,MAAM,CAACK,IAAI,CAACS,MAAL,KAAgB,CAAjB,EAAqB,GAAEZ,GAAG,CAACM,OAAD,CAAU,iCAAgCH,IAAI,CAACS,MAAO,QAAhF,CAAN,CATiD,CAS+C;;AAEhG,SAAO,CAACN,OAAD,CAAP;AACD","sourcesContent":["// Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isUndefined } from '@polkadot/util';\n\nfunction sig({\n  method,\n  section\n}, ...args) {\n  return `${section}.${method}(${args.join(', ')})`;\n}\n\nfunction doDoubleMap(creator, args) {\n  const {\n    key1,\n    key2\n  } = creator.meta.type.asDoubleMap;\n  assert(args.length === 2, `${sig(creator, key1, key2)} is a doublemap, requiring 2 arguments, ${args.length} found`); // pass as tuple\n\n  return [creator, args];\n}\n\nfunction doMap(creator, args) {\n  const {\n    key\n  } = creator.meta.type.asMap;\n  assert(args.length === 1, `${sig(creator, key)} is a map, requiring 1 argument, ${args.length} found`); // expand\n\n  return args.length ? [creator, args[0]] : [creator];\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nexport function extractStorageArgs(creator, _args) {\n  const args = _args.filter(arg => !isUndefined(arg));\n\n  if (creator.meta.type.isDoubleMap) {\n    return doDoubleMap(creator, args);\n  } else if (creator.meta.type.isMap) {\n    return doMap(creator, args);\n  }\n\n  assert(args.length === 0, `${sig(creator)} does not take any arguments, ${args.length} found`); // no args\n\n  return [creator];\n}"]},"metadata":{},"sourceType":"module"}