{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types-known authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// type overrides for modules (where duplication between modules exist)\nconst typesModules = {\n  assets: {\n    Balance: 'TAssetBalance'\n  },\n  babe: {\n    EquivocationProof: 'BabeEquivocationProof'\n  },\n  balances: {\n    Status: 'BalanceStatus'\n  },\n  contracts: {\n    StorageKey: 'ContractStorageKey'\n  },\n  ethereum: {\n    Block: 'EthBlock',\n    Header: 'EthHeader',\n    Receipt: 'EthReceipt',\n    Transaction: 'EthTransaction',\n    TransactionStatus: 'EthTransactionStatus'\n  },\n  evm: {\n    Account: 'EvmAccount',\n    Log: 'EvmLog',\n    Vicinity: 'EvmVicinity'\n  },\n  grandpa: {\n    Equivocation: 'GrandpaEquivocation',\n    EquivocationProof: 'GrandpaEquivocationProof'\n  },\n  identity: {\n    Judgement: 'IdentityJudgement'\n  },\n  inclusion: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  parachains: {\n    Id: 'ParaId'\n  },\n  parasScheduler: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  proposeParachain: {\n    Proposal: 'ParachainProposal'\n  },\n  proxy: {\n    Announcement: 'ProxyAnnouncement'\n  },\n  scheduler: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  society: {\n    Judgement: 'SocietyJudgement',\n    Vote: 'SocietyVote'\n  },\n  staking: {\n    Compact: 'CompactAssignments'\n  },\n  treasury: {\n    Proposal: 'TreasuryProposal'\n  }\n};\nexport default typesModules;","map":{"version":3,"sources":["/Users/bmacer/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types-known/modules.mjs"],"names":["typesModules","assets","Balance","babe","EquivocationProof","balances","Status","contracts","StorageKey","ethereum","Block","Header","Receipt","Transaction","TransactionStatus","evm","Account","Log","Vicinity","grandpa","Equivocation","identity","Judgement","inclusion","ValidatorIndex","parachains","Id","parasScheduler","proposeParachain","Proposal","proxy","Announcement","scheduler","society","Vote","staking","Compact","treasury"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH,GADW;AAInBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,iBAAiB,EAAE;AADf,GAJa;AAOnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE;AADA,GAPS;AAUnBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE;AADH,GAVQ;AAanBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,UADC;AAERC,IAAAA,MAAM,EAAE,WAFA;AAGRC,IAAAA,OAAO,EAAE,YAHD;AAIRC,IAAAA,WAAW,EAAE,gBAJL;AAKRC,IAAAA,iBAAiB,EAAE;AALX,GAbS;AAoBnBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,OAAO,EAAE,YADN;AAEHC,IAAAA,GAAG,EAAE,QAFF;AAGHC,IAAAA,QAAQ,EAAE;AAHP,GApBc;AAyBnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,YAAY,EAAE,qBADP;AAEPhB,IAAAA,iBAAiB,EAAE;AAFZ,GAzBU;AA6BnBiB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE;AADH,GA7BS;AAgCnBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EAAE;AADP,GAhCQ;AAmCnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,EAAE,EAAE;AADM,GAnCO;AAsCnBC,EAAAA,cAAc,EAAE;AACdH,IAAAA,cAAc,EAAE;AADF,GAtCG;AAyCnBI,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,QAAQ,EAAE;AADM,GAzCC;AA4CnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE;AADT,GA5CY;AA+CnBC,EAAAA,SAAS,EAAE;AACTR,IAAAA,cAAc,EAAE;AADP,GA/CQ;AAkDnBS,EAAAA,OAAO,EAAE;AACPX,IAAAA,SAAS,EAAE,kBADJ;AAEPY,IAAAA,IAAI,EAAE;AAFC,GAlDU;AAsDnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF,GAtDU;AAyDnBC,EAAAA,QAAQ,EAAE;AACRR,IAAAA,QAAQ,EAAE;AADF;AAzDS,CAArB;AA6DA,eAAe7B,YAAf","sourcesContent":["// Copyright 2017-2021 @polkadot/types-known authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// type overrides for modules (where duplication between modules exist)\nconst typesModules = {\n  assets: {\n    Balance: 'TAssetBalance'\n  },\n  babe: {\n    EquivocationProof: 'BabeEquivocationProof'\n  },\n  balances: {\n    Status: 'BalanceStatus'\n  },\n  contracts: {\n    StorageKey: 'ContractStorageKey'\n  },\n  ethereum: {\n    Block: 'EthBlock',\n    Header: 'EthHeader',\n    Receipt: 'EthReceipt',\n    Transaction: 'EthTransaction',\n    TransactionStatus: 'EthTransactionStatus'\n  },\n  evm: {\n    Account: 'EvmAccount',\n    Log: 'EvmLog',\n    Vicinity: 'EvmVicinity'\n  },\n  grandpa: {\n    Equivocation: 'GrandpaEquivocation',\n    EquivocationProof: 'GrandpaEquivocationProof'\n  },\n  identity: {\n    Judgement: 'IdentityJudgement'\n  },\n  inclusion: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  parachains: {\n    Id: 'ParaId'\n  },\n  parasScheduler: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  proposeParachain: {\n    Proposal: 'ParachainProposal'\n  },\n  proxy: {\n    Announcement: 'ProxyAnnouncement'\n  },\n  scheduler: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  society: {\n    Judgement: 'SocietyJudgement',\n    Vote: 'SocietyVote'\n  },\n  staking: {\n    Compact: 'CompactAssignments'\n  },\n  treasury: {\n    Proposal: 'TreasuryProposal'\n  }\n};\nexport default typesModules;"]},"metadata":{},"sourceType":"module"}